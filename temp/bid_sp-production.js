/*
 * File: app/model/bid/Area.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.bid.Area', {
    extend:  Ext.data.Model ,

               
                              
      

    fields: [
        {
            name: 'rfxId'
        },
        {
            name: 'areaCode'
        },
        {
            name: 'areaName'
        }
    ]
});

/*
 * File: app/model/bid/Bid.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.bid.Bid', {
    extend:  Ext.data.Model ,

               
                                
                                 
                              
                                
                                
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'no'
        },
        {
            type: 'int',
            defaultValue: 1,
            name: 'revision'
        },
        {
            name: 'purchaseType'
        },
        {
            type: 'date',
            name: 'requestDate'
        },
        {
            type: 'string',
            name: 'name'
        },
        {
            type: 'date',
            name: 'closedDateTime'
        },
        {
            type: 'string',
            name: 'representativeId'
        },
        {
            type: 'string',
            name: 'representativeEmail'
        },
        {
            type: 'string',
            name: 'representativeContact'
        },
        {
            type: 'string',
            name: 'representativeName'
        },
        {
            defaultValue: 'General',
            name: 'contractType'
        },
        {
            defaultValue: 'In',
            name: 'inOutType'
        },
        {
            defaultValue: 'KRW',
            name: 'currencyCode'
        },
        {
            defaultValue: 'Tax',
            name: 'taxType'
        },
        {
            name: 'rfxType'
        },
        {
            name: 'resultState'
        },
        {
            name: 'progressState'
        },
        {
            type: 'date',
            name: 'currencyBaseDate'
        },
        {
            name: 'competitionType'
        },
        {
            name: 'vendorAwardType'
        },
        {
            type: 'float',
            name: 'estimatedAmount'
        },
        {
            type: 'float',
            name: 'contractAmount'
        },
        {
            type: 'boolean',
            defaultValue: true,
            name: 'currentYn'
        },
        {
            type: 'string',
            name: 'operatingUnitId'
        },
        {
            type: 'string',
            name: 'operatingUnitName'
        },
        {
            type: 'date',
            name: 'createDateTime'
        },
        {
            type: 'string',
            name: 'initQuotationId'
        },
        {
            type: 'string',
            name: 'initQuotationNo'
        },
        {
            type: 'int',
            name: 'initQuotationRevision'
        },
        {
            type: 'boolean',
            name: 'noticeYn'
        },
        {
            type: 'date',
            name: 'noticeDate'
        },
        {
            type: 'int',
            defaultValue: 1,
            name: 'bidRevision'
        },
        {
            name: 'bidType'
        },
        {
            type: 'float',
            name: 'winningPriceLimitRate'
        },
        {
            type: 'string',
            name: 'bidLocation'
        },
        {
            type: 'date',
            name: 'beginDateTime'
        },
        {
            type: 'int',
            name: 'beginDateHour'
        },
        {
            type: 'int',
            name: 'beginDateMinute'
        },
        {
            type: 'date',
            name: 'endDateTime'
        },
        {
            type: 'int',
            name: 'endDateHour'
        },
        {
            type: 'int',
            name: 'endDateMinute'
        },
        {
            type: 'string',
            name: 'bidPeriod'
        },
        {
            type: 'boolean',
            name: 'bidAttendRequestYn'
        },
        {
            type: 'string',
            convert: function(v, rec) {
                if(rec.get('bidAttendRequestYn')) {
                    return v.toString();
                } else {
                    return null;
                }
            },
            name: 'bidAttendRequestApprovalYn'
        },
        {
            type: 'date',
            name: 'bidAttendRequestCloseDateTime'
        },
        {
            type: 'int',
            name: 'bidAttendRequestCloseDateHour'
        },
        {
            type: 'int',
            name: 'bidAttendRequestCloseDateMinute'
        },
        {
            type: 'date',
            name: 'openBidDateTime'
        },
        {
            type: 'int',
            name: 'openBidDateHour'
        },
        {
            type: 'int',
            name: 'openBidDateMinute'
        },
        {
            type: 'date',
            name: 'openedBidDateTime'
        },
        {
            type: 'boolean',
            name: 'estimatedPriceOpenYn'
        },
        {
            type: 'float',
            name: 'budgetAmount'
        },
        {
            type: 'string',
            name: 'bidAttendRestrict'
        },
        {
            type: 'string',
            name: 'note'
        },
        {
            name: 'bidAttendRequestProgressState'
        },
        {
            type: 'boolean',
            name: 'canSelectAttending'
        },
        {
            type: 'boolean',
            name: 'openBidYn'
        },
        {
            name: 'preAttendDetailProgressState'
        },
        {
            type: 'string',
            name: 'groupEvalBasisId'
        },
        {
            type: 'string',
            name: 'groupEvalId'
        },
        {
            type: 'float',
            name: 'nonPriceEvalRate'
        },
        {
            type: 'float',
            name: 'priceEvalRate'
        },
        {
            type: 'float',
            name: 'passScore'
        },
        {
            type: 'string',
            name: 'multiEstimatedPriceId'
        },
        {
            type: 'int',
            name: 'totalReversePriceCount'
        },
        {
            type: 'int',
            name: 'estimatedReversePriceCount'
        },
        {
            name: 'specEvalStep'
        },
        {
            name: 'pqEvalStep'
        },
        {
            name: 'bidAttendRequestStep'
        },
        {
            name: 'bidAttendStep'
        },
        {
            name: 'nonPriceEvalStep'
        },
        {
            name: 'bidOpenStep'
        },
        {
            name: 'qualifiedEvalStep'
        },
        {
            type: 'string',
            name: 'bidAttendRequestCloseYn'
        },
        {
            type: 'int',
            name: 'bidAttendRequestCount'
        },
        {
            type: 'string',
            name: 'bidVendorAttendRequestId'
        },
        {
            type: 'boolean',
            name: 'startBidAttendYn'
        },
        {
            type: 'boolean',
            name: 'specEvalYn'
        },
        {
            type: 'date',
            name: 'specEvalCloseDateTime'
        },
        {
            type: 'int',
            name: 'specEvalCloseDateHour'
        },
        {
            type: 'int',
            name: 'specEvalCloseDateMinute'
        },
        {
            name: 'specEvalProgressState'
        },
        {
            name: 'specEvalResultState'
        },
        {
            type: 'string',
            name: 'specEvalCloseYn'
        },
        {
            type: 'string',
            name: 'specEvalCompleteYn'
        },
        {
            type: 'int',
            name: 'specEvalSubmitCount'
        },
        {
            type: 'int',
            name: 'specEvalTotalCount'
        },
        {
            type: 'string',
            name: 'specEvalCount'
        },
        {
            type: 'boolean',
            name: 'pqEvalYn'
        },
        {
            type: 'date',
            name: 'pqEvalCloseDateTime'
        },
        {
            type: 'int',
            name: 'pqEvalCloseDateHour'
        },
        {
            type: 'int',
            name: 'pqEvalCloseDateMinute'
        },
        {
            type: 'date',
            name: 'contractBeginDate'
        },
        {
            type: 'date',
            name: 'contractEndDate'
        },
        {
            type: 'int',
            name: 'warrantyMonths'
        },
        {
            type: 'float',
            name: 'advancedPaymentRate'
        },
        {
            name: 'warrantyBasisDateCode'
        },
        {
            type: 'boolean',
            name: 'coSubContractYn'
        },
        {
            type: 'boolean',
            name: 'subContractYn'
        },
        {
            type: 'boolean',
            name: 'fieldIntroductionYn'
        },
        {
            type: 'boolean',
            name: 'fieldIntroductionCloseYn'
        },
        {
            type: 'boolean',
            name: 'fieldIntroductionCompleteYn'
        },
        {
            type: 'boolean',
            name: 'canFieldIntroductionProgress'
        },
        {
            type: 'date',
            name: 'fieldIntroductionBeginDateTime'
        },
        {
            type: 'int',
            name: 'fieldIntroductionBeginDateHour'
        },
        {
            type: 'int',
            name: 'fieldIntroductionBeginDateMinute'
        },
        {
            type: 'date',
            name: 'fieldIntroductionEndDateTime'
        },
        {
            type: 'int',
            name: 'fieldIntroductionEndDateHour'
        },
        {
            type: 'int',
            name: 'fieldIntroductionEndDateMinute'
        },
        {
            type: 'boolean',
            name: 'fieldIntroductionAttendRestric'
        },
        {
            type: 'string',
            convert: function(v, rec) {
                if(rec.get('fieldIntroductionAttendRestric')) {
                    return 'true';
                } else {
                    return 'false';
                }
            },
            name: 'fieldIntroductionAttendRestricStr'
        },
        {
            type: 'string',
            name: 'fieldIntroductionLocation'
        },
        {
            name: 'pqEvalProgressState'
        },
        {
            name: 'pqEvalResultState'
        },
        {
            type: 'string',
            name: 'pqEvalCloseYn'
        },
        {
            type: 'string',
            name: 'pqEvalCompleteYn'
        },
        {
            type: 'int',
            name: 'pqEvalSubmitCount'
        },
        {
            type: 'int',
            name: 'pqEvalTotalCount'
        },
        {
            type: 'string',
            name: 'pqEvalCount'
        },
        {
            type: 'int',
            name: 'fieldIntroductionCount'
        },
        {
            type: 'boolean',
            name: 'hasPrItem'
        },
        {
            type: 'string',
            name: 'attachFileGroupId'
        },
        {
            type: 'string',
            name: 'progressYn'
        },
        {
            type: 'string',
            name: 'closedYn'
        },
        {
            type: 'string',
            name: 'completedYn'
        },
        {
            type: 'string',
            convert: function(v, rec) {
                if(rec.get('purchaseType') === 'Product') {
                    return 'Product';
                } else {
                    return 'Service';
                }
            },
            name: 'propertyType'
        },
        {
            type: 'date',
            name: 'submitCloseDateTime'
        },
        {
            type: 'string',
            convert: function(v, rec) {
                if(rec.get('noticeYn')) {
                    return 'true';
                } else {
                    return 'false';
                }
            },
            name: 'noticeYnStr'
        },
        {
            name: 'bidAttendResultState'
        },
        {
            name: 'evaluatorEvalProgressState'
        },
        {
            type: 'date',
            name: 'evaluatorEvalCompleteDate'
        },
        {
            type: 'string',
            name: 'purchasePlanNo'
        },
        {
            type: 'string',
            name: 'representativeDepartmentName'
        },
        {
            name: 'itemType'
        },
        {
            type: 'string',
            name: 'changeReason'
        },
        {
            type: 'string',
            name: 'cancelReason'
        },
        {
            type: 'boolean',
            name: 'electronicOpenPrivateYn'
        },
        {
            name: 'noticeType'
        },
        {
            type: 'boolean',
            name: 'simulationBidYn'
        },
        {
            type: 'boolean',
            name: 'alwaysAttendYn'
        },
        {
            name: 'bidMethod'
        },
        {
            type: 'float',
            name: 'proposalTechnicalRate'
        },
        {
            type: 'float',
            name: 'proposalPriceRate'
        },
        {
            type: 'float',
            name: 'proposalPassScore'
        },
        {
            type: 'boolean',
            name: 'jointSupplyDemandYn'
        },
        {
            type: 'int',
            name: 'jointSupplyDemandVendorCount'
        },
        {
            type: 'date',
            name: 'jointSupplyDemandCloseDateTime'
        },
        {
            name: 'twoPhaseType'
        },
        {
            type: 'string',
            name: 'privateReason'
        },
        {
            type: 'string',
            name: 'privateReasonCode'
        },
        {
            type: 'date',
            name: 'privateSettlementCloseDateTime'
        },
        {
            type: 'int',
            name: 'privateSettlementCloseDateHour'
        },
        {
            type: 'int',
            name: 'privateSettlementCloseDateMinute'
        },
        {
            type: 'date',
            name: 'quotationSubmitCloseDateTime'
        },
        {
            type: 'int',
            name: 'quotationSubmitCloseDateHour'
        },
        {
            type: 'int',
            name: 'quotationSubmitCloseDateMinute'
        },
        {
            type: 'boolean',
            name: 'quotationSubmitRestrictYn'
        },
        {
            type: 'boolean',
            name: 'quotationEvalYn'
        },
        {
            type: 'int',
            name: 'quotationSubmitCount'
        },
        {
            type: 'string',
            name: 'deliveryDueDate'
        },
        {
            type: 'string',
            name: 'deliveryLocation'
        },
        {
            type: 'string',
            name: 'bidAttendDocument'
        },
        {
            type: 'string',
            name: 'moreInformation'
        },
        {
            type: 'string',
            name: 'etc'
        },
        {
            type: 'string',
            name: 'tenderingType'
        },
        {
            type: 'string',
            name: 'tenderingSecurityDeposit'
        },
        {
            type: 'string',
            name: 'contractAward'
        },
        {
            type: 'float',
            name: 'approximateRate'
        },
        {
            type: 'string',
            name: 'estimatedAmountNote'
        },
        {
            name: 'estimatedAmountDecimalUnit'
        },
        {
            type: 'string',
            name: 'failPrivateNote'
        },
        {
            type: 'string',
            name: 'failReason'
        },
        {
            type: 'string',
            name: 'failReasonCode'
        },
        {
            type: 'boolean',
            name: 'negoRankingOpenYn'
        },
        {
            type: 'boolean',
            name: 'emergencyNoticeYn'
        },
        {
            name: 'openResult'
        },
        {
            name: 'estimatedPriceProgressState'
        },
        {
            type: 'string',
            name: 'purchasePlanId'
        },
        {
            type: 'string',
            name: 'estimatedPriceMakerId'
        },
        {
            type: 'string',
            name: 'privateSettlementVendorId'
        },
        {
            type: 'float',
            name: 'presumedPrice'
        },
        {
            type: 'date',
            name: 'specProposalCloseDateTime'
        },
        {
            type: 'boolean',
            name: 'specProposalEvalYn'
        },
        {
            type: 'string',
            name: 'usage'
        },
        {
            type: 'date',
            name: 'purchasePlanDate'
        },
        {
            type: 'date',
            name: 'prDate'
        },
        {
            type: 'date',
            name: 'specProposalBeginDateTime'
        },
        {
            type: 'boolean',
            name: 'regionLimitAutoEvalYn'
        },
        {
            type: 'boolean',
            name: 'detailbidYn'
        },
        {
            type: 'boolean',
            name: 'swBusinessYn'
        },
        {
            type: 'boolean',
            name: 'simulationYn'
        },
        {
            type: 'int',
            name: 'constructionServicePeriodDays'
        },
        {
            type: 'int',
            name: 'decimalPointDigitNumber'
        },
        {
            type: 'boolean',
            name: 'decimalPointUseYn'
        },
        {
            type: 'float',
            name: 'subContractBudgetAmount'
        },
        {
            type: 'float',
            name: 'approximateAmount'
        },
        {
            type: 'string',
            name: 'contractSize'
        },
        {
            type: 'string',
            name: 'purchaseSpecAttachFileGroupId'
        },
        {
            type: 'string',
            name: 'specialConditionAttachFileGrpId'
        },
        {
            type: 'string',
            name: 'etcAttachFileGroupId'
        },
        {
            name: 'jointSupplyDemandMethod'
        },
        {
            type: 'string',
            name: 'limitedReasonCode'
        },
        {
            type: 'string',
            name: 'aprvDocNo'
        },
        {
            name: 'appvProgressState'
        },
        {
            type: 'float',
            name: 'subcontractBudgetAmount'
        },
        {
            type: 'int',
            name: 'jointSupplyDemandCloseDateHour'
        },
        {
            type: 'int',
            name: 'jointSupplyDemandCloseDateMinute'
        },
        {
            type: 'string',
            name: 'targetItem'
        },
        {
            type: 'boolean',
            name: 'regionJointSupplyDemandYn'
        },
        {
            type: 'float',
            name: 'presumedAmount'
        },
        {
            name: 'regionLimitAutoEvalType'
        },
        {
            name: 'licenseAutoEvalType'
        },
        {
            name: 'qualifiedAutoEvalMethod'
        },
        {
            type: 'boolean',
            name: 'wishQuantityYn'
        },
        {
            type: 'boolean',
            name: 'smallMediumFirmYn'
        },
        {
            type: 'boolean',
            name: 'totalEvalYn'
        },
        {
            type: 'date',
            name: 'purchasePlanPlanDate'
        },
        {
            type: 'string',
            name: 'bidTimeId'
        },
        {
            name: 'constructType'
        },
        {
            type: 'boolean',
            name: 'qualifiedEvalOnlineProgressYn'
        },
        {
            type: 'string',
            name: 'autoAttachFileGroupId'
        },
        {
            type: 'string',
            name: 'purchaseGroupId'
        },
        {
            type: 'string',
            name: 'aprvCancelDocNo'
        },
        {
            name: 'appvCancelProgressState'
        },
        {
            name: 'bidDateTimeProgressState'
        },
        {
            type: 'date',
            name: 'afterBidEndDateTime'
        },
        {
            type: 'date',
            name: 'afterBidAttendCloseDateTime'
        },
        {
            name: 'noticeKind'
        },
        {
            type: 'boolean',
            name: 'insuranceBidYn'
        },
        {
            type: 'string',
            name: 'bidTypeDetail'
        },
        {
            type: 'string',
            name: 'commodityQuantity'
        },
        {
            type: 'string',
            name: 'bidRepresentativeQualification'
        },
        {
            type: 'string',
            name: 'bidEvalContractAwarding'
        },
        {
            type: 'string',
            name: 'deliverySchedule'
        },
        {
            type: 'string',
            name: 'contractInfo'
        },
        {
            type: 'string',
            name: 'bidAttendRequestDocument'
        },
        {
            type: 'int',
            name: 'specProposalBeginDateHour'
        },
        {
            type: 'int',
            name: 'specProposalBeginDateMinute'
        },
        {
            type: 'int',
            name: 'specProposalCloseDateHour'
        },
        {
            type: 'int',
            name: 'specProposalCloseDateMinute'
        },
        {
            name: 'estimatedPriceAmount'
        },
        {
            type: 'string',
            name: 'estimatedNote'
        },
        {
            name: 'manySupplyType'
        },
        {
            type: 'date',
            name: 'bidAttendRequestBeginDateTime'
        },
        {
            name: 'hsCode'
        },
        {
            name: 'transType'
        },
        {
            type: 'date',
            name: 'forienDeliveryDueDate'
        },
        {
            type: 'date',
            name: 'quotationSubmitStartDateTime'
        }
    ]
});

/*
 * File: app/model/bid/BidDateTimeChange.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.bid.BidDateTimeChange', {
    extend:  Ext.data.Model ,

               
                                
                                 
                              
                                
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'revision'
        },
        {
            type: 'int',
            name: 'orderNo'
        },
        {
            type: 'string',
            name: 'changeReason'
        },
        {
            type: 'date',
            name: 'requestDate'
        },
        {
            name: 'progressState'
        },
        {
            type: 'string',
            name: 'bidId'
        },
        {
            type: 'string',
            name: 'bidNo'
        },
        {
            type: 'string',
            name: 'bidName'
        },
        {
            type: 'date',
            name: 'bidNoticeDate'
        },
        {
            type: 'boolean',
            name: 'bidAlwaysAttendYn'
        },
        {
            name: 'bidBidType'
        },
        {
            type: 'date',
            name: 'beforeBidAttendCloseDateTime'
        },
        {
            type: 'date',
            name: 'beforeSpecProposaBeginDateTime'
        },
        {
            type: 'date',
            name: 'beforeSpecProposaCloseDateTime'
        },
        {
            type: 'date',
            name: 'beforeBidBeginDateTime'
        },
        {
            type: 'date',
            name: 'beforeBidEndDateTime'
        },
        {
            type: 'date',
            name: 'beforeOpenBidDateTime'
        },
        {
            type: 'date',
            name: 'afterBidAttendCloseDateTime'
        },
        {
            type: 'date',
            name: 'afterSpecProposalBeginDateTime'
        },
        {
            type: 'date',
            name: 'afterSpecProposalCloseDateTime'
        },
        {
            type: 'date',
            name: 'afterBidBeginDateTime'
        },
        {
            type: 'date',
            name: 'afterBidEndDateTime'
        },
        {
            type: 'date',
            name: 'afterOpenBidDateTime'
        },
        {
            type: 'date',
            name: 'errorBeginDateTime'
        },
        {
            type: 'date',
            name: 'errorEndDateTime'
        },
        {
            type: 'string',
            name: 'changeType'
        },
        {
            type: 'boolean',
            name: 'autoChangeYn'
        },
        {
            type: 'int',
            name: 'afterBidEndDateHour'
        },
        {
            type: 'int',
            name: 'afterBidEndDateMinute'
        },
        {
            type: 'int',
            name: 'afterSpecProposalCloseDateHour'
        },
        {
            type: 'int',
            name: 'afterSpecProposalCloseDateMinute'
        },
        {
            type: 'int',
            name: 'afterOpenBidDateHour'
        },
        {
            type: 'int',
            name: 'afterOpenBidDateMinute'
        },
        {
            type: 'string',
            name: 'operatingUnitId'
        },
        {
            type: 'string',
            name: 'changeTypeName'
        },
        {
            type: 'date',
            name: 'beforeDateTime'
        },
        {
            type: 'date',
            name: 'afterDateTime'
        }
    ]
});

/*
 * File: app/model/bid/BidItem.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.bid.BidItem', {
    extend:  Ext.data.Model ,

               
                                
                                
                              
                                 
                                
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'rfxId'
        },
        {
            name: 'purchaseType'
        },
        {
            type: 'string',
            name: 'itemLineNo'
        },
        {
            type: 'float',
            name: 'quantity'
        },
        {
            name: 'currencyCode'
        },
        {
            type: 'string',
            name: 'itemId'
        },
        {
            type: 'string',
            name: 'itemCode'
        },
        {
            type: 'string',
            name: 'itemName'
        },
        {
            type: 'string',
            name: 'itemSpec'
        },
        {
            name: 'itemUnit'
        },
        {
            type: 'string',
            name: 'prItemId'
        },
        {
            type: 'string',
            name: 'prNo'
        },
        {
            type: 'string',
            name: 'prItemLineNo'
        },
        {
            type: 'string',
            name: 'deliveryLocation'
        },
        {
            type: 'date',
            name: 'deliveryDueDate'
        },
        {
            type: 'string',
            name: 'executionLocation'
        },
        {
            type: 'date',
            name: 'executionBeginDate'
        },
        {
            type: 'date',
            name: 'executionEndDate'
        },
        {
            type: 'date',
            name: 'contractBeginDate'
        },
        {
            type: 'date',
            name: 'contractEndDate'
        },
        {
            type: 'string',
            name: 'purchaseGroupId'
        },
        {
            type: 'string',
            name: 'purchaseGroupName'
        },
        {
            type: 'string',
            name: 'attachFileGroupId'
        },
        {
            type: 'int',
            name: 'countAttachFileItems'
        },
        {
            type: 'float',
            name: 'estimatedPrice'
        },
        {
            type: 'string',
            name: 'requesterName'
        },
        {
            type: 'string',
            convert: function(v, rec) {
                if(rec.get('purchaseType') === 'Product') {
                    return 'Product';
                } else {
                    return 'Service';
                }
            },
            name: 'propertyType'
        },
        {
            type: 'boolean',
            name: 'basisItemYn'
        }
    ]
});

/*
 * File: app/model/bid/BidVendorAttendRequest.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.bid.BidVendorAttendRequest', {
    extend:  Ext.data.Model ,

               
                                
                                 
                              
                                
                                
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'representativeName'
        },
        {
            type: 'string',
            name: 'representativeMobileNo'
        },
        {
            type: 'string',
            name: 'representativeEmail'
        },
        {
            name: 'progressState'
        },
        {
            name: 'resultState'
        },
        {
            type: 'string',
            name: 'operatingUnitId'
        },
        {
            type: 'string',
            name: 'operatingUnitName'
        },
        {
            type: 'string',
            name: 'rfxId'
        },
        {
            type: 'string',
            name: 'rfxNo'
        },
        {
            type: 'int',
            name: 'rfxRevision'
        },
        {
            type: 'string',
            name: 'rfxName'
        },
        {
            name: 'rfxProgressState'
        },
        {
            name: 'purchaseType'
        },
        {
            name: 'competitionType'
        },
        {
            type: 'date',
            name: 'rfxRequestDate'
        },
        {
            type: 'date',
            name: 'closedDateTime'
        },
        {
            type: 'date',
            name: 'closeDateTime'
        },
        {
            type: 'string',
            name: 'attendId'
        },
        {
            type: 'string',
            name: 'attendNo'
        },
        {
            type: 'float',
            name: 'attendAmount'
        },
        {
            type: 'date',
            name: 'submitDateTime'
        },
        {
            name: 'attendProgressState'
        },
        {
            name: 'attendResultState'
        },
        {
            type: 'string',
            name: 'vendorId'
        },
        {
            type: 'string',
            name: 'vendorCode'
        },
        {
            type: 'string',
            name: 'vendorName'
        },
        {
            type: 'string',
            name: 'vendorRegistrationNo'
        },
        {
            type: 'string',
            name: 'vendorPresidentName'
        },
        {
            name: 'rfxType'
        },
        {
            type: 'date',
            name: 'beginDateTime'
        },
        {
            type: 'date',
            name: 'endDateTime'
        },
        {
            type: 'string',
            name: 'reverseAuctionPeriod'
        },
        {
            type: 'string',
            name: 'bidAttendRequestId'
        },
        {
            type: 'string',
            name: 'pqEvalId'
        },
        {
            type: 'string',
            name: 'specEvalId'
        },
        {
            type: 'string',
            name: 'fieldIntroductionId'
        },
        {
            type: 'boolean',
            name: 'vendorG2BRegistrationVendorYn'
        },
        {
            type: 'boolean',
            name: 'vendorCurrentProgressYn'
        },
        {
            type: 'string',
            name: 'representativeId'
        },
        {
            type: 'int',
            name: 'settlementRanking'
        },
        {
            name: 'privateQuotationProgressState'
        },
        {
            type: 'boolean',
            name: 'privateQuotationAttendSubmitYn'
        },
        {
            type: 'string',
            name: 'privateQuotationAttendId'
        },
        {
            type: 'boolean',
            name: 'privateSettlementYn'
        },
        {
            name: 'vendorEvalGrade'
        }
    ]
});

/*
 * File: app/model/bid/Code.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.bid.Code', {
    extend:  Ext.data.Model ,

               
                               
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'name'
        },
        {
            type: 'string',
            name: 'typeName'
        },
        {
            name: 'optionalYn'
        },
        {
            type: 'string',
            name: 'code'
        },
        {
            type: 'string',
            name: 'attachDocumentCodeId'
        },
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'operatingUnitId'
        },
        {
            type: 'string',
            name: 'operatingUnitName'
        }
    ]
});

/*
 * File: app/model/bid/EstimatedPriceBasicReportItem.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.bid.EstimatedPriceBasicReportItem', {
    extend:  Ext.data.Model ,

               
                              
      

    fields: [
        {
            name: 'id'
        },
        {
            name: 'itemName'
        },
        {
            name: 'itemSpec'
        },
        {
            name: 'itemCode'
        },
        {
            name: 'calculatedPrice'
        }
    ]
});

/*
 * File: app/model/bid/FileItem.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.bid.FileItem', {
    extend:  Ext.data.Model ,

               
                                
                                
      

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'name'
        },
        {
            type: 'int',
            name: 'size'
        },
        {
            type: 'string',
            name: 'extension'
        }
    ]
});

/*
 * File: app/model/bid/LicenseCodes.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.bid.LicenseCodes', {
    extend:  Ext.data.Model ,

               
                                
      

    identifier: 'uuid',

    fields: [
        {
            name: 'bidId'
        },
        {
            name: 'licenseQualificationCode'
        },
        {
            name: 'licenseQualificationCodeName'
        },
        {
            name: 'companyId'
        },
        {
            name: 'creatorId'
        },
        {
            name: 'creatorName'
        },
        {
            name: 'updaterId'
        },
        {
            name: 'updaterName'
        },
        {
            type: 'boolean',
            name: 'delYn'
        },
        {
            name: 'codeId'
        }
    ]
});

/*
 * File: app/model/bid/ProgressState.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.bid.ProgressState', {
    extend:  Ext.data.Model ,

               
                                 
                             
      

    fields: [
        {
            name: 'id'
        },
        {
            name: 'title'
        },
        {
            name: 'status'
        },
        {
            name: 'progresState'
        },
        {
            name: 'parallel'
        },
        {
            type: 'int',
            name: 'parallelYn'
        },
        {
            type: 'int',
            name: 'parallelNo'
        },
        {
            type: 'int',
            name: 'orderNo'
        },
        {
            name: 'urlLink'
        },
        {
            name: 'tabTitle'
        },
        {
            name: 'notiMsg'
        },
        {
            name: 'paramNo'
        },
        {
            name: 'paramOperatingUnit'
        },
        {
            type: 'date',
            name: 'paramNoticeDate'
        },
        {
            name: 'menuCode'
        },
        {
            name: 'companyId'
        }
    ]
});

/*
 * File: app/model/bid/QualifiedCodes.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.bid.QualifiedCodes', {
    extend:  Ext.data.Model ,

               
                                
      

    identifier: 'uuid',

    fields: [
        {
            name: 'bidId'
        },
        {
            name: 'qualifiedQualificationCode'
        },
        {
            name: 'qualifiedQualificationCodeName'
        },
        {
            name: 'etc'
        },
        {
            name: 'companyId'
        },
        {
            name: 'creatorId'
        },
        {
            name: 'creatorName'
        },
        {
            name: 'updaterId'
        },
        {
            name: 'updaterName'
        },
        {
            type: 'boolean',
            name: 'delYn'
        },
        {
            name: 'codeId'
        }
    ]
});

/*
 * File: app/model/bid/RegionCodes.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.bid.RegionCodes', {
    extend:  Ext.data.Model ,

               
                                
      

    identifier: 'uuid',

    fields: [
        {
            name: 'bidId'
        },
        {
            name: 'areaCode'
        },
        {
            name: 'areaCodeName'
        },
        {
            name: 'subAreaCode'
        },
        {
            name: 'subAreaCodeName'
        },
        {
            name: 'companyId'
        },
        {
            name: 'creatorId'
        },
        {
            name: 'creatorName'
        },
        {
            name: 'updaterId'
        },
        {
            name: 'updaterName'
        },
        {
            type: 'boolean',
            name: 'delYn'
        },
        {
            name: 'codeId'
        }
    ]
});

/*
 * File: app/model/bid/comboProperty.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.bid.comboProperty', {
    extend:  Ext.data.Model ,

               
                               
      

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'code'
        },
        {
            type: 'string',
            name: 'text'
        },
        {
            type: 'string',
            name: 'additionalProperty1'
        },
        {
            type: 'string',
            name: 'additionalProperty2'
        },
        {
            type: 'string',
            name: 'additionalProperty3'
        },
        {
            type: 'string',
            name: 'additionalProperty4'
        },
        {
            type: 'string',
            name: 'additionalProperty5'
        }
    ]
});

/*
 * File: app/model/bid/tempModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.bid.tempModel', {
    extend:  Ext.data.Model ,

               
                               
      

    fields: [
        {
            type: 'string',
            name: 'text'
        },
        {
            type: 'string',
            name: 'value'
        }
    ]
});

/*
 * File: app/model/catalog/CompanyCode.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.catalog.CompanyCode', {
    extend:  Ext.data.Model ,

               
                               
      

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'code'
        },
        {
            type: 'string',
            name: 'name'
        }
    ]
});

/*
 * File: app/model/cmmn/CompanyCode.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.cmmn.CompanyCode', {
    extend:  Ext.data.Model ,

               
                               
      

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'code'
        },
        {
            type: 'string',
            name: 'name'
        }
    ]
});

/*
 * File: app/model/foreign/Bid.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.foreign.Bid', {
    extend:  Ext.data.Model ,

               
                                
                                 
                              
                                
                                
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'no'
        },
        {
            type: 'int',
            defaultValue: 1,
            name: 'revision'
        },
        {
            name: 'purchaseType'
        },
        {
            type: 'date',
            name: 'requestDate'
        },
        {
            type: 'string',
            name: 'name'
        },
        {
            type: 'date',
            name: 'closedDateTime'
        },
        {
            type: 'string',
            name: 'representativeId'
        },
        {
            type: 'string',
            name: 'representativeEmail'
        },
        {
            type: 'string',
            name: 'representativeContact'
        },
        {
            type: 'string',
            name: 'representativeName'
        },
        {
            defaultValue: 'General',
            name: 'contractType'
        },
        {
            name: 'inOutType'
        },
        {
            defaultValue: 'KRW',
            name: 'currencyCode'
        },
        {
            defaultValue: 'Tax',
            name: 'taxType'
        },
        {
            name: 'rfxType'
        },
        {
            name: 'resultState'
        },
        {
            name: 'progressState'
        },
        {
            type: 'date',
            name: 'currencyBaseDate'
        },
        {
            name: 'competitionType'
        },
        {
            name: 'vendorAwardType'
        },
        {
            type: 'float',
            name: 'estimatedAmount'
        },
        {
            type: 'float',
            name: 'contractAmount'
        },
        {
            type: 'boolean',
            defaultValue: true,
            name: 'currentYn'
        },
        {
            name: 'operatingUnitId'
        },
        {
            type: 'string',
            name: 'operatingUnitName'
        },
        {
            type: 'date',
            name: 'createDateTime'
        },
        {
            type: 'string',
            name: 'initQuotationId'
        },
        {
            type: 'string',
            name: 'initQuotationNo'
        },
        {
            type: 'int',
            name: 'initQuotationRevision'
        },
        {
            type: 'boolean',
            name: 'noticeYn'
        },
        {
            type: 'date',
            name: 'noticeDate'
        },
        {
            type: 'int',
            defaultValue: 1,
            name: 'bidRevision'
        },
        {
            name: 'bidType'
        },
        {
            type: 'float',
            name: 'winningPriceLimitRate'
        },
        {
            type: 'string',
            name: 'bidLocation'
        },
        {
            type: 'date',
            name: 'beginDateTime'
        },
        {
            type: 'int',
            name: 'beginDateHour'
        },
        {
            type: 'int',
            name: 'beginDateMinute'
        },
        {
            type: 'date',
            name: 'endDateTime'
        },
        {
            type: 'int',
            name: 'endDateHour'
        },
        {
            type: 'int',
            name: 'endDateMinute'
        },
        {
            type: 'string',
            name: 'bidPeriod'
        },
        {
            type: 'boolean',
            name: 'bidAttendRequestYn'
        },
        {
            type: 'string',
            convert: function(v, rec) {
                if(rec.get('bidAttendRequestYn')) {
                    return v.toString();
                } else {
                    return null;
                }
            },
            name: 'bidAttendRequestApprovalYn'
        },
        {
            type: 'date',
            name: 'bidAttendRequestCloseDateTime'
        },
        {
            type: 'int',
            name: 'bidAttendRequestCloseDateHour'
        },
        {
            type: 'int',
            name: 'bidAttendRequestCloseDateMinute'
        },
        {
            type: 'date',
            name: 'openBidDateTime'
        },
        {
            type: 'int',
            name: 'openBidDateHour'
        },
        {
            type: 'int',
            name: 'openBidDateMinute'
        },
        {
            type: 'date',
            name: 'openedBidDateTime'
        },
        {
            type: 'boolean',
            name: 'estimatedPriceOpenYn'
        },
        {
            type: 'float',
            name: 'budgetAmount'
        },
        {
            type: 'string',
            name: 'bidAttendRestrict'
        },
        {
            type: 'string',
            name: 'note'
        },
        {
            name: 'bidAttendRequestProgressState'
        },
        {
            type: 'boolean',
            name: 'canSelectAttending'
        },
        {
            type: 'boolean',
            name: 'openBidYn'
        },
        {
            name: 'preAttendDetailProgressState'
        },
        {
            type: 'string',
            name: 'groupEvalBasisId'
        },
        {
            type: 'string',
            name: 'groupEvalId'
        },
        {
            type: 'float',
            name: 'nonPriceEvalRate'
        },
        {
            type: 'float',
            name: 'priceEvalRate'
        },
        {
            type: 'float',
            name: 'passScore'
        },
        {
            type: 'string',
            name: 'multiEstimatedPriceId'
        },
        {
            type: 'int',
            name: 'totalReversePriceCount'
        },
        {
            type: 'int',
            name: 'estimatedReversePriceCount'
        },
        {
            name: 'specEvalStep'
        },
        {
            name: 'pqEvalStep'
        },
        {
            name: 'bidAttendRequestStep'
        },
        {
            name: 'bidAttendStep'
        },
        {
            name: 'nonPriceEvalStep'
        },
        {
            name: 'bidOpenStep'
        },
        {
            name: 'qualifiedEvalStep'
        },
        {
            type: 'string',
            name: 'bidAttendRequestCloseYn'
        },
        {
            type: 'int',
            name: 'bidAttendRequestCount'
        },
        {
            type: 'string',
            name: 'bidVendorAttendRequestId'
        },
        {
            type: 'boolean',
            name: 'startBidAttendYn'
        },
        {
            type: 'boolean',
            name: 'specEvalYn'
        },
        {
            type: 'date',
            name: 'specEvalCloseDateTime'
        },
        {
            type: 'int',
            name: 'specEvalCloseDateHour'
        },
        {
            type: 'int',
            name: 'specEvalCloseDateMinute'
        },
        {
            name: 'specEvalProgressState'
        },
        {
            name: 'specEvalResultState'
        },
        {
            type: 'string',
            name: 'specEvalCloseYn'
        },
        {
            type: 'string',
            name: 'specEvalCompleteYn'
        },
        {
            type: 'int',
            name: 'specEvalSubmitCount'
        },
        {
            type: 'int',
            name: 'specEvalTotalCount'
        },
        {
            type: 'string',
            name: 'specEvalCount'
        },
        {
            type: 'boolean',
            name: 'pqEvalYn'
        },
        {
            type: 'date',
            name: 'pqEvalCloseDateTime'
        },
        {
            type: 'int',
            name: 'pqEvalCloseDateHour'
        },
        {
            type: 'int',
            name: 'pqEvalCloseDateMinute'
        },
        {
            type: 'date',
            name: 'contractBeginDate'
        },
        {
            type: 'date',
            name: 'contractEndDate'
        },
        {
            type: 'int',
            name: 'warrantyMonths'
        },
        {
            type: 'float',
            name: 'advancedPaymentRate'
        },
        {
            name: 'warrantyBasisDateCode'
        },
        {
            type: 'boolean',
            name: 'coSubContractYn'
        },
        {
            type: 'boolean',
            name: 'subContractYn'
        },
        {
            type: 'boolean',
            name: 'fieldIntroductionYn'
        },
        {
            type: 'boolean',
            name: 'fieldIntroductionCloseYn'
        },
        {
            type: 'boolean',
            name: 'fieldIntroductionCompleteYn'
        },
        {
            type: 'boolean',
            name: 'canFieldIntroductionProgress'
        },
        {
            type: 'date',
            name: 'fieldIntroductionBeginDateTime'
        },
        {
            type: 'int',
            name: 'fieldIntroductionBeginDateHour'
        },
        {
            type: 'int',
            name: 'fieldIntroductionBeginDateMinute'
        },
        {
            type: 'date',
            name: 'fieldIntroductionEndDateTime'
        },
        {
            type: 'int',
            name: 'fieldIntroductionEndDateHour'
        },
        {
            type: 'int',
            name: 'fieldIntroductionEndDateMinute'
        },
        {
            type: 'boolean',
            name: 'fieldIntroductionAttendRestric'
        },
        {
            type: 'string',
            convert: function(v, rec) {
                if(rec.get('fieldIntroductionAttendRestric')) {
                    return 'true';
                } else {
                    return 'false';
                }
            },
            name: 'fieldIntroductionAttendRestricStr'
        },
        {
            type: 'string',
            name: 'fieldIntroductionLocation'
        },
        {
            name: 'pqEvalProgressState'
        },
        {
            name: 'pqEvalResultState'
        },
        {
            type: 'string',
            name: 'pqEvalCloseYn'
        },
        {
            type: 'string',
            name: 'pqEvalCompleteYn'
        },
        {
            type: 'int',
            name: 'pqEvalSubmitCount'
        },
        {
            type: 'int',
            name: 'pqEvalTotalCount'
        },
        {
            type: 'string',
            name: 'pqEvalCount'
        },
        {
            type: 'int',
            name: 'fieldIntroductionCount'
        },
        {
            type: 'boolean',
            name: 'hasPrItem'
        },
        {
            type: 'string',
            name: 'attachFileGroupId'
        },
        {
            type: 'string',
            name: 'progressYn'
        },
        {
            type: 'string',
            name: 'closedYn'
        },
        {
            type: 'string',
            name: 'completedYn'
        },
        {
            type: 'string',
            convert: function(v, rec) {
                if(rec.get('purchaseType') === 'Product') {
                    return 'Product';
                } else {
                    return 'Service';
                }
            },
            name: 'propertyType'
        },
        {
            type: 'date',
            name: 'submitCloseDateTime'
        },
        {
            type: 'string',
            convert: function(v, rec) {
                if(rec.get('noticeYn')) {
                    return 'true';
                } else {
                    return 'false';
                }
            },
            name: 'noticeYnStr'
        },
        {
            name: 'bidAttendResultState'
        },
        {
            name: 'evaluatorEvalProgressState'
        },
        {
            type: 'date',
            name: 'evaluatorEvalCompleteDate'
        },
        {
            type: 'string',
            name: 'purchasePlanNo'
        },
        {
            type: 'string',
            name: 'representativeDepartmentName'
        },
        {
            name: 'itemType'
        },
        {
            type: 'string',
            name: 'changeReason'
        },
        {
            type: 'string',
            name: 'cancelReason'
        },
        {
            type: 'boolean',
            name: 'electronicOpenPrivateYn'
        },
        {
            name: 'noticeType'
        },
        {
            type: 'boolean',
            name: 'simulationBidYn'
        },
        {
            type: 'boolean',
            name: 'alwaysAttendYn'
        },
        {
            name: 'bidMethod'
        },
        {
            name: 'proposalTechnicalRate'
        },
        {
            name: 'proposalPriceRate'
        },
        {
            type: 'float',
            name: 'proposalPassScore'
        },
        {
            name: 'twoPhaseType'
        },
        {
            type: 'string',
            name: 'privateReason'
        },
        {
            name: 'privateReasonCode'
        },
        {
            type: 'date',
            name: 'privateSettlementCloseDateTime'
        },
        {
            type: 'int',
            name: 'privateSettlementCloseDateHour'
        },
        {
            type: 'int',
            name: 'privateSettlementCloseDateMinute'
        },
        {
            type: 'date',
            name: 'quotationSubmitCloseDateTime'
        },
        {
            type: 'int',
            name: 'quotationSubmitCloseDateHour'
        },
        {
            type: 'int',
            name: 'quotationSubmitCloseDateMinute'
        },
        {
            type: 'boolean',
            name: 'quotationSubmitRestrictYn'
        },
        {
            type: 'boolean',
            name: 'quotationEvalYn'
        },
        {
            type: 'int',
            name: 'quotationSubmitCount'
        },
        {
            name: 'deliveryDueDate'
        },
        {
            type: 'string',
            name: 'deliveryLocation'
        },
        {
            type: 'string',
            name: 'bidAttendDocument'
        },
        {
            type: 'string',
            name: 'moreInformation'
        },
        {
            type: 'string',
            name: 'etc'
        },
        {
            type: 'string',
            name: 'tenderingType'
        },
        {
            type: 'string',
            name: 'tenderingSecurityDeposit'
        },
        {
            type: 'string',
            name: 'contractAward'
        },
        {
            type: 'float',
            name: 'approximateRate'
        },
        {
            type: 'string',
            name: 'estimatedAmountNote'
        },
        {
            name: 'estimatedAmountDecimalUnit'
        },
        {
            type: 'string',
            name: 'failPrivateNote'
        },
        {
            type: 'string',
            name: 'failReason'
        },
        {
            type: 'string',
            name: 'failReasonCode'
        },
        {
            type: 'boolean',
            name: 'negoRankingOpenYn'
        },
        {
            type: 'boolean',
            name: 'emergencyNoticeYn'
        },
        {
            name: 'openResult'
        },
        {
            name: 'estimatedPriceProgressState'
        },
        {
            type: 'string',
            name: 'purchasePlanId'
        },
        {
            type: 'string',
            name: 'estimatedPriceMakerName'
        },
        {
            type: 'string',
            name: 'estimatedPriceMakerId'
        },
        {
            type: 'string',
            name: 'privateSettlementVendorId'
        },
        {
            type: 'float',
            name: 'presumedPrice'
        },
        {
            type: 'date',
            name: 'specProposalCloseDateTime'
        },
        {
            type: 'boolean',
            name: 'specProposalEvalYn'
        },
        {
            type: 'string',
            name: 'usage'
        },
        {
            type: 'date',
            name: 'purchasePlanDate'
        },
        {
            type: 'date',
            name: 'prDate'
        },
        {
            type: 'date',
            name: 'specProposalBeginDateTime'
        },
        {
            type: 'boolean',
            name: 'regionLimitAutoEvalYn'
        },
        {
            type: 'boolean',
            name: 'detailbidYn'
        },
        {
            type: 'boolean',
            name: 'swbusinessYn'
        },
        {
            type: 'boolean',
            name: 'simulationYn'
        },
        {
            type: 'int',
            name: 'constructionServicePeriodDays'
        },
        {
            type: 'int',
            name: 'decimalPointDigitNumber'
        },
        {
            type: 'boolean',
            name: 'decimalPointUseYn'
        },
        {
            type: 'float',
            name: 'subContractBudgetAmount'
        },
        {
            type: 'float',
            name: 'approximateAmount'
        },
        {
            type: 'string',
            name: 'contractSize'
        },
        {
            type: 'string',
            name: 'purchaseSpecAttachFileGroupId'
        },
        {
            type: 'string',
            name: 'specialConditionAttachFileGrpId'
        },
        {
            type: 'string',
            name: 'etcAttachFileGroupId'
        },
        {
            name: 'jointSupplyDemandMethod'
        },
        {
            type: 'string',
            name: 'limitedReasonCode'
        },
        {
            type: 'string',
            name: 'aprvDocNo'
        },
        {
            name: 'appvProgressState'
        },
        {
            type: 'float',
            name: 'subcontractBudgetAmount'
        },
        {
            type: 'string',
            name: 'targetItem'
        },
        {
            type: 'boolean',
            name: 'regionJointSupplyDemandYn'
        },
        {
            type: 'float',
            name: 'presumedAmount'
        },
        {
            name: 'regionLimitAutoEvalType'
        },
        {
            name: 'licenseAutoEvalType'
        },
        {
            name: 'qualifiedAutoEvalMethod'
        },
        {
            type: 'boolean',
            name: 'wishQuantityYn'
        },
        {
            type: 'boolean',
            name: 'smallMediumFirmYn'
        },
        {
            type: 'boolean',
            name: 'totalEvalYn'
        },
        {
            type: 'date',
            name: 'purchasePlanPlanDate'
        },
        {
            type: 'string',
            name: 'bidTimeId'
        },
        {
            name: 'constructType'
        },
        {
            type: 'boolean',
            name: 'qualifiedEvalOnlineProgressYn'
        },
        {
            type: 'string',
            name: 'autoAttachFileGroupId'
        },
        {
            type: 'string',
            name: 'purchaseGroupId'
        },
        {
            type: 'string',
            name: 'aprvCancelDocNo'
        },
        {
            name: 'appvCancelProgressState'
        },
        {
            name: 'bidDateTimeProgressState'
        },
        {
            type: 'date',
            name: 'afterBidEndDateTime'
        },
        {
            type: 'date',
            name: 'afterBidAttendCloseDateTime'
        },
        {
            name: 'noticeKind'
        },
        {
            type: 'boolean',
            name: 'insuranceBidYn'
        },
        {
            type: 'string',
            name: 'bidTypeDetail'
        },
        {
            type: 'string',
            name: 'commodityQuantity'
        },
        {
            type: 'string',
            name: 'bidRepresentativeQualification'
        },
        {
            type: 'string',
            name: 'bidEvalContractAwarding'
        },
        {
            type: 'string',
            name: 'deliverySchedule'
        },
        {
            type: 'string',
            name: 'contractInfo'
        },
        {
            type: 'string',
            name: 'bidAttendRequestDocument'
        },
        {
            type: 'float',
            name: 'totalAccumulateQuantity'
        },
        {
            type: 'float',
            name: 'priceWeightScore'
        },
        {
            type: 'boolean',
            name: 'qualifiedItemYn'
        },
        {
            type: 'boolean',
            name: 'jointSupplyDemandYn'
        },
        {
            type: 'int',
            name: 'jointSupplyDemandVendorCount'
        },
        {
            name: 'manySupplyType'
        },
        {
            type: 'date',
            name: 'bidAttendRequestBeginDateTime'
        },
        {
            type: 'int',
            name: 'bidAttendRequestBeginDateHour'
        },
        {
            type: 'int',
            name: 'bidAttendRequestBeginDateMinute'
        },
        {
            name: 'collectivelyBidMethod'
        },
        {
            type: 'boolean',
            name: 'reRfxYn'
        },
        {
            name: 'contractRequestDepartmentName'
        },
        {
            type: 'string',
            name: 'placeCode'
        },
        {
            type: 'string',
            name: 'placeDepth'
        },
        {
            type: 'string',
            name: 'placeName'
        },
        {
            type: 'string',
            name: 'constructManagerName'
        },
        {
            type: 'float',
            name: 'managerElecConstructSelectRate'
        },
        {
            type: 'string',
            name: 'constructManager'
        },
        {
            type: 'float',
            name: 'electricConstructSelectRate'
        },
        {
            name: 'join_Manager'
        },
        {
            name: 'exec_Manager'
        },
        {
            type: 'boolean',
            name: 'bidCancelYn'
        },
        {
            type: 'string',
            name: 'contractPeriod'
        },
        {
            type: 'string',
            name: 'assTypeCode'
        },
        {
            type: 'string',
            name: 'restrictReasonNote'
        },
        {
            name: 'estimatedPriceAmount'
        },
        {
            type: 'string',
            name: 'estimatedNote'
        },
        {
            name: 'changeTypeName'
        },
        {
            type: 'float',
            name: 'qualifiedScore'
        },
        {
            type: 'float',
            name: 'qualifiedEvalExpression1'
        },
        {
            type: 'float',
            name: 'qualifiedEvalExpression2'
        },
        {
            type: 'float',
            name: 'qualifiedLowestPercent'
        },
        {
            type: 'float',
            name: 'qualifiedLowestScore'
        },
        {
            name: 'qualifiedAutoEvalType'
        },
        {
            type: 'float',
            name: 'estimatedPriceBasicAmount'
        },
        {
            type: 'string',
            name: 'refNo'
        },
        {
            type: 'float',
            name: 'addReqEmpNo'
        },
        {
            type: 'string',
            name: 'addReqEmpInfo'
        },
        {
            name: 'hsCode'
        },
        {
            name: 'transType'
        },
        {
            type: 'date',
            name: 'forienDeliveryDueDate'
        },
        {
            type: 'string',
            name: 'bidTypeCombine'
        },
        {
            name: 'uaeBidYn'
        },
        {
            name: 'privateSelectMethod'
        },
        {
            type: 'date',
            name: 'quotationSubmitStartDateTime'
        },
        {
            type: 'boolean',
            name: 'detailAttachFileYn'
        },
        {
            type: 'string',
            name: 'beforeBidNoticeNo'
        },
        {
            type: 'string',
            name: 'beforeRfxId'
        },
        {
            name: 'foreignBidType'
        },
        {
            type: 'string',
            name: 'bidSecurityDeposit'
        },
        {
            type: 'string',
            name: 'deliveryTerms'
        },
        {
            type: 'string',
            name: 'currencyNote'
        }
    ]
});

/*
 * File: app/model/foreign/BidDateTimeChange.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.foreign.BidDateTimeChange', {
    extend:  Ext.data.Model ,

               
                                
                                 
                              
                                
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'revision'
        },
        {
            type: 'int',
            name: 'orderNo'
        },
        {
            type: 'string',
            name: 'changeReason'
        },
        {
            type: 'date',
            name: 'requestDate'
        },
        {
            name: 'progressState'
        },
        {
            type: 'string',
            name: 'bidId'
        },
        {
            type: 'string',
            name: 'bidNo'
        },
        {
            type: 'string',
            name: 'bidName'
        },
        {
            type: 'date',
            name: 'bidNoticeDate'
        },
        {
            type: 'boolean',
            name: 'bidAlwaysAttendYn'
        },
        {
            name: 'bidBidType'
        },
        {
            type: 'date',
            name: 'beforeBidAttendCloseDateTime'
        },
        {
            type: 'date',
            name: 'beforeSpecProposaBeginDateTime'
        },
        {
            type: 'date',
            name: 'beforeSpecProposaCloseDateTime'
        },
        {
            type: 'date',
            name: 'beforeBidBeginDateTime'
        },
        {
            type: 'date',
            name: 'beforeBidEndDateTime'
        },
        {
            type: 'date',
            name: 'beforeOpenBidDateTime'
        },
        {
            type: 'date',
            name: 'afterBidAttendCloseDateTime'
        },
        {
            type: 'date',
            name: 'afterSpecProposalBeginDateTime'
        },
        {
            type: 'date',
            name: 'afterSpecProposalCloseDateTime'
        },
        {
            type: 'date',
            name: 'afterBidBeginDateTime'
        },
        {
            type: 'date',
            name: 'afterBidEndDateTime'
        },
        {
            type: 'date',
            name: 'afterOpenBidDateTime'
        },
        {
            type: 'date',
            name: 'errorBeginDateTime'
        },
        {
            type: 'date',
            name: 'errorEndDateTime'
        },
        {
            type: 'string',
            name: 'changeType'
        },
        {
            type: 'boolean',
            name: 'autoChangeYn'
        },
        {
            type: 'int',
            name: 'afterBidEndDateHour'
        },
        {
            type: 'int',
            name: 'afterBidEndDateMinute'
        },
        {
            type: 'int',
            name: 'afterSpecProposalCloseDateHour'
        },
        {
            type: 'int',
            name: 'afterSpecProposalCloseDateMinute'
        },
        {
            type: 'int',
            name: 'afterOpenBidDateHour'
        },
        {
            type: 'int',
            name: 'afterOpenBidDateMinute'
        },
        {
            type: 'string',
            name: 'operatingUnitId'
        },
        {
            type: 'string',
            name: 'changeTypeName'
        },
        {
            type: 'date',
            name: 'beforeDateTime'
        },
        {
            type: 'date',
            name: 'afterDateTime'
        }
    ]
});

/*
 * File: app/model/foreign/BidItem.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.foreign.BidItem', {
    extend:  Ext.data.Model ,

               
                                
                                
                              
                                 
                                
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'rfxId'
        },
        {
            name: 'purchaseType'
        },
        {
            type: 'string',
            name: 'itemLineNo'
        },
        {
            type: 'float',
            name: 'quantity'
        },
        {
            name: 'currencyCode'
        },
        {
            type: 'string',
            name: 'itemId'
        },
        {
            type: 'string',
            name: 'itemCode'
        },
        {
            type: 'string',
            name: 'itemName'
        },
        {
            type: 'string',
            name: 'itemSpec'
        },
        {
            name: 'itemUnit'
        },
        {
            type: 'string',
            name: 'prItemId'
        },
        {
            type: 'string',
            name: 'prNo'
        },
        {
            type: 'string',
            name: 'prItemLineNo'
        },
        {
            type: 'string',
            name: 'deliveryLocation'
        },
        {
            type: 'date',
            name: 'deliveryDueDate'
        },
        {
            type: 'string',
            name: 'executionLocation'
        },
        {
            type: 'date',
            name: 'executionBeginDate'
        },
        {
            type: 'date',
            name: 'executionEndDate'
        },
        {
            type: 'date',
            name: 'contractBeginDate'
        },
        {
            type: 'date',
            name: 'contractEndDate'
        },
        {
            type: 'string',
            name: 'purchaseGroupId'
        },
        {
            type: 'string',
            name: 'purchaseGroupName'
        },
        {
            type: 'string',
            name: 'attachFileGroupId'
        },
        {
            type: 'int',
            name: 'countAttachFileItems'
        },
        {
            type: 'float',
            name: 'estimatedPrice'
        },
        {
            type: 'string',
            name: 'requesterName'
        },
        {
            type: 'string',
            convert: function(v, rec) {
                if(rec.get('purchaseType') === 'Product') {
                    return 'Product';
                } else {
                    return 'Service';
                }
            },
            name: 'propertyType'
        },
        {
            type: 'boolean',
            name: 'basisItemYn'
        },
        {
            type: 'float',
            name: 'underLimitObtainOrderRate'
        },
        {
            type: 'float',
            name: 'upperLimitObtainOrderRate'
        },
        {
            type: 'float',
            name: 'totalQuantity'
        },
        {
            type: 'string',
            name: 'itemGroupCode'
        },
        {
            type: 'string',
            name: 'tocType'
        },
        {
            type: 'string',
            name: 'purchasePlanItemId'
        },
        {
            type: 'float',
            name: 'remainQuantity'
        },
        {
            type: 'string',
            name: 'hsCode'
        },
        {
            type: 'string',
            name: 'concessionType'
        },
        {
            name: 'preHsCode'
        },
        {
            name: 'tailHsCode'
        }
    ]
});

/*
 * File: app/model/foreign/BidVendorAttendRequest.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.foreign.BidVendorAttendRequest', {
    extend:  Ext.data.Model ,

               
                                
                                 
                              
                                
                                
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'representativeName'
        },
        {
            type: 'string',
            name: 'representativeMobileNo'
        },
        {
            type: 'string',
            name: 'representativeEmail'
        },
        {
            name: 'progressState'
        },
        {
            name: 'resultState'
        },
        {
            type: 'string',
            name: 'operatingUnitId'
        },
        {
            type: 'string',
            name: 'operatingUnitName'
        },
        {
            type: 'string',
            name: 'rfxId'
        },
        {
            type: 'string',
            name: 'rfxNo'
        },
        {
            type: 'int',
            name: 'rfxRevision'
        },
        {
            type: 'string',
            name: 'rfxName'
        },
        {
            name: 'rfxProgressState'
        },
        {
            name: 'purchaseType'
        },
        {
            name: 'competitionType'
        },
        {
            type: 'date',
            name: 'rfxRequestDate'
        },
        {
            type: 'date',
            name: 'closedDateTime'
        },
        {
            type: 'date',
            name: 'closeDateTime'
        },
        {
            type: 'string',
            name: 'attendId'
        },
        {
            type: 'string',
            name: 'attendNo'
        },
        {
            type: 'float',
            name: 'attendAmount'
        },
        {
            type: 'date',
            name: 'submitDateTime'
        },
        {
            name: 'attendProgressState'
        },
        {
            name: 'attendResultState'
        },
        {
            type: 'string',
            name: 'vendorId'
        },
        {
            type: 'string',
            name: 'vendorCode'
        },
        {
            type: 'string',
            name: 'vendorName'
        },
        {
            type: 'string',
            name: 'vendorRegistrationNo'
        },
        {
            type: 'string',
            name: 'vendorPresidentName'
        },
        {
            name: 'rfxType'
        },
        {
            type: 'date',
            name: 'beginDateTime'
        },
        {
            type: 'date',
            name: 'endDateTime'
        },
        {
            type: 'string',
            name: 'reverseAuctionPeriod'
        },
        {
            type: 'string',
            name: 'bidAttendRequestId'
        },
        {
            type: 'string',
            name: 'pqEvalId'
        },
        {
            type: 'string',
            name: 'specEvalId'
        },
        {
            type: 'string',
            name: 'fieldIntroductionId'
        },
        {
            type: 'boolean',
            name: 'vendorG2BRegistrationVendorYn'
        },
        {
            type: 'boolean',
            name: 'vendorCurrentProgressYn'
        },
        {
            type: 'string',
            name: 'representativeId'
        },
        {
            type: 'int',
            name: 'settlementRanking'
        },
        {
            name: 'privateQuotationProgressState'
        },
        {
            type: 'boolean',
            name: 'privateQuotationAttendSubmitYn'
        },
        {
            type: 'string',
            name: 'privateQuotationAttendId'
        },
        {
            type: 'boolean',
            name: 'privateSettlementYn'
        },
        {
            name: 'vendorEvalGrade'
        },
        {
            name: 'representativeUserName'
        },
        {
            type: 'string',
            name: 'testCondition'
        },
        {
            type: 'string',
            name: 'uaePackage'
        },
        {
            name: 'vendorInOutType'
        },
        {
            type: 'string',
            name: 'originInfo'
        },
        {
            type: 'string',
            name: 'loadingPort'
        },
        {
            type: 'string',
            name: 'arrivalPort'
        }
    ]
});

/*
 * File: app/model/foreign/Code.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.foreign.Code', {
    extend:  Ext.data.Model ,

               
                               
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'name'
        },
        {
            type: 'string',
            name: 'typeName'
        },
        {
            name: 'optionalYn'
        },
        {
            type: 'string',
            name: 'code'
        },
        {
            type: 'string',
            name: 'attachDocumentCodeId'
        },
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'operatingUnitId'
        },
        {
            type: 'string',
            name: 'operatingUnitName'
        }
    ]
});

/*
 * File: app/model/foreign/LicenseCodes.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.foreign.LicenseCodes', {
    extend:  Ext.data.Model ,

               
                                
      

    identifier: 'uuid',

    fields: [
        {
            name: 'bidId'
        },
        {
            name: 'licenseQualificationCode'
        },
        {
            name: 'licenseQualificationCodeName'
        },
        {
            name: 'companyId'
        },
        {
            name: 'creatorId'
        },
        {
            name: 'creatorName'
        },
        {
            name: 'updaterId'
        },
        {
            name: 'updaterName'
        },
        {
            type: 'boolean',
            name: 'delYn'
        },
        {
            name: 'codeId'
        }
    ]
});

/*
 * File: app/model/foreign/MandatoryDocument.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.foreign.MandatoryDocument', {
    extend:  Ext.data.Model ,

               
                               
      

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'operatingUnitId'
        },
        {
            type: 'string',
            name: 'operatingUnitName'
        },
        {
            type: 'string',
            name: 'attachDocumentCodeId'
        },
        {
            type: 'string',
            name: 'code'
        },
        {
            type: 'string',
            name: 'name'
        },
        {
            type: 'string',
            name: 'typeName'
        },
        {
            type: 'string',
            name: 'optionalYn'
        },
        {
            type: 'string',
            name: 'groupCode'
        },
        {
            type: 'string',
            name: 'detail'
        }
    ]
});

/*
 * File: app/model/foreign/ProgressState.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.foreign.ProgressState', {
    extend:  Ext.data.Model ,

               
                                
                                
      

    fields: [
        {
            type: 'string',
            name: 'title'
        },
        {
            type: 'string',
            name: 'status'
        },
        {
            type: 'int',
            name: 'parallelYn'
        },
        {
            type: 'int',
            name: 'parallelNo'
        },
        {
            type: 'string',
            name: 'progressState'
        },
        {
            type: 'string',
            name: 'id'
        },
        {
            name: 'parallel'
        }
    ]
});

/*
 * File: app/model/foreign/PurchasePlan.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.foreign.PurchasePlan', {
    extend:  Ext.data.Model ,

               
                                
                              
                                 
                               
      

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'no'
        },
        {
            type: 'string',
            name: 'revision'
        },
        {
            name: 'itemTypeCode'
        },
        {
            type: 'string',
            name: 'deliveryLocation'
        },
        {
            type: 'date',
            name: 'deliveryDate'
        },
        {
            type: 'string',
            name: 'purpose'
        },
        {
            type: 'date',
            name: 'planDate'
        },
        {
            name: 'competitionType'
        },
        {
            name: 'purchaseType'
        },
        {
            name: 'vendorAwardType'
        },
        {
            type: 'boolean',
            name: 'wishQuantityYn'
        },
        {
            type: 'string',
            name: 'relatedRuleCode'
        },
        {
            type: 'string',
            name: 'preferedPurchaseItemCode'
        },
        {
            name: 'inOutType'
        },
        {
            name: 'bidType'
        },
        {
            name: 'twoPhaseType'
        },
        {
            name: 'bidMethod'
        },
        {
            type: 'string',
            name: 'name'
        },
        {
            type: 'float',
            name: 'budgetAmount'
        },
        {
            type: 'string',
            name: 'note'
        },
        {
            name: 'bidProgressState'
        },
        {
            type: 'string',
            name: 'lineNo'
        },
        {
            type: 'float',
            name: 'quantity'
        },
        {
            type: 'string',
            name: 'itemName'
        },
        {
            type: 'string',
            name: 'currencyCode'
        },
        {
            type: 'string',
            name: 'prNo'
        },
        {
            type: 'string',
            name: 'prLineNo'
        },
        {
            type: 'string',
            name: 'prItemUnit'
        },
        {
            type: 'float',
            name: 'prQuantity'
        },
        {
            type: 'float',
            name: 'prUnitPrice'
        },
        {
            type: 'float',
            name: 'prAmount'
        },
        {
            type: 'date',
            name: 'prDate'
        },
        {
            type: 'string',
            name: 'requesterEmail'
        },
        {
            type: 'string',
            name: 'requesterFaxNo'
        },
        {
            type: 'string',
            name: 'requesterPhoneNo'
        },
        {
            type: 'string',
            name: 'requesterMobileNo'
        },
        {
            type: 'string',
            name: 'constructionNo'
        },
        {
            type: 'string',
            name: 'budgetItemCode'
        },
        {
            type: 'string',
            name: 'itemId'
        },
        {
            type: 'string',
            name: 'itemCode'
        },
        {
            type: 'string',
            name: 'itemSpec'
        },
        {
            type: 'string',
            name: 'itemUnitCode'
        },
        {
            name: 'operatingUnitId'
        },
        {
            type: 'string',
            name: 'operatingUnitName'
        },
        {
            type: 'string',
            name: 'requesterName'
        },
        {
            type: 'string',
            name: 'requesterDepartmentName'
        },
        {
            type: 'string',
            name: 'planId'
        },
        {
            type: 'string',
            name: 'representativeName'
        },
        {
            type: 'string',
            name: 'representativeDepartmentName'
        }
    ]
});

/*
 * File: app/model/foreign/QualifiedCodes.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.foreign.QualifiedCodes', {
    extend:  Ext.data.Model ,

               
                                
      

    identifier: 'uuid',

    fields: [
        {
            name: 'bidId'
        },
        {
            name: 'qualifiedQualificationCode'
        },
        {
            name: 'qualifiedQualificationCodeName'
        },
        {
            name: 'etc'
        },
        {
            name: 'companyId'
        },
        {
            name: 'creatorId'
        },
        {
            name: 'creatorName'
        },
        {
            name: 'updaterId'
        },
        {
            name: 'updaterName'
        },
        {
            type: 'boolean',
            name: 'delYn'
        },
        {
            name: 'codeId'
        }
    ]
});

/*
 * File: app/model/foreign/RegionCodes.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.foreign.RegionCodes', {
    extend:  Ext.data.Model ,

               
                                
      

    identifier: 'uuid',

    fields: [
        {
            name: 'bidId'
        },
        {
            name: 'areaCode'
        },
        {
            name: 'areaCodeName'
        },
        {
            name: 'subAreaCode'
        },
        {
            name: 'subAreaCodeName'
        },
        {
            name: 'companyId'
        },
        {
            name: 'creatorId'
        },
        {
            name: 'creatorName'
        },
        {
            name: 'updaterId'
        },
        {
            name: 'updaterName'
        },
        {
            type: 'boolean',
            name: 'delYn'
        },
        {
            name: 'codeId'
        }
    ]
});

/*
 * File: app/model/foreign/RepresentativeList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.foreign.RepresentativeList', {
    extend:  Ext.data.Model ,

               
                              
      

    fields: [
        {
            name: 'representativeName'
        },
        {
            name: 'representativeId'
        }
    ]
});

/*
 * File: app/model/openInfoData/BidResultList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.openInfoData.BidResultList', {
    extend:  Ext.data.Model ,

               
                                
                             
      

    fields: [
        {
            name: 'revision'
        },
        {
            name: 'companyId'
        },
        {
            name: 'bidRevision'
        },
        {
            type: 'string',
            name: 'name'
        },
        {
            type: 'string',
            name: 'no'
        },
        {
            type: 'string',
            name: 'progressState'
        },
        {
            type: 'string',
            name: 'resultState'
        },
        {
            name: 'openResult'
        },
        {
            name: 'placeName'
        },
        {
            name: 'noticeDate'
        },
        {
            type: 'string',
            name: 'competitionType'
        },
        {
            type: 'string',
            name: 'bidType'
        },
        {
            type: 'string',
            name: 'noticeType'
        },
        {
            type: 'date',
            name: 'bidAttendRequestCloseDateTime'
        },
        {
            type: 'date',
            name: 'beginDateTime'
        },
        {
            type: 'date',
            name: 'endDateTime'
        },
        {
            name: 'bidResultStateInOpenInfoData'
        },
        {
            type: 'string',
            name: 'purchaseType'
        },
        {
            type: 'string',
            name: 'id'
        },
        {
            name: 'inOutType'
        },
        {
            name: 'foreignBidType'
        }
    ]
});

/*
 * File: app/model/openInfoData/ContractResultList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.openInfoData.ContractResultList', {
    extend:  Ext.data.Model ,

               
                               
      

    fields: [
        {
            name: 'no'
        },
        {
            name: 'name'
        },
        {
            name: 'placeName'
        },
        {
            name: 'bidType'
        },
        {
            name: 'revision'
        },
        {
            name: 'bidRevision'
        },
        {
            type: 'string',
            name: 'id'
        },
        {
            name: 'companyId'
        },
        {
            name: 'competitionType'
        },
        {
            name: 'noticeType'
        },
        {
            name: 'bidAttendRequestCloseDateTime'
        },
        {
            name: 'beginDateTime'
        },
        {
            name: 'endDateTime'
        },
        {
            name: 'contractAmount'
        },
        {
            name: 'noticeDate'
        },
        {
            name: 'vendorName'
        },
        {
            name: 'purchaseType'
        },
        {
            name: 'inOutType'
        },
        {
            name: 'foreignBidType'
        }
    ]
});

/*
 * File: app/model/openInfoData/ContractResultStatsList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.openInfoData.ContractResultStatsList', {
    extend:  Ext.data.Model ,

               
                              
      

    fields: [
        {
            name: 'id'
        },
        {
            name: 'competitionType'
        },
        {
            name: 'nm'
        },
        {
            name: 'generalCnt'
        },
        {
            name: 'generalAmount'
        },
        {
            name: 'priceCnt'
        },
        {
            name: 'priceAmount'
        },
        {
            name: 'totalCnt'
        },
        {
            name: 'totalAmount'
        },
        {
            name: 'orderNo'
        },
        {
            name: 'competitionGubun'
        }
    ]
});

/*
 * File: app/model/openInfoData/OpenInfoDataList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.openInfoData.OpenInfoDataList', {
    extend:  Ext.data.Model ,

               
                                
                             
      

    identifier: 'uuid',

    fields: [
        {
            name: 'ranking'
        },
        {
            type: 'string',
            name: 'vendorName'
        },
        {
            name: 'vendorRegistrationNo'
        },
        {
            name: 'representativeName'
        },
        {
            name: 'proposalScore'
        },
        {
            name: 'priceScore'
        },
        {
            name: 'totalScore'
        },
        {
            name: 'attendAmount'
        },
        {
            name: 'quantity'
        },
        {
            name: 'attendRate'
        },
        {
            type: 'date',
            name: 'submitDateTime'
        },
        {
            type: 'string',
            name: 'lotteryNum'
        },
        {
            type: 'string',
            name: 'note'
        },
        {
            name: 'id'
        },
        {
            type: 'string',
            name: 'quantityOfInfoData'
        },
        {
            type: 'string',
            name: 'vendorId'
        },
        {
            name: 'bidId'
        },
        {
            name: 'bidNo'
        }
    ]
});

/*
 * File: app/model/openInfoData/SuccessVendorInfoList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.openInfoData.SuccessVendorInfoList', {
    extend:  Ext.data.Model ,

               
                              
                               
      

    fields: [
        {
            name: 'no'
        },
        {
            name: 'name'
        },
        {
            name: 'vendorName'
        },
        {
            name: 'vendorPresidentName'
        },
        {
            name: 'vendorAddress'
        },
        {
            type: 'date',
            name: 'selectedDateTime'
        },
        {
            type: 'float',
            name: 'amount'
        },
        {
            name: 'deliveryDueDate'
        },
        {
            name: 'bidType'
        },
        {
            name: 'representativeName'
        },
        {
            name: 'representativePhoneNo'
        },
        {
            name: 'id'
        }
    ]
});

/*
 * File: app/model/rfx/ReverseAuction.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.rfx.ReverseAuction', {
    extend:  Ext.data.Model ,

               
                                
                                 
                              
                                
                                
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'no'
        },
        {
            type: 'int',
            defaultValue: 1,
            name: 'revision'
        },
        {
            defaultValue: 'Product',
            name: 'purchaseType'
        },
        {
            type: 'date',
            name: 'requestDate'
        },
        {
            type: 'string',
            name: 'name'
        },
        {
            type: 'date',
            name: 'closedDateTime'
        },
        {
            type: 'string',
            name: 'representativeEmail'
        },
        {
            type: 'string',
            name: 'representativeContact'
        },
        {
            name: 'contractType'
        },
        {
            name: 'inOutType'
        },
        {
            name: 'currencyCode'
        },
        {
            name: 'taxType'
        },
        {
            name: 'rfxType'
        },
        {
            name: 'resultState'
        },
        {
            name: 'progressState'
        },
        {
            type: 'date',
            name: 'currencyBaseDate'
        },
        {
            name: 'competitionType'
        },
        {
            name: 'vendorAwardType'
        },
        {
            type: 'float',
            name: 'estimatedAmount'
        },
        {
            type: 'float',
            name: 'contractAmount'
        },
        {
            type: 'boolean',
            defaultValue: true,
            name: 'currentYn'
        },
        {
            type: 'string',
            name: 'operatingUnitId'
        },
        {
            type: 'string',
            name: 'operatingUnitName'
        },
        {
            type: 'string',
            name: 'representativeId'
        },
        {
            type: 'string',
            name: 'representativeName'
        },
        {
            type: 'string',
            name: 'representativeDepartmentName'
        },
        {
            type: 'date',
            name: 'createDateTime'
        },
        {
            type: 'string',
            name: 'initQuotationId'
        },
        {
            type: 'string',
            name: 'initQuotationNo'
        },
        {
            type: 'int',
            name: 'initQuotationRevision'
        },
        {
            type: 'boolean',
            name: 'hasPrItem'
        },
        {
            type: 'date',
            name: 'beginDateTime'
        },
        {
            type: 'date',
            name: 'endDateTime'
        },
        {
            type: 'string',
            name: 'reverseAuctionPeriod'
        },
        {
            type: 'float',
            name: 'initPrice'
        },
        {
            type: 'int',
            name: 'minimumPriceUnit'
        },
        {
            type: 'boolean',
            name: 'rankingOpenYn'
        },
        {
            type: 'boolean',
            name: 'autoExtensionYn'
        },
        {
            type: 'int',
            name: 'autoExtensionInterval'
        },
        {
            type: 'int',
            name: 'autoExtensionCondition'
        },
        {
            type: 'int',
            name: 'autoExtensionCount'
        },
        {
            type: 'int',
            name: 'currentAutoExtensionCount'
        },
        {
            type: 'boolean',
            name: 'instantlySuccessYn'
        },
        {
            type: 'float',
            name: 'instantlyWinningPrice'
        },
        {
            type: 'float',
            name: 'currentLowestAmount'
        },
        {
            name: 'attachFileGroupId'
        },
        {
            type: 'int',
            name: 'noticeRevision'
        },
        {
            type: 'date',
            name: 'noticeDate'
        },
        {
            name: 'noticeType'
        },
        {
            type: 'string',
            name: 'restrictAreaCode'
        },
        {
            type: 'boolean',
            name: 'contractIssueYn'
        },
        {
            type: 'boolean',
            name: 'simulationBidYn'
        },
        {
            type: 'string',
            name: 'note'
        },
        {
            type: 'date',
            name: 'deliveryDueDate'
        },
        {
            type: 'string',
            name: 'deliveryLocation'
        },
        {
            type: 'string',
            name: 'restrictArea'
        },
        {
            type: 'date',
            name: 'noticeBeginDateTime'
        },
        {
            name: 'addItionalTaxYn'
        },
        {
            type: 'string',
            name: 'cancelReason'
        },
        {
            type: 'date',
            name: 'cancelDateTime'
        },
        {
            name: 'vendorAttendProgressState'
        },
        {
            type: 'string',
            name: 'vendorAttendId'
        },
        {
            type: 'string',
            name: 'companyId'
        },
        {
            name: 'itemInfoInputType'
        },
        {
            type: 'string',
            name: 'itemAttachFileGroupId'
        },
        {
            name: 'attendProgressState'
        },
        {
            name: 'attendResultState'
        },
        {
            name: 'warrantyPayMethod'
        }
    ]
});

/*
 * File: app/model/rfx/ReverseAuctionAttend.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.rfx.ReverseAuctionAttend', {
    extend:  Ext.data.Model ,

               
                                
                              
                                
                                 
                                
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'no'
        },
        {
            type: 'string',
            name: 'representativeName'
        },
        {
            type: 'string',
            name: 'representativeEmail'
        },
        {
            type: 'string',
            name: 'representativeMobileNo'
        },
        {
            type: 'string',
            name: 'representativePhoneNo'
        },
        {
            type: 'date',
            name: 'submitDateTime'
        },
        {
            type: 'string',
            name: 'vendorId'
        },
        {
            type: 'string',
            name: 'vendorCode'
        },
        {
            type: 'string',
            name: 'vendorName'
        },
        {
            type: 'string',
            name: 'vendorRegistrationNo'
        },
        {
            type: 'string',
            name: 'vendorCorporationNo'
        },
        {
            type: 'string',
            name: 'vendorAddress'
        },
        {
            type: 'string',
            name: 'note'
        },
        {
            type: 'float',
            name: 'amount'
        },
        {
            type: 'int',
            name: 'ranking'
        },
        {
            type: 'date',
            name: 'validDate'
        },
        {
            type: 'float',
            name: 'attendRate'
        },
        {
            name: 'openResult'
        },
        {
            name: 'resultState'
        },
        {
            name: 'progressState'
        },
        {
            type: 'string',
            name: 'rfxId'
        },
        {
            name: 'rfxProgressState'
        },
        {
            type: 'float',
            name: 'estimatedAmount'
        },
        {
            type: 'string',
            name: 'currentRealtimeAttendId'
        },
        {
            type: 'float',
            name: 'currentAttendAmount'
        },
        {
            type: 'boolean',
            name: 'rankingOpenYn'
        },
        {
            type: 'int',
            name: 'currentRanking'
        },
        {
            type: 'string',
            name: 'representativeUserName'
        },
        {
            type: 'date',
            name: 'selectedDateTime'
        },
        {
            type: 'float',
            name: 'confirmAmount'
        }
    ]
});

/*
 * File: app/model/rfx/ReverseAuctionLowestAttend.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.rfx.ReverseAuctionLowestAttend', {
    extend:  Ext.data.Model ,

               
                                
                                
                              
                                
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'float',
            name: 'amount'
        },
        {
            type: 'date',
            name: 'dateTime'
        },
        {
            type: 'string',
            name: 'reverseAuctionId'
        },
        {
            type: 'string',
            name: 'attendId'
        },
        {
            type: 'string',
            name: 'vendorCode'
        },
        {
            type: 'string',
            name: 'vendorName'
        },
        {
            type: 'string',
            name: 'realtimeAttendId'
        },
        {
            type: 'float',
            name: 'realtimeAttendAmount'
        },
        {
            type: 'date',
            name: 'realtimeAttendDateTime'
        },
        {
            type: 'int',
            name: 'attendCount'
        },
        {
            convert: function(v, rec) {
                var amount = rec.get('amount');

                if (rec.get('amount')) {
                    return Ext.util.Format.number(rec.get('amount'), '0,000.##');
                }else {
                    return false;
                }
            },
            name: 'amountConvert'
        },
        {
            type: 'string',
            name: 'submitNo'
        }
    ]
});

/*
 * File: app/model/rfx/ReverseAuctionRealtimeAttend.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.rfx.ReverseAuctionRealtimeAttend', {
    extend:  Ext.data.Model ,

               
                                
                                
                              
                                
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'float',
            name: 'amount'
        },
        {
            type: 'date',
            name: 'dateTime'
        },
        {
            type: 'string',
            name: 'reverseAuctionAttendId'
        },
        {
            type: 'int',
            name: 'submitNo'
        },
        {
            type: 'string',
            name: 'no'
        }
    ]
});

/*
 * File: app/model/rfx/ReverseAuctionVendorAttendRequest.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.rfx.ReverseAuctionVendorAttendRequest', {
    extend:  Ext.data.Model ,

               
                                
                                 
                              
                               
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'representativeName'
        },
        {
            type: 'string',
            name: 'representativeMobileNo'
        },
        {
            type: 'string',
            name: 'representativeEmail'
        },
        {
            name: 'progressState'
        },
        {
            name: 'resultState'
        },
        {
            type: 'string',
            name: 'operatingUnitId'
        },
        {
            type: 'string',
            name: 'operatingUnitName'
        },
        {
            type: 'string',
            name: 'rfxId'
        },
        {
            type: 'string',
            name: 'rfxNo'
        },
        {
            type: 'int',
            name: 'rfxRevision'
        },
        {
            type: 'string',
            name: 'rfxName'
        },
        {
            name: 'rfxProgressState'
        },
        {
            name: 'rfxResultState'
        },
        {
            name: 'purchaseType'
        },
        {
            name: 'competitionType'
        },
        {
            type: 'date',
            name: 'rfxRequestDate'
        },
        {
            type: 'date',
            name: 'closedDateTime'
        },
        {
            type: 'date',
            name: 'closeDateTime'
        },
        {
            type: 'string',
            name: 'attendId'
        },
        {
            type: 'string',
            name: 'attendNo'
        },
        {
            type: 'float',
            name: 'attendAmount'
        },
        {
            type: 'date',
            name: 'submitDateTime'
        },
        {
            name: 'attendProgressState'
        },
        {
            name: 'attendResultState'
        },
        {
            type: 'string',
            name: 'vendorId'
        },
        {
            type: 'string',
            name: 'vendorCode'
        },
        {
            type: 'string',
            name: 'vendorName'
        },
        {
            type: 'string',
            name: 'vendorRegistrationNo'
        },
        {
            type: 'string',
            name: 'vendorPresidentName'
        },
        {
            name: 'rfxType'
        },
        {
            type: 'date',
            name: 'beginDateTime'
        },
        {
            type: 'date',
            name: 'endDateTime'
        }
    ]
});

/*
 * File: app/model/rfx/RfxAttend.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.rfx.RfxAttend', {
    extend:  Ext.data.Model ,

               
                                
                              
                                
                                 
                                
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'no'
        },
        {
            type: 'string',
            name: 'representativeName'
        },
        {
            type: 'string',
            name: 'representativeEmail'
        },
        {
            type: 'string',
            name: 'representativeMobileNo'
        },
        {
            type: 'string',
            name: 'representativePhoneNo'
        },
        {
            type: 'date',
            name: 'submitDateTime'
        },
        {
            type: 'string',
            name: 'submitDateYear'
        },
        {
            type: 'string',
            name: 'submitDateMonth'
        },
        {
            type: 'string',
            name: 'submitDateDay'
        },
        {
            type: 'string',
            name: 'vendorId'
        },
        {
            type: 'string',
            name: 'vendorCode'
        },
        {
            type: 'string',
            name: 'vendorName'
        },
        {
            type: 'string',
            name: 'vendorRegistrationNo'
        },
        {
            type: 'string',
            name: 'vendorCorporationNo'
        },
        {
            type: 'string',
            name: 'vendorAddress'
        },
        {
            type: 'string',
            name: 'vendorPresidentName'
        },
        {
            type: 'string',
            name: 'note'
        },
        {
            type: 'float',
            name: 'amount'
        },
        {
            type: 'int',
            name: 'ranking'
        },
        {
            type: 'string',
            name: 'selectedEstimatedPriceNumbers'
        },
        {
            type: 'date',
            name: 'validDate'
        },
        {
            type: 'int',
            name: 'attendRate'
        },
        {
            name: 'openResult'
        },
        {
            name: 'resultState'
        },
        {
            name: 'progressState'
        },
        {
            type: 'string',
            name: 'rfxId'
        },
        {
            name: 'rfxProgressState'
        },
        {
            type: 'int',
            name: 'estimatedAmount'
        },
        {
            type: 'int',
            name: 'evalScore'
        },
        {
            type: 'int',
            name: 'priceScore'
        },
        {
            type: 'int',
            name: 'totalScore'
        },
        {
            type: 'int',
            name: 'finalScore'
        },
        {
            type: 'string',
            name: 'bidVendorAttendRequestId'
        },
        {
            name: 'bidVendorProgressState'
        },
        {
            type: 'date',
            name: 'bidEndDate'
        },
        {
            type: 'int',
            name: 'bidEndDateTime'
        },
        {
            type: 'int',
            name: 'bidEndDateMinute'
        },
        {
            type: 'int',
            name: 'winningPriceLimitRate'
        },
        {
            type: 'string',
            name: 'attachFileGroupId'
        },
        {
            type: 'boolean',
            name: 'selected'
        },
        {
            type: 'int',
            name: 'countAttachFileItems'
        }
    ]
});

/*
 * File: app/model/rfx/RfxItem.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.rfx.RfxItem', {
    extend:  Ext.data.Model ,

               
                                
                                 
                              
                               
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'rfxId'
        },
        {
            name: 'purchaseType'
        },
        {
            type: 'string',
            name: 'itemLineNo'
        },
        {
            type: 'int',
            name: 'quantity'
        },
        {
            name: 'currencyCode'
        },
        {
            type: 'string',
            name: 'itemId'
        },
        {
            type: 'string',
            name: 'itemCode'
        },
        {
            type: 'string',
            name: 'itemName'
        },
        {
            type: 'string',
            name: 'itemSpec'
        },
        {
            name: 'itemUnit'
        },
        {
            type: 'string',
            name: 'prItemId'
        },
        {
            type: 'string',
            name: 'prNo'
        },
        {
            type: 'string',
            name: 'prItemLineNo'
        },
        {
            type: 'string',
            name: 'deliveryLocation'
        },
        {
            type: 'date',
            name: 'deliveryDueDate'
        },
        {
            type: 'string',
            name: 'executionLocation'
        },
        {
            type: 'date',
            name: 'executionBeginDate'
        },
        {
            type: 'date',
            name: 'executionEndDate'
        },
        {
            type: 'date',
            name: 'contractBeginDate'
        },
        {
            type: 'date',
            name: 'contractEndDate'
        },
        {
            type: 'string',
            name: 'purchaseGroupId'
        },
        {
            type: 'string',
            name: 'purchaseGroupName'
        },
        {
            type: 'string',
            name: 'attachFileGroupId'
        },
        {
            type: 'int',
            name: 'countAttachFileItems'
        },
        {
            type: 'float',
            name: 'estimatedPrice'
        },
        {
            type: 'string',
            name: 'requesterName'
        },
        {
            type: 'string',
            convert: function(v, rec) {
                if(rec.get('purchaseType') === 'Product') {
                    return 'Product';
                } else {
                    return 'Service';
                }
            },
            name: 'propertyType'
        }
    ]
});

/*
 * File: app/model/rfx/RfxItemAttend.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.rfx.RfxItemAttend', {
    extend:  Ext.data.Model ,

               
                                
                              
                                 
                                
                                
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'date',
            name: 'attendDateTime'
        },
        {
            type: 'int',
            name: 'quantity'
        },
        {
            type: 'float',
            name: 'unitPrice'
        },
        {
            type: 'float',
            name: 'amount'
        },
        {
            type: 'float',
            name: 'attendRate'
        },
        {
            type: 'int',
            name: 'ranking'
        },
        {
            name: 'rfxItemResultState'
        },
        {
            name: 'openResult'
        },
        {
            name: 'resultState'
        },
        {
            name: 'progressState'
        },
        {
            type: 'string',
            name: 'rfxItemId'
        },
        {
            type: 'string',
            name: 'itemLineNo'
        },
        {
            type: 'string',
            name: 'itemId'
        },
        {
            type: 'string',
            name: 'itemCode'
        },
        {
            type: 'string',
            name: 'itemName'
        },
        {
            type: 'string',
            name: 'itemSpec'
        },
        {
            type: 'string',
            name: 'itemUnit'
        },
        {
            type: 'string',
            name: 'currencyCode'
        },
        {
            type: 'float',
            name: 'estimatedPrice'
        },
        {
            type: 'date',
            name: 'deliveryDueDate'
        },
        {
            type: 'string',
            name: 'deliveryLocation'
        },
        {
            type: 'string',
            name: 'executionLocation'
        },
        {
            type: 'date',
            name: 'executionBeginDate'
        },
        {
            type: 'date',
            name: 'executionEndDate'
        },
        {
            type: 'string',
            name: 'vendorId'
        },
        {
            type: 'string',
            name: 'vendorCode'
        },
        {
            type: 'string',
            name: 'vendorName'
        },
        {
            type: 'string',
            name: 'attachFileGroupId'
        },
        {
            type: 'int',
            name: 'countAttachFileItems'
        },
        {
            type: 'boolean',
            name: 'selected'
        }
    ]
});

/*
 * File: app/model/rfx/VendorAttendRequest.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.model.rfx.VendorAttendRequest', {
    extend:  Ext.data.Model ,

               
                                
                              
                               
      

    identifier: 'uuid',

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            name: 'representativeName'
        },
        {
            type: 'string',
            name: 'representativeMobileNo'
        },
        {
            type: 'string',
            name: 'representativeEmail'
        },
        {
            name: 'progressState'
        },
        {
            name: 'resultState'
        },
        {
            type: 'string',
            name: 'rfxId'
        },
        {
            type: 'string',
            name: 'rfxNo'
        },
        {
            type: 'string',
            name: 'rfxName'
        },
        {
            name: 'rfxProgressState'
        },
        {
            name: 'rfxResultState'
        },
        {
            name: 'rfxType'
        },
        {
            name: 'purchaseType'
        },
        {
            type: 'date',
            name: 'rfxRequestDate'
        },
        {
            type: 'date',
            name: 'closeDateTime'
        },
        {
            type: 'string',
            name: 'vendorId'
        },
        {
            type: 'string',
            name: 'vendorCode'
        },
        {
            type: 'string',
            name: 'vendorName'
        },
        {
            type: 'string',
            name: 'vendorRegistrationNo'
        },
        {
            type: 'string',
            name: 'vendorPresidentName'
        },
        {
            type: 'string',
            name: 'attendId'
        },
        {
            type: 'string',
            name: 'attendNo'
        },
        {
            type: 'float',
            name: 'attendAmount'
        },
        {
            name: 'attendResultState'
        },
        {
            type: 'date',
            name: 'submitDateTime'
        },
        {
            type: 'string',
            name: 'attendRepresentativeName'
        },
        {
            type: 'string',
            name: 'operatingUnitId'
        },
        {
            type: 'string',
            name: 'operatingUnitName'
        }
    ]
});

/*
 * File: app/view/ExDetailTabViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.ExDetailTabViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.exdetailtab'

});

/*
 * File: app/view/ExDetailTab.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.ExDetailTab', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.exdetailtab',

               
                                           
                              
                                 
                             
                        
                         
                                  
                              
                                  
                                  
                            
                                  
                                     
                      
                         
                                      
                               
                                 
                                  
                       
      

    viewModel: {
        type: 'exdetailtab'
    },
    ui: 'main',
    title: '#{텍스트}',

    layout: {
        type: 'card',
        deferredRender: true
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'page',
            items: [
                {
                    xtype: 'displayfield',
                    value: '#{텍스트}'
                },
                {
                    xtype: 'tbspacer',
                    flex: 1
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-save',
                    text: '#{버튼}'
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{버튼}'
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'tabpanel',
            beforeRenderChildren: true,
            reference: 'tabPanel',
            cls: 'nbr',
            activeTab: 0,
            items: [
                {
                    xtype: 'form',
                    fixed: true,
                    autoScroll: true,
                    layout: 'column',
                    bodyPadding: 5,
                    header: false,
                    title: 'Tab 1',
                    trackResetOnLoad: true,
                    items: [
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{텍스트}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'datefield',
                                    width: 270,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'datefield',
                                    width: 270,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'checkboxfield',
                                    width: '100%',
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140,
                                    inputValue: 'true',
                                    uncheckedValue: 'false'
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 150
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '/'
                                        },
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 60
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 150
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '/'
                                        },
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 60
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    colspan: 2,
                                    collapsible: true,
                                    title: '#{필드셋}',
                                    layout: {
                                        type: 'table',
                                        columns: 4
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            width: '90%',
                                            fieldLabel: '#{라벨}'
                                        },
                                        {
                                            xtype: 'combobox',
                                            width: '90%',
                                            fieldLabel: '#{라벨}'
                                        },
                                        {
                                            xtype: 'combobox',
                                            width: '90%',
                                            fieldLabel: '#{라벨}'
                                        },
                                        {
                                            xtype: 'combobox',
                                            width: '90%',
                                            fieldLabel: '#{라벨}'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{텍스트}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'datefield',
                                    width: 270,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'datefield',
                                    width: 270,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'checkboxfield',
                                    width: '100%',
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140,
                                    inputValue: 'true',
                                    uncheckedValue: 'false'
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 150
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '/'
                                        },
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 60
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    colspan: 2,
                                    collapsible: true,
                                    title: '#{필드셋}',
                                    layout: {
                                        type: 'table',
                                        columns: 4
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            width: '90%',
                                            fieldLabel: '#{라벨}'
                                        },
                                        {
                                            xtype: 'combobox',
                                            width: '90%',
                                            fieldLabel: '#{라벨}'
                                        },
                                        {
                                            xtype: 'combobox',
                                            width: '90%',
                                            fieldLabel: '#{라벨}'
                                        },
                                        {
                                            xtype: 'combobox',
                                            width: '90%',
                                            fieldLabel: '#{라벨}'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{텍스트}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'datefield',
                                    width: 270,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'datefield',
                                    width: 270,
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140
                                },
                                {
                                    xtype: 'checkboxfield',
                                    width: '100%',
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140,
                                    inputValue: 'true',
                                    uncheckedValue: 'false'
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{라벨}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 150
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '/'
                                        },
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 60
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{텍스트}',
                            layout: {
                                type: 'table',
                                columns: 1,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'textareafield',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{텍스트}',
                                    labelWidth: 140,
                                    enforceMaxLength: true,
                                    maxLength: 300
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    reference: 'attachmentField',
                                    width: '100%',
                                    fieldLabel: '#{첨부파일}',
                                    labelWidth: 140
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'form',
                    bodyPadding: 5,
                    title: 'Tab 2',
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'gridpanel',
                            flex: 1,
                            reference: 'gridPanel',
                            ui: 'grid',
                            title: '#{그리드}',
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    ui: 'grid',
                                    items: [
                                        {
                                            xtype: 'button',
                                            iconCls: 'btn-check',
                                            text: '#{버튼}'
                                        },
                                        {
                                            xtype: 'button',
                                            iconCls: 'btn-save',
                                            text: '#{버튼}'
                                        }
                                    ]
                                }
                            ],
                            selModel: {
                                selType: 'checkboxmodel'
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'string',
                                    text: 'String'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'string',
                                    text: 'String'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'string',
                                    text: 'String'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'string',
                                    text: 'String'
                                },
                                {
                                    xtype: 'datecolumn',
                                    dataIndex: 'date',
                                    text: 'Date'
                                },
                                {
                                    xtype: 'numbercolumn',
                                    dataIndex: 'number',
                                    text: 'Number'
                                },
                                {
                                    xtype: 'booleancolumn',
                                    dataIndex: 'bool',
                                    text: 'Boolean'
                                },
                                {
                                    xtype: 'datecolumn',
                                    dataIndex: 'date',
                                    text: 'Date'
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'form',
                    title: 'Tab 3',
                    items: [
                        {
                            xtype: 'gridpanel',
                            reference: 'gridPanel',
                            ui: 'grid',
                            title: '#{그리드}',
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    ui: 'grid',
                                    items: [
                                        {
                                            xtype: 'button',
                                            iconCls: 'btn-check',
                                            text: '#{버튼}'
                                        },
                                        {
                                            xtype: 'button',
                                            iconCls: 'btn-save',
                                            text: '#{버튼}'
                                        }
                                    ]
                                }
                            ],
                            selModel: {
                                selType: 'checkboxmodel'
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'string',
                                    text: 'String'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'string',
                                    text: 'String'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'string',
                                    text: 'String'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'string',
                                    text: 'String'
                                },
                                {
                                    xtype: 'datecolumn',
                                    dataIndex: 'date',
                                    text: 'Date'
                                },
                                {
                                    xtype: 'numbercolumn',
                                    dataIndex: 'number',
                                    text: 'Number'
                                },
                                {
                                    xtype: 'booleancolumn',
                                    dataIndex: 'bool',
                                    text: 'Boolean'
                                },
                                {
                                    xtype: 'datecolumn',
                                    dataIndex: 'date',
                                    text: 'Date'
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]

});

/*
 * File: app/view/ExDetailTabViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.ExDetailTabViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.exdetailtab'
});

/*
 * File: app/view/ExListViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.ExListViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.exlist'

});

/*
 * File: app/view/ExListViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.ExListViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.exlist',

    onFormSpecialkey: function(form, e) {
        var me = this;

        if(e.ENTER == e.getKey()){
            me.search();
        }
    }

});

/*
 * File: app/view/ExList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.ExList', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.exlist',

               
                                      
                                           
                         
                                 
                             
                            
                                           
                                  
                                  
                              
                         
                         
                                      
                                 
                               
                                  
                        
                            
      

    controller: 'exlist',
    viewModel: {
        type: 'exlist'
    },
    autoShow: true,
    ui: 'main',
    title: '#{텍스트}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            reference: 'searchForm',
            autoScroll: true,
            data: {
                bubbleEvents: [
                    'specialkey'
                ],
                defaults: {
                    bubbleEvents: [
                        'specialkey'
                    ],
                    defaults: {
                        bubbleEvents: [
                            'specialkey'
                        ]
                    }
                }
            },
            margin: '0 0 5 0',
            ui: 'search',
            defaults: {
                bubbleEvents: [
                    'specialkey'
                ],
                defaults: {
                    bubbleEvents: [
                        'specialkey'
                    ],
                    defaults: {
                        bubbleEvents: [
                            'specialkey'
                        ]
                    }
                }
            },
            bodyBorder: false,
            fieldDefaults: {
                labelWidth: 120
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    ui: 'search',
                    items: [
                        {
                            xtype: 'displayfield',
                            value: '#{텍스트}'
                        },
                        {
                            xtype: 'tbspacer',
                            flex: 1
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-search',
                            text: '#{조회}'
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-refresh',
                            text: '#{초기화}'
                        }
                    ]
                }
            ],
            listeners: {
                specialkey: 'onFormSpecialkey'
            },
            plugins: [
                {
                    ptype: 'autoClearButton'
                }
            ],
            items: [
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{조건}'
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{조건}'
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{조건}'
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{조건}'
                },
                {
                    xtype: 'fieldcontainer',
                    fieldLabel: '#{날짜}',
                    layout: {
                        type: 'table',
                        columns: 3
                    },
                    items: [
                        {
                            xtype: 'datefield',
                            margin: 0,
                            width: 110
                        },
                        {
                            xtype: 'label',
                            margin: '0 5',
                            text: '~'
                        },
                        {
                            xtype: 'datefield',
                            margin: 0,
                            width: 110
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{조건}'
                },
                {
                    xtype: 'fieldcontainer',
                    fieldLabel: '#{날짜}',
                    layout: {
                        type: 'table',
                        columns: 3
                    },
                    items: [
                        {
                            xtype: 'datefield',
                            margin: 0,
                            width: 110
                        },
                        {
                            xtype: 'label',
                            margin: '0 5',
                            text: '~'
                        },
                        {
                            xtype: 'datefield',
                            margin: 0,
                            width: 110
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{조건}'
                }
            ]
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            reference: 'gridPanel',
            ui: 'grid',
            header: false,
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    cls: 'grid-toolbar',
                    ui: 'grid',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'btn-edit',
                            text: '#{버튼}'
                        },
                        {
                            xtype: 'tbspacer',
                            flex: 1
                        }
                    ]
                },
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    displayInfo: true
                }
            ],
            selModel: {
                selType: 'checkboxmodel',
                mode: 'SINGLE',
                checkOnly: true
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'string',
                    text: 'String'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'string',
                    text: 'String'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'string',
                    text: 'String'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'string',
                    text: 'String'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'string',
                    text: 'String'
                },
                {
                    xtype: 'numbercolumn',
                    dataIndex: 'number',
                    text: 'Number'
                },
                {
                    xtype: 'datecolumn',
                    dataIndex: 'date',
                    text: 'Date'
                },
                {
                    xtype: 'booleancolumn',
                    dataIndex: 'bool',
                    text: 'Boolean'
                }
            ]
        }
    ]

});

/*
 * File: app/view/ExModuleViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.ExModuleViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.exmodule'

});

/*
 * File: app/view/ExModule.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.ExModule', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.exmodule',

               
                                        
                             
                                  
                         
      

    viewModel: {
        type: 'exmodule'
    },
    height: 768,
    width: 1024,

    layout: {
        type: 'card',
        deferredRender: true
    },
    items: [
        {
            xtype: 'exlist',
            reference: 'list'
        },
        {
            xtype: 'exdetailtab',
            reference: 'detail'
        }
    ]

});

/*
 * File: app/view/ExModuleViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.ExModuleViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.exmodule'
});

/*
 * File: app/view/bidAnnouncement/detail/product/BidAnnouncementDetailViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.bidAnnouncement.detail.product.BidAnnouncementDetailViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.bidannouncementregistrationmtbidtreg',

               
                                   
                                
                               
                                
                          
                          
                          
                               
                                                  
                                   
                                
                                             
                                         
                               
                                   
      

    data: {
        newDate: new Date(),
        isPopup: true,
        bidData: null,
        isEditable: true,
        isFirst: true,
        totalEvalType: true,
        basisItem: [
            
        ],
        hideOpenBidDateTime: true,
        serverTime: Etna.util.Time.getServerTime(),
        isManySupply: false,
        hideColumn: true,
        isJointSupplyDemand: false,
        hideJointField: true,
        isChangeReasonHidden: true
    },

    stores: {
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        purchaseTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ItemTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        bidTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            listeners: {
                load: 'onEnumLoad'
            }
        },
        currencyCodeStore: {
            groupCode: 'Currency',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        competitionTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CompetitionTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            listeners: {
                load: 'onEnumLoad1'
            }
        },
        contractMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        estimatedPriceTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.EstimatedPriceTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        vendorAwardTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.VendorAwardTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        jointSupplyDemandMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.JointSupplyDemandMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            filters: {
                filterFn: function(item) {
                    var status = item.get('value');
                    var agreeStatus = ['General', 'Price'];
                    if(Ext.Array.contains(agreeStatus, status) === true){
                        return item;
                    }
                }
            }
        },
        noticeKindKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.NoticeKindKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        inOutTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.InOutTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            filters: {
                filterFn: function(item) {
                    var status = item.get('value');
                    var agreeStatus = ['International'];
                    if(Ext.Array.contains(agreeStatus, status) === false){
                        return item;
                    }
                }
            }
        },
        twoPhaseTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.TwoPhaseTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        collectivelyBidMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CollectivelyBidMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        totalEvalMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.TotalEvalMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        limitedTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.LimitedTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        qualifiedEvalBasisTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.QualifiedEvalBasisTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        qualifiedItemTypeKind: {
            enumType: 'smartsuit.app.sim.qualifieditem.domain.enums.QualifiedItemTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        limitedReasonCodeStore: {
            groupCode: 'limitedReasonCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        designationReasonCodeStore: {
            groupCode: 'designationReasonCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        targetItemCodeStore: {
            groupCode: 'targetItem',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        unitCodeStore: {
            groupCode: 'Unit',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    mapping: 'id',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        vendorAttendRistrictStore: {
            data: [
                {
                    text: '등록외품목',
                    value: true
                },
                {
                    text: '등록품목',
                    value: false
                }
            ],
            fields: [
                {
                    name: 'text'
                },
                {
                    name: 'value'
                }
            ]
        },
        bidItemStore: {
            model: 'bid_sp.model.bid.BidItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidItems',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        fileItemStore: {
            model: 'bid_sp.model.bid.FileItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.getFileItemList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        changeTimeStore: {
            model: 'bid_sp.model.bid.BidDateTimeChange',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidChangeTimeDetailList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        progressStore: {
            model: 'bid_sp.model.bid.ProgressState',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findProgressStateSPList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        limitedTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.LimitedTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        }
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                formulas: {
                    bidBeginDate: {
                        get: function(data) {
                            var bidType = data.bidType;
                            var alwaysAttendYn = data.alwaysAttendYn;
                            var twoPhaseType = data.twoPhaseType;
                            var manySupplyYn = data.manySupplyYn;

                            if(bidType === 'Nego' || (bidType === 'LowestPrice' && (twoPhaseType === 'Separate' || twoPhaseType === 'Concurrent'))){
                                return true;
                            } else if(bidType === 'QualifiedEval' && manySupplyYn) {
                                return true;
                            } else if(!bidType){
                                return true;
                            } else {
                                return alwaysAttendYn;
                            }
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            alwaysAttendYn: '{bidData.alwaysAttendYn}',
                            twoPhaseType: '{bidData.twoPhaseType}',
                            manySupplyYn: '{bidData.manySupplyYn}'
                        }
                    },
                    specProposalBeginDate: {
                        get: function(data) {
                            var bidType = data.bidType;
                            var alwaysAttendYn = data.alwaysAttendYn;
                            var twoPhaseType = data.twoPhaseType;

                            if(bidType === 'Nego' || (bidType === 'LowestPrice' && (twoPhaseType === 'Separate' || twoPhaseType === 'Concurrent'))){
                                return alwaysAttendYn;
                            }else {
                                return true;
                            }
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            alwaysAttendYn: '{bidData.alwaysAttendYn}',
                            twoPhaseType: '{bidData.twoPhaseType}'
                        }
                    },
                    specProposalCloseDate: {
                        get: function(data) {
                            var bidType = data.bidType;
                            var twoPhaseType = data.twoPhaseType;

                            if(bidType === 'Nego' || (bidType === 'LowestPrice' && (twoPhaseType === 'Separate' || twoPhaseType === 'Concurrent'))){
                                return false;
                            }
                            return true;
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            twoPhaseType: '{bidData.twoPhaseType}'
                        }
                    },
                    specProposalTitle: {
                        get: function(data) {
                            var bidType = data.bidType;
                            var twoPhaseType = data.twoPhaseType;
                            var specProposalBeginDate = me.getView().lookupReference('specProposalBeginDate');
                            var specProposalCloseDate = me.getView().lookupReference('specProposalCloseDate');

                            if(bidType === 'Nego'){
                                specProposalBeginDate.setFieldLabel(Ext.String.format('#{제안서제출 시작일시}'));
                                specProposalCloseDate.setFieldLabel(Ext.String.format('#{제안서제출 마감일시}'));
                            } else if((bidType === 'LowestPrice' && (twoPhaseType === 'Separate' || twoPhaseType === 'Concurrent')) ||
                            bidType === 'TotalEval' && twoPhaseType === 'Separate'){
                                specProposalBeginDate.setFieldLabel(Ext.String.format('#{규격서제출 시작일시}'));
                                specProposalCloseDate.setFieldLabel(Ext.String.format('#{규격서제출 마감일시}'));
                            }
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            twoPhaseType: '{bidData.twoPhaseType}'
                        }
                    },
                    convertPresumedPrice: {
                        get: function(data) {
                            var amount = 0;

                            if(data){
                                amount = data.presumedPrice;
                            }

                            if(amount > 0){
                                return Ext.String.format('{0} {1}', Ext.util.Format.numberWord(amount), '#{원}');
                            }
                        },
                        bind: {
                            presumedPrice: '{bidData.presumedPrice}'
                        }
                    },
                    convertEstimatedPriceAmount: {
                        get: function(data) {
                            var amount = 0;

                            if(data){
                                amount = data.estimatedPriceAmount;
                            }

                            if(amount > 0){
                                return Ext.String.format('{0} {1}', Ext.util.Format.numberWord(amount), '#{원}');
                            }
                        },
                        bind: {
                            estimatedPriceAmount: '{bidData.estimatedPriceAmount}'
                        }
                    }
                }
            };
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    findBid: function(param, type) {
        var deferred = Ext.create('Deft.Deferred');


        smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidBasicInfo(param, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    }

});

/*
 * File: app/view/bidAnnouncement/detail/product/BidAnnouncementDetailViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.bidAnnouncement.detail.product.BidAnnouncementDetailViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.bidannouncementregistrationmtbidreg',

    loadData: function(param, type) {
        var me = this, view = this.getView(),vm = this.getViewModel();

        vm.set('isPopup',false);
        vm.set('isEditable',false);
        vm.set('isFirst',true);

        Etna.suspendLayouts();

        view.setLoading(true);
        Etna.onDone(function() {
            me.searchBid(param, type);

            var fileGroupId = 'ProductBidFileGroup';

            var searchParam = {
                bidId 		: param,
                type  		: type,
                fileGroupId	: fileGroupId,
                bidFileType	: 'Bid'
            };

            me.searchChangeTime(searchParam);
            me.searchBidItems(searchParam);
            me.searchBidProgress(searchParam);

            var fileItemStore = me.getViewModel().get('fileItemStore');

            fileItemStore.load({
                params: searchParam,
                callback: function(records, operation, success){

                }
            });

            Etna.onDone(function() {
                Etna.deferredFlushLayouts();
                Etna.resumeLayouts(true);
            });
        });
    },

    close: function() {
        var me = this, view = me.getView();

        me.clearData();
        //me.expandComponents();
        view.fireEvent('closeDetail');
    },

    searchBid: function(param, type) {
        var me = this,
            view = this.getView(),
            vm = this.getViewModel();

        view.setLoading(true);
        vm.findBid(param, type).then({
            success: function(result) {
                vm.set('isJointSupplyDemand', result.jointSupplyDemandYn);
                vm.set('bidData', null);
                vm.set('bidData', me.getDateTime(result));
                me.loadOpinion(vm.get('bidData'));

                // [2015.10.16 송헌용] 정정사유 보이게 처리
                if(vm.get('bidData.changeReason')) {
                    vm.set('isChangeReasonHidden', false);
                }

                // [2016.03.23 SJH] 한전만 유자격품목 보이게 설정
                if(result.companyId =='COM01'){
                    me.lookupReference('qualifiedItemYn').setHidden(false);
                }else{
                    me.lookupReference('qualifiedItemYn').setHidden(true);
                }

                // [2016.03.23 SJH] 종합낙찰제 일때만 종합평가방법 보이게 설정
                if(result.bidType ==='TotalEval'){
                    me.lookupReference('totalEval').setHidden(false);
                }else{
                    me.lookupReference('totalEval').setHidden(true);
                }

                // [2016.03.23 SJH] 협상일때만 배점한도 보이게 설정
                if(result.bidType ==='Nego'){
                    me.lookupReference('proposalLimit').setHidden(false);
                }else{
                    me.lookupReference('proposalLimit').setHidden(true);
                }

                if(result.competitionType =='Limited'){
                    me.lookupReference('limitedType').setVisible(true);
                }else{
                    me.lookupReference('limitedType').setVisible(false);
                }

                me.getView().setLoading(false);
            },
            failure: function() {
                me.getView().setLoading(false);
            }
        });
    },

    init: function() {
        var me = this,
            view = me.getView();

        me.getView().loadData = Ext.Function.bind(me.loadData, me);
        view.setHiddenKepcoPanel = Ext.Function.bind(me.setHiddenKepcoPanel, me);
    },

    getDateTime: function(param) {
        var me = this;

        var bidData = Ext.create('bid_sp.model.bid.Bid', param);

        if(bidData.get('beginDateTime')) {
            bidData.set('beginDateHour', bidData.get('beginDateTime').getHours());
            bidData.set('beginDateMinute', bidData.get('beginDateTime').getMinutes());
        }

        if(bidData.get('endDateTime')) {
            bidData.set('endDateHour', bidData.get('endDateTime').getHours());
            bidData.set('endDateMinute', bidData.get('endDateTime').getMinutes());
        }

        if(bidData.get('bidAttendRequestCloseDateTime')) {
            bidData.set('bidAttendRequestCloseDateHour', bidData.get('bidAttendRequestCloseDateTime').getHours());
            bidData.set('bidAttendRequestCloseDateMinute', bidData.get('bidAttendRequestCloseDateTime').getMinutes());
        }

        if(bidData.get('openBidDateTime')) {
            bidData.set('openBidDateHour', bidData.get('openBidDateTime').getHours());
            bidData.set('openBidDateMinute', bidData.get('openBidDateTime').getMinutes());
        }

        if(bidData.get('specEvalCloseDateTime')) {
            bidData.set('specEvalCloseDateHour', bidData.get('specEvalCloseDateTime').getHours());
            bidData.set('specEvalCloseDateMinute', bidData.get('specEvalCloseDateTime').getMinutes());
        }

        if(bidData.get('specProposalBeginDateTime')) {
            bidData.set('specProposalBeginDateHour', bidData.get('specProposalBeginDateTime').getHours());
            bidData.set('specProposalBeginDateMinute', bidData.get('specProposalBeginDateTime').getMinutes());
        }

        if(bidData.get('specProposalCloseDateTime')) {
            bidData.set('specProposalCloseDateHour', bidData.get('specProposalCloseDateTime').getHours());
            bidData.set('specProposalCloseDateMinute', bidData.get('specProposalCloseDateTime').getMinutes());
        }

        bidData.set('purchaseType', bidData.get('purchaseType'));
        bidData.set('itemType', bidData.get('itemType'));

        // [2015.10.16 송헌용] 자동첨부 추가
        if(!bidData.get("autoAttachFileGroupId")){
            bidData.set("autoAttachFileGroupId",'CodeOfConduct');
        }

        return bidData;
    },

    clearData: function() {
        var me = this, vm = this.getViewModel();
        var tabPanel = me.lookupReference('tabPanel');
        var changeTimeStore = vm.getStore('changeTimeStore');

        changeTimeStore.removeAll();
        var bidData = Ext.create('bid_sp.model.bid.Bid', null);
        vm.set('totalEvalType', false);
        vm.set('bidData', bidData);
        vm.set('isFirst',true);
        vm.set('basisItem', []);
        vm.set('isManySupply', false);
        vm.set('hideColumn', true);
        vm.set('isJointSupplyDemand', false);
        vm.set('isChangeReasonHidden', true);
        tabPanel.setActiveTab(0);
    },

    searchBidItems: function(searchParam) {
        var me = this,
            vm = this.getViewModel();
        var basisItem = vm.get('basisItem');
        var itemStore = vm.getStore('bidItemStore');

        itemStore.load({
            params: searchParam,
            callback: function(records, operation, success) {
                itemStore.each(function(record){
                   if(record.get('basisItemYn') === true){
                       basisItem.push(record.get('id'));
                   }
                });
                if(basisItem.length === 0 && itemStore.first() !== null){
                    basisItem.push(itemStore.first().getId());
                    itemStore.first().set('basisItemYn', true);
                }
            }
        });
    },

    getMidnightDate: function(date) {
        var midnightTime = Ext.Date.clone(date);

        midnightTime.setHours(0);
        midnightTime.setMinutes(0);
        midnightTime.setSeconds(0);
        midnightTime.setMilliseconds(0);
        return midnightTime;
    },

    searchChangeTime: function(searchParam) {
        var me = this,
            vm = this.getViewModel();
        var basisItem = vm.get('basisItem');
        var changeTimeStore = vm.getStore('changeTimeStore');

        changeTimeStore.load({
            params: searchParam
        });
    },

    loadOpinion: function(bidData) {
        var me = this,
            vm = me.getViewModel(),
            view = me.getView();

        var form1 = me.lookupReference('form1');

        var opinionModuleList = me.lookupReference('opinionModuleList');

        var popData = {
            announceId	: bidData.get('id'),
            announceNo	: bidData.get('no'),
            announceName: bidData.get('name')
        };

        form1.add(opinionModuleList);
        opinionModuleList.setDefaultValue(popData);
        opinionModuleList.setVisible(true);
    },

    searchBidProgress: function(searchParam) {
        var me = this,
            view = me.getView(),
            vm = this.getViewModel();

        var progressStore = vm.getStore('progressStore');

        progressStore.load({
            params: searchParam
        });
    },

    setHiddenKepcoPanel: function() {
        var me= this;
        me.lookupReference('kepcopanel').setHidden(true);
    },

    onButtonClick: function(button, e, eOpts) {
        var me = this,
            vm = me.getViewModel();

        // [2015.10.13 송헌용] 갱신버튼 추가
        me.loadData(vm.get('bidData.id'), 'Bid');
    },

    onPrintButtonClick: function(button, e, eOpts) {
        var me = this,
            vm = this.getViewModel(),
            bidData = vm.get('bidData');

        var w = 780,
            h = 768,
            leftPosition = (screen.width-w)/2,
            topPosition = (screen.height-h)/2;

        window.open('about:blank', 'print', 'location=no, width='+w+',height='+h+',top='+topPosition+',left='+leftPosition+',scrollbars=yes');

        var frm = Site.util.Format.makeForm('print.do', 'POST',  'print');
        frm.appendChild(Site.util.Format.makeInput('hidden', 'documentType', 'ProductBidAnnouncementSPPrint'));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'groupCode'   , 'PrintDocumentType'));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'id'          , bidData.get('id')));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'standardDate' , Ext.util.Format.date(bidData.get('noticeDate'),'Y-m-d')));
        frm.appendChild(Site.util.Format.makeInput('hidden', Ext.query("meta[name='_csrf_parameter']")[0].content,Ext.query("meta[name='_csrf']")[0].content));
        document.body.appendChild(frm);

        frm.submit();
    },

    onCloseBtnClick: function(button, e, eOpts) {
        var me = this;
        me.close();
    },

    onContainerItemClick: function(item) {
        var me = this;
        if(item.urlLink !== 'none'){ //tabUrl이 있는 경우
            var classPath = item.urlLink;

            //modal로 뜨도록 수정 (통테이후 반영예정)
            var popup = Ext.create(classPath, {
                floating : true,
                modal:true,
                title : item.tabTitle,
                bidNo : item.paramNo,
                noticeDate : item.paramNoticeDate,
                companyId : item.companyId,
                width:1024,
                height:768,
                resizable:true,
                draggable:true
            });

            popup.show();
            popup.center();

            //------------------------------------------------------------------tab으로 뜨도록
            //     if (MdiManager.hasView(classPath)) { //기존에 tab이 띄워져있으면 닫음
            //         var view = MdiManager.mdiTab.down(Ext.String.format('>[classpath='+classPath+']'));
            //         MdiManager.mdiTab.remove(view,true);
            //     }
            //     MdiManager.addViewToTab(classPath, { //tab 띄움
            //         title: item.tabTitle,
            //         authKey:  item.menuCode,
            //         bidNo : item.paramNo,
            //         noticeDate : item.paramNoticeDate,
            //         companyId : item.companyId
            //     }, classPath);
        }else if(item.notiMsg !== 'none'){ //화면을 보여주는 것 보다 alert창을 띄워야 하는 경우
            Etna.Message.alert(item.notiMsg);
        }
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {

        var me = this,
            view = me.getView(),
            vm = me.getViewModel();

        var targetItem = me.lookupReference('targetItem');
        var smallMediumFirmYn = me.lookupReference('smallMediumFirmYn');
        var qualifiedEval = me.lookupReference('qualifiedEval');
        var wishQuantityYn = me.lookupReference('wishQuantityYn');
        var manySupplyYn = me.lookupReference('manySupplyYn');
        var openBidDateTime = me.lookupReference('openBidDateTime');
        var serverTime = Ext.Date.clone(vm.get('serverTime'));
        var bidData = me.getViewModel().get('bidData');
        var estimatedPriceField = me.lookupReference('estimatedPriceField');
        var estimatedAmountField = me.lookupReference('estimatedAmountField');
        var estimatedAmountSecField = me.lookupReference('estimatedAmountSecField');
        var estimatedPriceFieldFlag = false;
        var estimatedAmountFieldLabel = '기초금액';
        var estimatedPriceFieldTitle = '예비가격 기초금액';
        var proposalLimit = me.lookupReference('proposalLimit');
        var totalEval = me.lookupReference('totalEval');

        if(newValue=='LowestPrice'){
            //최저가
            qualifiedEval.setVisible(false);
            wishQuantityYn.setVisible(true);
            smallMediumFirmYn.setVisible(false);
            targetItem.setVisible(false);
            manySupplyYn.setVisible(false);
            openBidDateTime.setVisible(false);
            proposalLimit.setVisible(false);
            totalEval.setVisible(false);

        }else if(newValue=='QualifiedEval'){
            //적격심사
            qualifiedEval.setVisible(true);
            wishQuantityYn.setVisible(false);
            smallMediumFirmYn.setVisible(true);
            targetItem.setVisible(false);
            manySupplyYn.setVisible(true);
            openBidDateTime.setVisible(false);
            proposalLimit.setVisible(false);
            totalEval.setVisible(false);

            estimatedPriceFieldFlag = bidData.get('estimatedPriceOpenYn');
            if(bidData.get('manySupplyYn')){//적격심사이면서 다수공급자입찰인 경우
                estimatedPriceFieldTitle = '입찰관련 참고사항';
                estimatedAmountFieldLabel = '예정가격 (VAT 포함)';
            }

        }else if(newValue=='TotalEval'){
            //종합평가
            qualifiedEval.setVisible(false);
            wishQuantityYn.setVisible(true);
            smallMediumFirmYn.setVisible(false);
            targetItem.setVisible(true);
            manySupplyYn.setVisible(false);
            openBidDateTime.setVisible(false);
            proposalLimit.setVisible(false);
            totalEval.setVisible(true);

        }else if(newValue=='Nego'){
            //협상
            qualifiedEval.setVisible(false);
            wishQuantityYn.setVisible(false);
            smallMediumFirmYn.setVisible(false);
            targetItem.setVisible(false);
            manySupplyYn.setVisible(false);
            openBidDateTime.setVisible(true);
            proposalLimit.setVisible(true);
            estimatedPriceFieldFlag = bidData.get('estimatedPriceOpenYn');
            totalEval.setVisible(false);

        }

        if(me.getViewModel().get('bidData.noticeKind') === 'ElectronicOpenPrivate'){//전자공개수의인 경우
            estimatedPriceFieldFlag = bidData.get('estimatedPriceOpenYn');
        }

        var estimatedPriceAmount = me.getViewModel().get('bidData.estimatedPriceAmount');
        if(!estimatedPriceAmount){//예비가격 기초금액이 없는 경우 미입력으로 나오도록 수정
            me.getViewModel().set('isEstimatedPriceAmountEmpty', true);
        }else{
            me.getViewModel().set('isEstimatedPriceAmountEmpty', false);
        }
        me.getViewModel().set('isManySupply', bidData.get('manySupplyYn'));
        estimatedAmountSecField.setFieldLabel(estimatedAmountFieldLabel);
        estimatedAmountField.setFieldLabel(estimatedAmountFieldLabel);
        estimatedPriceField.setVisible(estimatedPriceFieldFlag);
        estimatedPriceField.setTitle(estimatedPriceFieldTitle);
        // Etna.deferredFlushLayouts();
    },

    onCheckboxfieldChange1: function(field, newValue, oldValue, eOpts) {
        var me = this,
            vm = me.getViewModel();
        if(newValue){
            vm.set('hideColumn',false);

        } else {
            vm.set('hideColumn',true);
        }
    },

    onSearchItemButtonClick: function(button, e, eOpts) {
        var me = this;
        var bidData = me.getViewModel().get('bidData');
        var popup = me.lookupReference('popupItemSearch');

        popup.show();
        popup.center();
        popup.load(bidData);
    },

    onDisplayfieldChange: function(field, newValue, oldValue, eOpts) {
        var me = this,
            vm = me.getViewModel();

        if (newValue === 'MoreThanBasis'){
            me.lookupReference('moreThanBillion').setVisible(true);
            me.lookupReference('lessThanBillion').setVisible(false);
        } else if(newValue === 'LessThanBasis'){
            me.lookupReference('moreThanBillion').setVisible(false);
            me.lookupReference('lessThanBillion').setVisible(true);
        }
        // Etna.deferredFlushLayouts();
    },

    onGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        var me = this;
        var dataIndex = tableview.getColumnManager().getHeaderAtIndex(cellIndex).dataIndex;
        var attendCon = me.lookupReference('attendCon');

        if(dataIndex == 'name'){
            attendCon.setHtml('<iframe src="printDownloadAttachment.do?id='+record.get('id')+'" width="0", height="0"/>');
        }
    },

    onCellEditingBeforeEdit: function(editor, context, eOpts) {
        var me = this,
            vm = this.getViewModel();

        var dataIndex = context.column.dataIndex;
        var record = context.record;
        var basisItems = vm.get('basisItem');
        var bidItemStore = vm.getStore('bidItemStore');

        if(vm.get('isEditable')) {
            if( dataIndex == 'basisItemYn' && !context.record.get('basisItemYn') ){
                basisItems.forEach(function(basisItem){
                    bidItemStore.getById(basisItem).set('basisItemYn', false);
                });
                vm.set('basisItem', []);
                vm.get('basisItem').push(context.record.get('id'));
            } else if (dataIndex == 'basisItemYn' && context.record.get('basisItemYn')){
                return false;
            }
            //     if(dataIndex==='quantity' || dataIndex==='eliminated') {
            //         return true;
            //     }
            return true;
        }
        return false;
    },

    onCellEditingEdit: function(editor, context, eOpts) {
        var me = this,
            vm = this.getViewModel();

        var field = context.field;
        var record = context.record;

        /*if(field == 'quantity' || field == 'estimatedPrice'){
        record.set('estimatedAmount', record.get('quantity') * record.get('estimatedPrice'));
        }

        var totalAmount = 0;
        var itemStore = vm.getStore('bidItemStore');

        itemStore.each(function(item){
        if(!item.get('eliminated')) {
        totalAmount += item.get('estimatedAmount');
        }
        });

        vm.get('bidData').set('budgetAmount', totalAmount);*/
    },

    onGridpanelSelectionChange: function(model, selected, eOpts) {
        var me = this,
            vm = this.getViewModel();

        if(selected.length) {
            //vm.set('itemGridBtnDisabled', false);
        } else {
            //vm.set('itemGridBtnDisabled', true);
        }
    },

    onEnumLoad: function(store, records, successful, eOpts) {
        var me = this,
            vm = this.getViewModel();

        if(successful) {
            store.filter([
            {
                filterFn: function(record) {
                    if(record.get('value')!=='CollectivelyBid' && record.get('value')!=='TwoPhase'){
                        return record.get('value');
                    }

                }
            }
            ]);
        }
    },

    onEnumLoad1: function(store, records, successful, eOpts) {
        var me = this,
            vm = this.getViewModel();

        if(successful) {
            store.filter([
            {
                filterFn: function(record) {
                    return record.get('value')!=='Private';
                }
            }
            ]);
        }
    }

});

/*
 * File: app/view/bidAnnouncement/popup/PopupSearchItemsViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.bidAnnouncement.popup.PopupSearchItemsViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.bidannouncementpopuppopupsearchitems',

               
                         
                                
                               
                                                        
      

    data: {
        data: {
            
        }
    },

    stores: {
        itemStore: {
            model: 'bid_sp.model.bid.EstimatedPriceBasicReportItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findByIdEstimatedPriceBasicReportItemList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        }
    }

});

/*
 * File: app/view/bidAnnouncement/popup/PopupSearchItemsViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.bidAnnouncement.popup.PopupSearchItemsViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.bidannouncementpopuppopupsearchitems',

    init: function() {
        var me = this;
        var view = me.getView();

        view.load = Ext.Function.bind(me.load, me);
    },

    load: function(record) {
        var me = this;
        var itemStore = me.getViewModel().getStore('itemStore');

        me.getView().setLoading(true);
        itemStore.load({
            params:{bidId: record.get('id')},
            callback:function(){
                var model = Ext.create('bid_sp.model.bid.Bid', record.getData());
                me.getViewModel().set('data', model);
                me.getView().setLoading(false);
            }
        });
    },

    onCloseButtonClick: function(button, e, eOpts) {
        var me = this;
        var itemStore = me.getViewModel().getStore('itemStore');

        var model = Ext.create('bid_sp.model.bid.Bid');
        me.getViewModel().set('data', model);

        itemStore.removeAll();

        me.getView().close();
    },

    onFormAfterRender: function(component, eOpts) {
        var me = this;
        me.getView().setLoading(true);
    }

});

/*
 * File: app/view/bidAnnouncement/popup/PopupSearchItems.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.bidAnnouncement.popup.PopupSearchItems', {
    extend:  Ext.form.Panel ,
    alias: 'widget.bidannouncementpopuppopupsearchitems',

               
                                                                      
                                                                           
                         
                              
                             
                            
                              
                         
                        
                                 
                                  
                                 
                                   
                                   
      

    config: {
        modal: true,
        lazy: true
    },

    controller: 'bidannouncementpopuppopupsearchitems',
    viewModel: {
        type: 'bidannouncementpopuppopupsearchitems'
    },
    draggable: true,
    floating: true,
    height: 400,
    resizable: true,
    ui: 'popup',
    width: 650,
    closeAction: 'hide',
    title: '#{품목별 기초금액조회}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            ui: 'table',
            layout: {
                type: 'table',
                columns: 1
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    ui: 'grid',
                    items: [
                        {
                            xtype: 'tbspacer',
                            flex: 1
                        },
                        {
                            xtype: 'button',
                            text: '#{닫기}',
                            listeners: {
                                click: 'onCloseButtonClick'
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'textfield',
                    fieldLabel: '#{공고번호}',
                    readOnly: true,
                    bind: {
                        value: '{data.no}'
                    }
                }
            ]
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            stateId: '1c663865-f080-2b61-e054-0017a4770c10',
            stateful: true,
            ui: 'grid',
            bind: {
                store: '{itemStore}'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'itemCode',
                    text: '#{자재코드}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 400,
                    dataIndex: 'itemName',
                    text: '#{자재품명}'
                },
                {
                    xtype: 'numbercolumn',
                    width: 130,
                    align: 'right',
                    dataIndex: 'calculatedPrice',
                    text: '#{예비기초금액}',
                    format: '0,000.##'
                }
            ],
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                }
            ]
        }
    ],
    listeners: {
        afterrender: 'onFormAfterRender'
    }

});

/*
 * File: app/view/bidAnnouncement/detail/product/BidAnnouncementDetail.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.bidAnnouncement.detail.product.BidAnnouncementDetail', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.bidannouncementdetailproductbidannouncementdetail',

               
                                                                                    
                                                                                         
                                                             
                              
                         
                           
                        
                         
                      
                                  
                                 
                              
                                  
                                  
                                 
                             
                                  
                                
                            
                         
                        
                                     
                               
                                  
                                 
                                   
                                    
                                  
                                     
                                 
                                 
                                
                                     
      

    controller: 'bidannouncementregistrationmtbidreg',
    viewModel: {
        type: 'bidannouncementregistrationmtbidtreg'
    },
    ui: 'main',
    title: '#{자재입찰공고상세}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'page',
            items: [
                {
                    xtype: 'label',
                    text: '#{자재입찰 공고내역을 조회합니다.}'
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-refresh',
                    text: '#{갱신}',
                    listeners: {
                        click: 'onButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-print',
                    text: '#{인쇄}',
                    bind: {
                        hidden: '{isEditable}'
                    },
                    listeners: {
                        click: 'onPrintButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseBtnClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'kepcopanel',
            collapsible: true,
            reference: 'kepcopanel',
            height: 150,
            bind: {
                store: '{progressStore}'
            },
            listeners: {
                itemClick: 'onContainerItemClick'
            }
        },
        {
            xtype: 'tabpanel',
            flex: 1,
            reference: 'tabPanel',
            cls: 'nbr',
            overlapHeader: false,
            activeTab: 0,
            layout: {
                type: 'card',
                deferredRender: false
            },
            items: [
                {
                    xtype: 'form',
                    reference: 'form1',
                    autoScroll: true,
                    layout: 'column',
                    bodyPadding: 5,
                    title: '#{입찰기본정보}',
                    fieldDefaults: {
                        readOnly: true
                    },
                    tabConfig: {
                        xtype: 'tab',
                        height: '100%'
                    },
                    items: [
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            autoScroll: true,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{공고일반}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tableAttrs: {
                                    style: {
                                        width: '100%'
                                    }
                                },
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '#{공고명}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 100,
                                    bind: {
                                        value: '{bidData.name}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    width: '',
                                    layout: 'table',
                                    fieldLabel: '#{공고번호/차수}',
                                    labelWidth: 140,
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            width: 130,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.no}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            fieldLabel: '',
                                            value: '/'
                                        },
                                        {
                                            xtype: 'textfield',
                                            width: 60,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: center',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.revision}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'datefield',
                                    width: 340,
                                    fieldLabel: '#{공고일자}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.noticeDate}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{공고종류}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 2
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.noticeKind}',
                                                store: '{noticeKindKind}'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            fieldLabel: '',
                                            readOnly: true,
                                            boxLabel: '#{긴급공고}',
                                            bind: {
                                                value: '{bidData.emergencyNoticeYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    width: 340,
                                    layout: 'table',
                                    fieldLabel: '#{상시투찰적용여부}',
                                    labelWidth: 140,
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{적용}',
                                            offText: '#{미적용}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.alwaysAttendYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{국내외구분}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.inOutType}',
                                        store: '{inOutTypeKind}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{통화}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'id',
                                    bind: {
                                        value: '{bidData.currencyCode}',
                                        store: '{currencyCodeStore}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{입찰담당부서}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeDepartmentName}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{입찰담당자}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeName}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{납품장소}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 100,
                                    bind: {
                                        value: '{bidData.deliveryLocation}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{납기}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 100,
                                    bind: {
                                        value: '{bidData.deliveryDueDate}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{계약입찰방식}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tableAttrs: {
                                    style: {
                                        width: '100%'
                                    }
                                },
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{계약방법}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.competitionType}',
                                        store: '{competitionTypeKind}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 2,
                                    reference: 'limitedType',
                                    autoRender: true,
                                    width: 340,
                                    fieldLabel: '#{제한경쟁사유}',
                                    labelWidth: 140,
                                    name: 'limitedType',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.limitedType}',
                                        store: '{limitedTypeKind}'
                                    }
                                },
                                {
                                    xtype: 'tbspacer',
                                    colspan: 2
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{계약구분}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.contractType}',
                                        store: '{contractTypeKind}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    width: 340,
                                    fieldLabel: '#{2단계}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 2
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            margin: '0 5 0 0 ',
                                            width: 100,
                                            fieldLabel: '',
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.twoPhaseType}',
                                                store: '{twoPhaseTypeKind}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    layout: {
                                        type: 'table',
                                        columns: 3,
                                        trAttrs: {
                                            style: {
                                                width: '100%'
                                            }
                                        },
                                        tdAttrs: {
                                            style: {
                                                width: '30%'
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            reference: '',
                                            margin: '0 10 0 0',
                                            width: 340,
                                            fieldLabel: '#{낙찰자결정방법}',
                                            labelWidth: 140,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.bidType}',
                                                store: '{bidTypeKind}'
                                            },
                                            listeners: {
                                                change: 'onComboboxChange'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            reference: 'wishQuantityYn',
                                            hidden: true,
                                            width: 80,
                                            hideLabel: true,
                                            readOnly: true,
                                            boxLabel: '#{희망수량}',
                                            bind: {
                                                value: '{bidData.wishQuantityYn}'
                                            },
                                            listeners: {
                                                change: 'onCheckboxfieldChange1'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            reference: 'smallMediumFirmYn',
                                            hidden: true,
                                            width: 80,
                                            hideLabel: true,
                                            readOnly: true,
                                            boxLabel: '#{중소기업}',
                                            bind: {
                                                value: '{bidData.smallMediumFirmYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'textareafield',
                                    colspan: 2,
                                    height: 150,
                                    width: '100%',
                                    fieldLabel: '#{낙찰자결정방법상세}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.bidTypeDetail}'
                                    }
                                },
                                {
                                    xtype: 'checkboxfield',
                                    reference: 'manySupplyYn',
                                    hidden: true,
                                    fieldLabel: '#{다수공급자입찰}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    boxLabel: '',
                                    bind: {
                                        value: '{bidData.manySupplyYn}'
                                    }
                                },
                                {
                                    xtype: 'etnatogglefield',
                                    fieldLabel: '#{공급구분}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    onText: '#{1회}',
                                    offText: '#{1년}',
                                    onValue: 'Once',
                                    offValue: 'Year',
                                    scale: 'small',
                                    bind: {
                                        hidden: '{!bidData.manySupplyYn}',
                                        value: '{bidData.manySupplyType}'
                                    }
                                },
                                {
                                    xtype: 'etnatogglefield',
                                    colspan: 2,
                                    reference: 'qualifiedItemYn',
                                    fieldLabel: '#{유자격품목구분}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    onText: '#{적용}',
                                    offText: '#{미적용}',
                                    onValue: true,
                                    offValue: false,
                                    scale: 'small',
                                    bind: {
                                        value: '{bidData.qualifiedItemYn}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{공동수급여부}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 4,
                                        tableAttrs: {
                                            style: {
                                                width: '100%'
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{예}',
                                            offText: '#{아니오}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.jointSupplyDemandYn}'
                                            }
                                        },
                                        {
                                            xtype: 'combobox',
                                            margin: '0 5',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                hidden: '{!isJointSupplyDemand}',
                                                value: '{bidData.jointSupplyDemandMethod}',
                                                store: '{jointSupplyDemandMethodKind}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            width: 120,
                                            text: '#{제한 업체수}',
                                            bind: {
                                                hidden: '{!isJointSupplyDemand}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            margin: 0,
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 99,
                                            minValue: 0,
                                            bind: {
                                                hidden: '{!isJointSupplyDemand}',
                                                value: '{bidData.jointSupplyDemandVendorCount}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    reference: 'proposalLimit',
                                    fieldLabel: '#{배점한도}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{기술}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            margin: 0,
                                            width: 70,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            maxValue: 99,
                                            bind: {
                                                value: '{bidData.proposalTechnicalRate}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 5 0 0',
                                            text: ','
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{가격}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            margin: 0,
                                            width: 70,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.proposalPriceRate}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    reference: 'totalEval',
                                    fieldLabel: '#{종합낙찰제평가방법}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 3,
                                        trAttrs: {
                                            style: {
                                                width: '100%'
                                            }
                                        },
                                        tdAttrs: {
                                            style: {
                                                width: '30%'
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            reference: 'totalEvalMethodField',
                                            margin: '0 5 0 0',
                                            width: 195,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.totalEvalMethod}',
                                                store: '{totalEvalMethodKind}'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            reference: 'totalEvalYn',
                                            disabled: true,
                                            margin: '0 5 0 0',
                                            width: 80,
                                            hideLabel: true,
                                            readOnly: true,
                                            boxLabel: '#{종합평가}',
                                            bind: {
                                                value: '{bidData.totalEvalYn}'
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{입찰진행}',
                            layout: {
                                type: 'table',
                                columns: 1
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰참가신청마감일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.bidAttendRequestCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.bidAttendRequestCloseDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            editable: false,
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.bidAttendRequestCloseDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰서제출 시작일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{bidBeginDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.beginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 5 0 0',
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰서제출 마감일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{!specProposalCloseDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.endDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    reference: 'specProposalBeginDate',
                                    fieldLabel: '#{규격서제출 시작일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{specProposalBeginDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.specProposalBeginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalBeginDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalBeginDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 5 0 0',
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    reference: 'specProposalCloseDate',
                                    fieldLabel: '#{규격서제출 마감일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{specProposalCloseDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.specProposalCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalCloseDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalCloseDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    reference: 'openBidDateTime',
                                    hidden: true,
                                    fieldLabel: '#{가격입찰서 개찰일시(예정)}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            name: 'openBidDateTime',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.openBidDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            name: 'openBidDateHour',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.openBidDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            name: 'openBidDateMinute',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.openBidDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'label',
                                    html: '',
                                    style: {
                                        color: 'blue'
                                    },
                                    text: '※ 본 개찰일시는 예정일시로 제안서 평가완료후 확정일시 별도 통보함.',
                                    bind: {
                                        hidden: '{hideOpenBidDateTime}'
                                    }
                                },
                                {
                                    xtype: 'label',
                                    html: '',
                                    text: '※ 개찰일시 : 전자입찰서 제출마감 일시부터 1시간 이후에 개찰.',
                                    bind: {
                                        hidden: '{!hideOpenBidDateTime}'
                                    }
                                },
                                {
                                    xtype: 'label',
                                    text: ' 　　　　　　『전자조달 이용 및 촉진에 관한 법률 시행규칙 제2조 4항 적용』',
                                    bind: {
                                        hidden: '{!hideOpenBidDateTime}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            reference: 'changeReason',
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{정정사유}',
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            bind: {
                                hidden: '{isChangeReasonHidden}'
                            },
                            items: [
                                {
                                    xtype: 'textareafield',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 500,
                                    bind: {
                                        value: '{bidData.changeReason}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{추정정보}',
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    fieldLabel: '#{추정가격(VAT제외)}',
                                    labelWidth: 160,
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if (/[^0-9]/g.test(value)){
                                                    value = value.replace(/[^0-9]/g, '');
                                                }
                                                this.setValue(Number(value));

                                                return true;
                                            },
                                            coverFormat: '0,000',
                                            margin: '0 5 0 0',
                                            width: 190,
                                            fieldLabel: '',
                                            name: 'presumedPrice',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            emptyText: '0',
                                            enforceMaxLength: true,
                                            hideTrigger: true,
                                            maxLength: 18,
                                            selectOnFocus: true,
                                            autoStripChars: true,
                                            maxValue: 99999999999999,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.presumedPrice}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 10 0 0',
                                            text: '#{원}'
                                        },
                                        {
                                            xtype: 'displayfield',
                                            bind: {
                                                value: '{convertPresumedPrice}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    colspan: 2,
                                    reference: 'estimatedPriceField',
                                    defaults: {
                                        labelWidth: 150
                                    },
                                    title: '#{예비가격 기초금액}',
                                    layout: {
                                        type: 'table',
                                        columns: 1
                                    },
                                    items: [
                                        {
                                            xtype: 'toolbar',
                                            colspan: 2,
                                            ui: 'page',
                                            bind: {
                                                hidden: '{isEstimatedPriceAmountEmpty}'
                                            },
                                            items: [
                                                {
                                                    xtype: 'button',
                                                    iconCls: 'btn-search',
                                                    text: '#{품목별 상세조회}',
                                                    listeners: {
                                                        click: 'onSearchItemButtonClick'
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'fieldcontainer',
                                            reference: 'estimatedAmountField',
                                            fieldLabel: '#{기초금액}',
                                            labelWidth: 140,
                                            layout: {
                                                type: 'table',
                                                columns: 4
                                            },
                                            bind: {
                                                hidden: '{isEstimatedPriceAmountEmpty}'
                                            },
                                            items: [
                                                {
                                                    xtype: 'numberfield',
                                                    coverFormat: '0,000.##',
                                                    colspan: 2,
                                                    reference: '',
                                                    width: 195,
                                                    fieldStyle: 'text-align:right',
                                                    readOnly: true,
                                                    bind: {
                                                        value: '{bidData.estimatedPriceAmount}'
                                                    }
                                                },
                                                {
                                                    xtype: 'label',
                                                    margin: '0 5 0 0',
                                                    text: '#{원}'
                                                },
                                                {
                                                    xtype: 'displayfield',
                                                    bind: {
                                                        value: '{convertEstimatedPriceAmount}'
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'fieldcontainer',
                                            reference: 'estimatedAmountSecField',
                                            fieldLabel: '#{기초금액}',
                                            labelWidth: 140,
                                            layout: {
                                                type: 'table',
                                                columns: 3
                                            },
                                            bind: {
                                                hidden: '{!isEstimatedPriceAmountEmpty}'
                                            },
                                            items: [
                                                {
                                                    xtype: 'textfield',
                                                    colspan: 2,
                                                    reference: '',
                                                    width: 195,
                                                    value: '#{미입력}',
                                                    readOnly: true
                                                },
                                                {
                                                    xtype: 'label',
                                                    margin: '0 5 0 0',
                                                    text: '#{원}'
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'textareafield',
                                            colspan: 2,
                                            width: '100%',
                                            fieldLabel: '#{비고}',
                                            labelWidth: 140,
                                            readOnly: true,
                                            bind: {
                                                hidden: '{isManySupply}',
                                                value: '{bidData.estimatedNote}'
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            reference: 'qualifiedEval',
                            hidden: true,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{적격심사정보}',
                            layout: {
                                type: 'table',
                                columns: 1
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{적격심사평가기준}',
                                    labelWidth: 160,
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            margin: '0 20 0 0',
                                            width: 100,
                                            labelWidth: 160,
                                            name: 'qualifiedEvalBasisType',
                                            fieldStyle: '',
                                            readOnly: true,
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.qualifiedEvalBasisType}',
                                                store: '{qualifiedEvalBasisTypeKind}'
                                            },
                                            listeners: {
                                                change: 'onDisplayfieldChange'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            reference: 'moreThanBillion',
                                            hidden: true,
                                            style: {
                                                color: 'red'
                                            },
                                            text: '#{※ 적격심사 세부기준 제 4조 제1항 제1호를 적용(납품실적/기술능력심사)}'
                                        },
                                        {
                                            xtype: 'label',
                                            reference: 'lessThanBillion',
                                            hidden: true,
                                            style: {
                                                color: 'red'
                                            },
                                            text: '#{※ 적격심사 세부기준 제 4조 제1항 제2호를 적용}'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            title: '#{첨부파일}',
                            layout: {
                                type: 'table',
                                columns: 1
                            },
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    ui: 'grid',
                                    width: '100%',
                                    manageHeight: false,
                                    title: '#{자동첨부파일}',
                                    bind: {
                                        store: '{fileItemStore}'
                                    },
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            width: '90%',
                                            dataIndex: 'name',
                                            text: '#{파일명}'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                return value/1024+'KB';
                                            },
                                            width: 100,
                                            align: 'right',
                                            dataIndex: 'size',
                                            text: '#{사이즈}'
                                        }
                                    ],
                                    viewConfig: {
                                        height: 100
                                    },
                                    listeners: {
                                        cellclick: 'onGridpanelCellClick'
                                    }
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    width: '100%',
                                    fieldLabel: '#{붙임서류}',
                                    labelAlign: 'top',
                                    readOnly: true,
                                    autoLoad: true,
                                    bind: {
                                        value: '{bidData.attachFileGroupId}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    reference: 'attendCon'
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{입찰추가사항}',
                            layout: {
                                type: 'vbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    flex: 1,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{계약조건 공시장소}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.mailBidDistribution}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    flex: 1,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{계약착수일 및 완료일}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 100,
                                    bind: {
                                        value: '{bidData.contractBeginEndDate}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    height: 150,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{입찰시 제출서류}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.bidAttendDocument}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    height: 250,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{입찰참가자격}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.bidAttendRestrict}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    height: 260,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{입찰보증금납부 및 귀속}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 3000,
                                    bind: {
                                        value: '{bidData.bidBondBelong}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    height: 100,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{입찰무효사항}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.bidNullification}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    height: 100,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{입찰참가신청서류}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.bidAttendRequestDocument}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    height: 180,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{추가정보제공처}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.moreInformation}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    margins: '0 0 5 0',
                                    height: 300,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{기타공고사항}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.etc}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            columnWidth: 1,
                            stateId: '1f46b062-f3c0-12db-e054-0017a4770c10',
                            stateful: true,
                            height: 160,
                            margin: '0 0 5 0',
                            ui: 'grid',
                            title: '#{입찰시간 변경이력 조회}',
                            bind: {
                                store: '{changeTimeStore}'
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    align: 'center',
                                    dataIndex: 'revision',
                                    text: '#{공고차수}'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'changeTypeName',
                                    text: '#{변경항목}'
                                },
                                {
                                    xtype: 'datecolumn',
                                    width: 140,
                                    align: 'center',
                                    dataIndex: 'beforeDateTime',
                                    text: '#{변경 전}',
                                    format: 'Y/m/d H:i'
                                },
                                {
                                    xtype: 'datecolumn',
                                    width: 140,
                                    align: 'center',
                                    dataIndex: 'afterDateTime',
                                    text: '#{변경 후}',
                                    format: 'Y/m/d H:i'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 200,
                                    dataIndex: 'changeReason',
                                    text: '#{변경사유}'
                                }
                            ],
                            viewConfig: {
                                autoScroll: false
                            },
                            plugins: [
                                {
                                    ptype: 'etnaexport',
                                    useRenderer: true,
                                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                                },
                                {
                                    ptype: 'etnagridblock'
                                },
                                {
                                    ptype: 'etnagridcontext',
                                    contextMenu: true,
                                    advancedContextMenu: false
                                },
                                {
                                    ptype: 'etnagridstateful'
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'form',
                    autoScroll: true,
                    layout: 'column',
                    bodyPadding: 5,
                    title: '#{품목정보}',
                    items: [
                        {
                            xtype: 'fieldcontainer',
                            totalEvalLoading: true,
                            columnWidth: 1,
                            reference: 'targetItem',
                            hidden: true,
                            margin: '0 0 5 0',
                            layout: 'table',
                            fieldLabel: '#{대상품목}',
                            items: [
                                {
                                    xtype: 'combobox',
                                    margin: '0 0 5 0',
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'id',
                                    bind: {
                                        value: '{bidData.targetItem}',
                                        readOnly: '{!isEditable}',
                                        store: '{targetItemCodeStore}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'grid',
                            title: '#{품목정보}',
                            bind: {
                                store: '{bidItemStore}'
                            },
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    ui: 'grid',
                                    items: [
                                        {
                                            xtype: 'tbfill'
                                        }
                                    ]
                                }
                            ],
                            columns: [
                                {
                                    xtype: 'etnastatuscolumn',
                                    width: 50,
                                    align: 'center',
                                    text: '#{상태}',
                                    bind: {
                                        hidden: '{!isEditable}'
                                    }
                                },
                                {
                                    xtype: 'etnaeliminatecolumn',
                                    width: 50,
                                    text: '#{삭제}',
                                    bind: {
                                        hidden: '{!isEditable}'
                                    },
                                    editor: {
                                        xtype: 'checkboxfield'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 100,
                                    align: 'center',
                                    dataIndex: 'itemCode',
                                    text: '#{자재식별번호}'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 200,
                                    dataIndex: 'itemName',
                                    text: '#{품명}'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 300,
                                    dataIndex: 'itemSpec',
                                    text: '#{규격}',
                                    editor: {
                                        xtype: 'textfield'
                                    }
                                },
                                {
                                    xtype: 'etnastorecolumn',
                                    width: 60,
                                    align: 'center',
                                    dataIndex: 'itemUnit',
                                    text: '#{단위}',
                                    valueField: 'value',
                                    displayField: 'text',
                                    bind: {
                                        store: '{unitCodeStore}'
                                    },
                                    editor: {
                                        xtype: 'combobox',
                                        queryMode: 'local',
                                        valueField: 'value',
                                        bind: {
                                            store: '{unitCodeStore}'
                                        }
                                    }
                                },
                                {
                                    xtype: 'numbercolumn',
                                    width: 100,
                                    align: 'right',
                                    dataIndex: 'quantity',
                                    text: '#{수량}',
                                    format: '0,000.###'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 100,
                                    align: 'center',
                                    text: '#{하한~상한 수주율}',
                                    bind: {
                                        hidden: '{hideColumn}'
                                    },
                                    columns: [
                                        {
                                            xtype: 'numbercolumn',
                                            align: 'right',
                                            dataIndex: 'underLimitObtainOrderRate',
                                            text: '#{이상(%)}',
                                            format: '0,000.##'
                                        },
                                        {
                                            xtype: 'numbercolumn',
                                            align: 'right',
                                            dataIndex: 'upperLimitObtainOrderRate',
                                            text: '#{이하(%)}',
                                            format: '0,000.##'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'checkcolumn',
                                    width: 100,
                                    dataIndex: 'basisItemYn',
                                    text: '#{기준품목}',
                                    bind: {
                                        hidden: '{hideColumn}'
                                    },
                                    editor: {
                                        xtype: 'checkboxfield'
                                    }
                                }
                            ],
                            viewConfig: {
                                height: 120
                            },
                            plugins: [
                                {
                                    ptype: 'cellediting',
                                    listeners: {
                                        beforeedit: 'onCellEditingBeforeEdit',
                                        edit: 'onCellEditingEdit'
                                    }
                                },
                                {
                                    ptype: 'etnaexport',
                                    useRenderer: true,
                                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                                },
                                {
                                    ptype: 'etnagridblock'
                                },
                                {
                                    ptype: 'etnagridcontext',
                                    contextMenu: true,
                                    advancedContextMenu: false
                                },
                                {
                                    ptype: 'etnagridstateful'
                                }
                            ],
                            listeners: {
                                selectionchange: 'onGridpanelSelectionChange'
                            }
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{첨부파일}',
                            items: [
                                {
                                    xtype: 'etnaattachmentfield',
                                    anchor: '100%',
                                    reference: 'purchaseSpecAttachFileGroup',
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{구매규격서}',
                                    labelAlign: 'top',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.purchaseSpecAttachFileGroupId}'
                                    }
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    anchor: '100%',
                                    reference: 'specialConditionAtachFileGroup',
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{특수조건}',
                                    labelAlign: 'top',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.specialConditionAttachFileGrpId}'
                                    }
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    anchor: '100%',
                                    reference: 'etcAtachFileGroup',
                                    margin: 0,
                                    fieldLabel: '#{기타첨부}',
                                    labelAlign: 'top',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.etcAttachFileGroupId}'
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'bidannouncementpopuppopupsearchitems',
            reference: 'popupItemSearch'
        }
    ],

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processBidAnnouncementdetailproductBidAnnouncementDetail(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processBidAnnouncementdetailproductBidAnnouncementDetail: function(config) {
        var me = this, items = me.items || config.items;
        items.push(
            {xclass:'Cmmn_Sp_Popup.view.opinionModule.List',
             reference : 'opinionModuleList',
             lazy : true,
             hidden:true,
             autoShow: true,
             columnWidth:1
            }

        );
    }

});

/*
 * File: app/view/bidAnnouncement/detail/service/BidAnnouncementDetailViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetailViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.bidannouncementregistrationctbidtreg',

               
                                   
                                
                               
                                
                          
                          
                               
                                                  
                                     
                                          
                                        
                                       
                                             
                                
                                         
                               
                                   
      

    data: {
        newDate: new Date(),
        isPopup: true,
        bidData: null,
        isEditable: true,
        codeType: '',
        hideOpenBidDate: true,
        hideFieldIntro: true,
        serverTime: Etna.util.Time.getServerTime(),
        isJointSupplyDemand: false,
        hideJointField: true,
        isChangeReasonHidden: true
    },

    stores: {
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        purchaseTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ItemTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            listeners: {
                load: 'onEnumLoad'
            }
        },
        bidTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            listeners: {
                load: 'onEnumLoad1'
            }
        },
        currencyCodeStore: {
            groupCode: 'Currency',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        competitionTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CompetitionTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        estimatedPriceTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.EstimatedPriceTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        vendorAwardTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.VendorAwardTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        jointSupplyDemandMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.JointSupplyDemandMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        noticeKindKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.NoticeKindKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        inOutTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.InOutTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        twoPhaseTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.TwoPhaseTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        collectivelyBidMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CollectivelyBidMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        autoEvalMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.AutoEvalMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        autoEvalTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.AutoEvalTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        constructTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ConstructTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        limitedReasonCodeStore: {
            groupCode: 'limitedReasonCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        purchaseGroupStore: {
            fields: [
                {
                    name: 'id'
                },
                {
                    name: 'name'
                }
            ],
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.cmmn.CommonController.findJobs',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        decimalPointStore: {
            model: 'bid_sp.model.bid.tempModel',
            data: [
                {
                    text: 1,
                    value: 1
                },
                {
                    text: 2,
                    value: 2
                },
                {
                    text: 3,
                    value: 3
                },
                {
                    text: 4,
                    value: 4
                }
            ]
        },
        qualifiedStore: {
            model: 'bid_sp.model.bid.QualifiedCodes',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findQualifiedCodeData',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        licenseStore: {
            model: 'bid_sp.model.bid.LicenseCodes',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findLicenseCodeData',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        regionStore: {
            model: 'bid_sp.model.bid.RegionCodes',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findRegionCodeData',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        changeTimeStore: {
            model: 'bid_sp.model.bid.BidDateTimeChange',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidChangeTimeDetailList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        fileItemStore: {
            model: 'bid_sp.model.bid.FileItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.getFileItemList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        progressStore: {
            model: 'bid_sp.model.bid.ProgressState',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findProgressStateSPList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        }
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                formulas: {
                    bidBeginDate: {
                        get: function(data) {
                            var bidType = data.bidType;
                            var alwaysAttendYn = data.alwaysAttendYn;
                            var twoPhaseType = data.twoPhaseType;

                            if(bidType === 'Nego' || (bidType === 'LowestPrice' && twoPhaseType === 'Separate')){
                                return true;
                            }else if(!bidType){
                                return true;
                            }else {
                                return alwaysAttendYn;
                            }
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            alwaysAttendYn: '{bidData.alwaysAttendYn}',
                            twoPhaseType: '{bidData.twoPhaseType}'
                        }
                    },
                    specProposalBeginDate: {
                        get: function(data) {
                            var bidType = data.bidType;
                            var alwaysAttendYn = data.alwaysAttendYn;
                            var twoPhaseType = data.twoPhaseType;

                            if(bidType === 'Nego' || (bidType === 'LowestPrice' && twoPhaseType === 'Separate')){
                                return alwaysAttendYn;
                            }else {
                                return true;
                            }
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            alwaysAttendYn: '{bidData.alwaysAttendYn}',
                            twoPhaseType: '{bidData.twoPhaseType}'
                        }
                    },
                    specProposalCloseDate: {
                        get: function(data) {
                            var bidType = data.bidType;
                            var twoPhaseType = data.twoPhaseType;

                            if(bidType === 'Nego' || (bidType === 'LowestPrice' && twoPhaseType === 'Separate')){
                                return false;
                            }
                            return true;
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            twoPhaseType: '{bidData.twoPhaseType}'
                        }
                    },
                    specProposalTitle: {
                        get: function(data) {
                            var bidType = data.bidType;
                            var twoPhaseType = data.twoPhaseType;
                            var specProposalBeginDate = me.getView().lookupReference('specProposalBeginDate');
                            var specProposalCloseDate = me.getView().lookupReference('specProposalCloseDate');

                            // [2015.10.29 송헌용] 제안서제출 -> 입찰(제안서) 용어 변경
                            if(bidType === 'Nego'){
                                specProposalBeginDate.setFieldLabel(Ext.String.format('#{입찰(제안서) 시작일시}'));
                                specProposalCloseDate.setFieldLabel(Ext.String.format('#{입찰(제안서) 마감일시}'));
                            } else if(bidType === 'LowestPrice' && twoPhaseType === 'Separate'){
                                specProposalBeginDate.setFieldLabel(Ext.String.format('#{규격서제출 시작일시}'));
                                specProposalCloseDate.setFieldLabel(Ext.String.format('#{규격서제출 마감일시}'));
                            }
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            twoPhaseType: '{bidData.twoPhaseType}'
                        }
                    },
                    convertEstimatedPriceAmount: {
                        get: function(data) {
                            var amount = 0;

                            if(data){
                                amount = data.estimatedPriceAmount;
                            }

                            if(amount > 0){
                                return Ext.String.format('{0} {1}', Ext.util.Format.numberWord(amount), '#{원}');
                            }
                        },
                        bind: {
                            estimatedPriceAmount: '{bidData.estimatedPriceAmount}'
                        }
                    },
                    convertPresumedAmount: {
                        get: function(data) {
                            var amount = 0;
                            if(data){
                                amount = data.presumedAmount;
                            }
                            if(amount > 0){
                                return Ext.String.format('{0} {1}', Ext.util.Format.numberWord(amount), '#{원}');
                            }
                        },
                        bind: {
                            presumedAmount: '{bidData.presumedAmount}'
                        }
                    },
                    convertPresumedPrice: {
                        get: function(data) {
                            var amount = 0;
                            if(data){
                                amount = data.presumedPrice;
                            }
                            if(amount > 0){
                                return Ext.String.format('{0} {1}', Ext.util.Format.numberWord(amount), '#{원}');
                            }
                        },
                        bind: {
                            presumedPrice: '{bidData.presumedPrice}'
                        }
                    }
                }
            };
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    findBid: function(param, type) {

        var deferred = Ext.create('Deft.Deferred');


        smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidBasicInfo(param, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    }

});

/*
 * File: app/view/bidAnnouncement/detail/service/BidAnnouncementDetailViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetailViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.bidannouncementregistrationctbidreg',

    close: function() {
        var me = this, view = this.getView();

                me.clearData();
                //me.expandComponents();
                view.fireEvent('closeDetail');
    },

    loadData: function(param, type) {
        var me = this, view = this.getView(),vm = this.getViewModel();

        vm.set('isPopup',false);
        vm.set('isEditable',false);
        vm.set('isFirst',true);

        Etna.suspendLayouts();

        Etna.onDone(function() {
            me.searchBid(param, type);

            var fileGroupId = 'ConstructionBidFileGroup';
            if(vm.get('bidData.ItemTpye')=='Service'){
                fileGroupId = 'ServiceBidFileGroup';
            }

            var searchParam = {
                bidId 		: param,
                type  		: type,
                fileGroupId	: fileGroupId,
                bidFileType	: 'Bid'
            };

            me.searchChangeTime(searchParam);
            me.codeStoreLoad(searchParam);
            me.searchBidProgress(searchParam);

            var fileItemStore = me.getViewModel().get('fileItemStore');

            fileItemStore.load({
                params: searchParam,
                callback: function(records, operation, success){

                }
            });


            Etna.onDone(function() {
                Etna.deferredFlushLayouts();
                Etna.resumeLayouts(true);
            });
        });
    },

    searchBid: function(param, type) {
        var me = this,
            view = me.getView(),
            vm = this.getViewModel();

        view.setLoading(true);
        vm.findBid(param, type).then({
            success: function(result) {
                vm.set('isJointSupplyDemand', result.jointSupplyDemandYn);
                vm.set('bidData', null);
                vm.set('bidData', me.getDateTime(result));

                me.loadOpinion(vm.get('bidData'));

                if(vm.get('bidData').get('fieldIntroductionYn')){
                    vm.set('hideFieldIntro',false);
                }

                // [2015.10.07 송헌용] 공사 공고상세조회에서 예비가격기초금액 공개
                var estimatedPriceAmountField = me.lookupReference('estimatedPriceAmountField');
                var estimatedPriceAmount = me.getViewModel().get('bidData.estimatedPriceAmount');

                if(!estimatedPriceAmount){//예비가격 기초금액이 없는 경우 미입력으로 나오도록 수정
                    me.getViewModel().set('isEstimatedPriceAmountEmpty', true);
                }else{
                    me.getViewModel().set('isEstimatedPriceAmountEmpty', false);
                }
                estimatedPriceAmountField.setVisible(true);

                if(result.competitionType =='Limited'){
                    me.lookupReference('limitedReasonCode').setVisible(true);
                }else{
                    me.lookupReference('limitedReasonCode').setVisible(false);
                }

                // [2015.10.16 송헌용] 정정사유 보이게 처리
                if(vm.get('bidData.changeReason')) {
                    vm.set('isChangeReasonHidden', false);
                }

                view.updateLayout(true);
                view.setLoading(false);
            },
            failure: function() {
                view.setLoading(false);
            }
        });
    },

    init: function() {
        var me = this,
            view = me.getView();

        me.getView().loadData = Ext.Function.bind(me.loadData, me);
        view.setHiddenKepcoPanel = Ext.Function.bind(me.setHiddenKepcoPanel, me);
    },

    getDateTime: function(param) {
        var me = this,
            vm = this.getViewModel();

        var bidData = Ext.create('bid_sp.model.bid.Bid', param);

        if(bidData.get('noticeDate')) {
            bidData.set('noticeDateHour', bidData.get('noticeDate').getHours());
            bidData.set('noticeDateMinute', bidData.get('noticeDate').getMinutes());
        }

        if(bidData.get('beginDateTime')) {
            bidData.set('beginDateHour', bidData.get('beginDateTime').getHours());
            bidData.set('beginDateMinute', bidData.get('beginDateTime').getMinutes());
        }

        if(bidData.get('endDateTime')) {
            bidData.set('endDateHour', bidData.get('endDateTime').getHours());
            bidData.set('endDateMinute', bidData.get('endDateTime').getMinutes());
        }

        if(bidData.get('bidAttendRequestBeginDateTime')) {
            bidData.set('bidAttendRequestBeginDateHour', bidData.get('bidAttendRequestBeginDateTime').getHours());
            bidData.set('bidAttendRequestBeginDateMinute', bidData.get('bidAttendRequestBeginDateTime').getMinutes());
        }

        if(bidData.get('bidAttendRequestCloseDateTime')) {
            bidData.set('bidAttendRequestCloseDateHour', bidData.get('bidAttendRequestCloseDateTime').getHours());
            bidData.set('bidAttendRequestCloseDateMinute', bidData.get('bidAttendRequestCloseDateTime').getMinutes());
        }

        if(bidData.get('openBidDateTime')) {
            bidData.set('openBidDateHour', bidData.get('openBidDateTime').getHours());
            bidData.set('openBidDateMinute', bidData.get('openBidDateTime').getMinutes());
        }

        if(bidData.get('specEvalCloseDateTime')) {
            bidData.set('specEvalCloseDateHour', bidData.get('specEvalCloseDateTime').getHours());
            bidData.set('specEvalCloseDateMinute', bidData.get('specEvalCloseDateTime').getMinutes());
        }

        if(bidData.get('pqEvalCloseDateTime')) {
            bidData.set('pqEvalCloseDateHour', bidData.get('pqEvalCloseDateTime').getHours());
            bidData.set('pqEvalCloseDateMinute', bidData.get('pqEvalCloseDateTime').getMinutes());
        }

        if(bidData.get('fieldIntroductionBeginDateTime')) {
            bidData.set('fieldIntroductionBeginDateHour', bidData.get('fieldIntroductionBeginDateTime').getHours());
            bidData.set('fieldIntroductionBeginDateMinute', bidData.get('fieldIntroductionBeginDateTime').getMinutes());
        }

        if(bidData.get('fieldIntroductionEndDateTime')) {
            bidData.set('fieldIntroductionEndDateHour', bidData.get('fieldIntroductionEndDateTime').getHours());
            bidData.set('fieldIntroductionEndDateMinute', bidData.get('fieldIntroductionEndDateTime').getMinutes());
        }

        if(!bidData.get("autoAttachFileGroupId")){
            bidData.set("autoAttachFileGroupId",'CodeOfConduct');
            vm.set('bidData',bidData);

        }

        if(bidData.get('specProposalBeginDateTime')) {
            bidData.set('specProposalBeginDateHour', bidData.get('specProposalBeginDateTime').getHours());
            bidData.set('specProposalBeginDateMinute', bidData.get('specProposalBeginDateTime').getMinutes());
        }

        if(bidData.get('specProposalCloseDateTime')) {
            bidData.set('specProposalCloseDateHour', bidData.get('specProposalCloseDateTime').getHours());
            bidData.set('specProposalCloseDateMinute', bidData.get('specProposalCloseDateTime').getMinutes());
        }

        bidData.set('purchaseType', bidData.get('purchaseType'));


        return bidData;
    },

    clearData: function() {
        var me = this, vm = this.getViewModel();
        var changeTimeStore = vm.getStore('changeTimeStore');
        var opinionModuleList = me.lookupReference('opinionModuleList');
        var bidData = Ext.create('bid_sp.model.bid.Bid', null);
        var qualifiedStore = vm.getStore('qualifiedStore');
        var licenseStore = vm.getStore('licenseStore');
        var regionStore = vm.getStore('regionStore');

        vm.set('bidData', bidData);
        vm.set('isFirst',true);
        vm.set('hideOpenBidDate', true);
        vm.set('hideFieldIntro', true);
        vm.set('isJointSupplyDemand', false);
        vm.set('isChangeReasonHidden', true);

        changeTimeStore.removeAll();
        qualifiedStore.removeAll();
        licenseStore.removeAll();
        regionStore.removeAll();

        opinionModuleList.clearData();
        opinionModuleList.setVisible(false);
    },

    codeStoreLoad: function(param) {
        var me = this, view = this.getView(),vm = this.getViewModel();


        var qualifiedStore = vm.getStore('qualifiedStore');

        qualifiedStore.load({
            params: param,
            callback: function(records, operation, success) {

            }
        });

        var licenseStore = vm.getStore('licenseStore');

        licenseStore.load({
            params: param,
            callback: function(records, operation, success) {

            }
        });

        var regionStore = vm.getStore('regionStore');

        regionStore.load({
            params: param,
            callback: function(records, operation, success) {

            }
        });
    },

    getMidnightDate: function(date) {
        var midnightTime = Ext.Date.clone(date);

        midnightTime.setHours(0);
        midnightTime.setMinutes(0);
        midnightTime.setSeconds(0);
        midnightTime.setMilliseconds(0);
        return midnightTime;
    },

    searchChangeTime: function(searchParam) {
        var me = this,
            vm = this.getViewModel();
        var basisItem = vm.get('basisItem');
        var changeTimeStore = vm.getStore('changeTimeStore');

        changeTimeStore.load({
            params: searchParam
        });
    },

    loadOpinion: function(bidData) {
        var me = this,
            vm = me.getViewModel(),
            view = me.getView();

        var form1 = me.lookupReference('form1');

        var opinionModuleList = me.lookupReference('opinionModuleList');

        var popData = {
            announceId	: bidData.get('id'),
            announceNo	: bidData.get('no'),
            announceName: bidData.get('name')
        };

        form1.add(opinionModuleList);
        opinionModuleList.setDefaultValue(popData);
        opinionModuleList.setVisible(true);
    },

    searchBidProgress: function(searchParam) {
        var me = this,
            view = me.getView(),
            vm = this.getViewModel();

        var progressStore = vm.getStore('progressStore');

        progressStore.load({
            params: searchParam
        });
    },

    setHiddenKepcoPanel: function() {
        var me= this;
        me.lookupReference('kepcopanel').setHidden(true);
    },

    showPrintPopup: function() {
        var me = this, vm = this.getViewModel();

        var type = 'ServiceBidAnnounceViewPrintSpForm';

        var w = 780,
            h = 768,
            leftPosition = (screen.width-w)/2,
            topPosition = (screen.height-h)/2;

        window.open('about:blank', 'print', 'location=no, width='+w+',height='+h+',top='+topPosition+',left='+leftPosition+',scrollbars=yes');

        var frm = Site.util.Format.makeForm('print.do', 'POST',  'print');

        frm.appendChild(Site.util.Format.makeInput('hidden', 'documentType', type));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'groupCode'   , 'PrintDocumentType'));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'id'          , vm.get('bidData.id')));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'standardDate' , Ext.util.Format.date(vm.get('bidData.noticeDate'),'Y-m-d')));
        frm.appendChild(Site.util.Format.makeInput('hidden', Ext.query("meta[name='_csrf_parameter']")[0].content,Ext.query("meta[name='_csrf']")[0].content));

        document.body.appendChild(frm);
        frm.submit();
    },

    onRefreshButtonClick: function(button, e, eOpts) {
        var me = this,
            vm = me.getViewModel();

        // [2015.10.13 송헌용] 갱신버튼 추가
        me.loadData(vm.get('bidData.id'), 'Bid');
    },

    onPrintBtnClick: function(button, e, eOpts) {
        var me = this;

        me.showPrintPopup();

    },

    onCloseBtnClick1: function(button, e, eOpts) {
        var me = this,vm = this.getViewModel(), view = this.getView();

        me.clearData();
        me.close();

    },

    onContainerItemClick: function(item) {
        var me = this;
        if(item.urlLink !== 'none'){ //tabUrl이 있는 경우
            var classPath = item.urlLink;

            //modal로 뜨도록 수정 (통테이후 반영예정)
            var popup = Ext.create(classPath, {
                floating : true,
                modal:true,
                title : item.tabTitle,
                bidNo : item.paramNo,
                noticeDate : item.paramNoticeDate,
                companyId : item.companyId,
                width:1024,
                height:768,
                resizable:true,
                draggable:true
            });

            popup.show();
            popup.center();

            //------------------------------------------------------------------tab으로 뜨도록
            //     if (MdiManager.hasView(classPath)) { //기존에 tab이 띄워져있으면 닫음
            //         var view = MdiManager.mdiTab.down(Ext.String.format('>[classpath='+classPath+']'));
            //         MdiManager.mdiTab.remove(view,true);
            //     }
            //     MdiManager.addViewToTab(classPath, { //tab 띄움
            //         title: item.tabTitle,
            //         authKey:  item.menuCode,
            //         bidNo : item.paramNo,
            //         noticeDate : item.paramNoticeDate,
            //         companyId : item.companyId
            //     }, classPath);
        }else if(item.notiMsg !== 'none'){ //화면을 보여주는 것 보다 alert창을 띄워야 하는 경우
            Etna.Message.alert(item.notiMsg);
        }
    },

    onComboboxChange2: function(field, newValue, oldValue, eOpts) {
        if(!newValue) {
            return false;
        }

        var me = this,
            vm = me.getViewModel(),
            presumedAmountField = me.lookupReference('presumedAmountField');

        // [2015.11.03 송헌용] 계약방법에 따른 필드명 및 pq심사여부 제어
        // 배전단가
        if(newValue === 'DistributorPrice') {
            presumedAmountField.setFieldLabel(Ext.String.format('#{가상설계금액(VAT별도)}'));
            // 배전감리전문업체
        } else if(newValue === 'DistributorPriceInspectionCompany') {
            presumedAmountField.setFieldLabel(Ext.String.format('#{가상설계금액(VAT별도)}'));
        } else {
            presumedAmountField.setFieldLabel(Ext.String.format('#{추정금액(VAT포함)}'));
        }
    },

    onComboboxChange1: function(field, newValue, oldValue, eOpts) {
        var me = this,
            view = me.getView(),
            vm = me.getViewModel();
        var proposalSubmitMethod = me.lookupReference('proposalSubmitMethod');//제안서제출방법

        proposalSubmitMethod.setVisible(false);
        if(newValue=='Nego'){
            //협상
            proposalSubmitMethod.setVisible(true);
            vm.set('hideOpenBidDate', false);
        }else if(newValue=='QualifiedEval'){
            //종합평가
            vm.set('hideOpenBidDate', true);
        }else if(newValue=='LowestPrice'){
            //최저가
            vm.set('hideOpenBidDate', true);
        }else if(newValue=='CollectivelyBid'){
            //일괄입찰
            vm.set('hideOpenBidDate', false);
        }

        // Etna.deferredFlushLayouts();
    },

    onGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {

    },

    onEnumLoad: function(store, records, successful, eOpts) {
        var me = this,
            vm = this.getViewModel();

        if(successful) {
            store.filter([
            {
                filterFn: function(record) {
                    return record.get('value')!=='Product';
                }
            }
            ]);
        }
    },

    onEnumLoad1: function(store, records, successful, eOpts) {
        var me = this,
            vm = this.getViewModel();

        if(successful) {
            store.filter([
            {
                filterFn: function(record) {
                    if(record.get('value')!=='LimitedLowestPrice' && record.get('value')!=='TotalEval' && record.get('value')!=='TwoPhase'){
                        return record.get('value');
                    }

                }
            }
            ]);
        }
    }

});

/*
 * File: app/view/bidAnnouncement/detail/service/BidAnnouncementDetail.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetail', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.bidannouncementdetailservicebidannouncementdetail',

               
                                                                                    
                                                                                         
                              
                           
                        
                         
                      
                                  
                                 
                                  
                                 
                             
                         
                                
                            
                                  
                              
                         
                        
                                  
                                 
                                   
                                    
                                     
                              
      

    controller: 'bidannouncementregistrationctbidreg',
    viewModel: {
        type: 'bidannouncementregistrationctbidtreg'
    },
    data: {
        
    },
    ui: 'main',
    title: '#{공사용역입찰신규등록}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'page',
            items: [
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    itemId: 'refreshButton',
                    iconCls: 'btn-refresh',
                    text: '#{갱신}',
                    listeners: {
                        click: 'onRefreshButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-print',
                    text: '#{인쇄}',
                    listeners: {
                        click: 'onPrintBtnClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseBtnClick1'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'kepcopanel',
            collapsible: true,
            reference: 'kepcopanel',
            height: 150,
            bind: {
                store: '{progressStore}'
            },
            listeners: {
                itemClick: 'onContainerItemClick'
            }
        },
        {
            xtype: 'tabpanel',
            flex: 1,
            reference: 'bidTabPanel',
            cls: 'nbr',
            activeTab: 0,
            plain: true,
            layout: {
                type: 'card',
                deferredRender: false
            },
            items: [
                {
                    xtype: 'form',
                    reference: 'form1',
                    autoScroll: true,
                    layout: 'column',
                    bodyPadding: 5,
                    title: '#{입찰기본정보}',
                    items: [
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 5,
                            collapsible: true,
                            title: '#{공고일반}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tableAttrs: {
                                    style: {
                                        width: '100%'
                                    }
                                },
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '#{공고명}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 100,
                                    bind: {
                                        value: '{bidData.name}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    width: 340,
                                    layout: 'table',
                                    fieldLabel: '#{공고번호/차수}',
                                    labelWidth: 150,
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            width: 130,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.no}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            fieldLabel: '',
                                            value: '/'
                                        },
                                        {
                                            xtype: 'textfield',
                                            width: 60,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: center',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.revision}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{공고부서}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.contractRequestDepartmentName}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    width: 340,
                                    fieldLabel: '#{공고종류}',
                                    labelWidth: 150,
                                    layout: {
                                        type: 'table',
                                        columns: 1
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            margin: '0 5 0 0',
                                            width: 185,
                                            hideLabel: true,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.noticeKind}',
                                                store: '{noticeKindKind}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    width: 340,
                                    layout: 'table',
                                    fieldLabel: '#{상시투찰적용여부}',
                                    labelWidth: 150,
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{적용}',
                                            offText: '#{미적용}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.alwaysAttendYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{국내외구분}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.inOutType}',
                                        store: '{inOutTypeKind}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{통화}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'id',
                                    bind: {
                                        value: '{bidData.currencyCode}',
                                        store: '{currencyCodeStore}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{입찰담당부서}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeDepartmentName}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{입찰담당자}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeName}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{계약입찰방식}',
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{계약방법}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.competitionType}',
                                        store: '{competitionTypeKind}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{계약구분}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.contractType}',
                                        store: '{contractTypeKind}'
                                    },
                                    listeners: {
                                        change: 'onComboboxChange2'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 2,
                                    reference: 'limitedReasonCode',
                                    autoRender: true,
                                    width: '100%',
                                    fieldLabel: '#{제한사유}',
                                    labelWidth: 150,
                                    name: 'limitedReasonCode',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'id',
                                    bind: {
                                        value: '{bidData.limitedReasonCode}',
                                        store: '{limitedReasonCodeStore}'
                                    }
                                },
                                {
                                    xtype: 'tbspacer',
                                    colspan: 2
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{2단계}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.twoPhaseType}',
                                        store: '{twoPhaseTypeKind}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'bidTypeCombo',
                                    width: 340,
                                    fieldLabel: '#{낙찰자결정방법}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.bidType}',
                                        store: '{bidTypeKind}'
                                    },
                                    listeners: {
                                        change: 'onComboboxChange1'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 2,
                                    width: 340,
                                    fieldLabel: '#{일괄입찰유형}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        hidden: '{hideOpenBidDate}',
                                        value: '{bidData.collectivelyBidMethod}',
                                        store: '{collectivelyBidMethodKind}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 1,
                                    fieldLabel: '#{공동수급여부}',
                                    labelWidth: 150,
                                    layout: {
                                        type: 'table',
                                        columns: 4
                                    },
                                    items: [
                                        {
                                            xtype: 'fieldcontainer',
                                            margin: '0 5 0 0',
                                            layout: 'table',
                                            fieldLabel: '',
                                            labelWidth: 150,
                                            items: [
                                                {
                                                    xtype: 'etnatogglefield',
                                                    readOnly: true,
                                                    onText: '#{예}',
                                                    offText: '#{아니오}',
                                                    onValue: true,
                                                    offValue: false,
                                                    scale: 'small',
                                                    bind: {
                                                        value: '{bidData.jointSupplyDemandYn}'
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'combobox',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '#{공동수급방법}',
                                            hideLabel: true,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                hidden: '{!isJointSupplyDemand}',
                                                value: '{bidData.jointSupplyDemandMethod}',
                                                store: '{jointSupplyDemandMethodKind}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{제한업체수}',
                                            bind: {
                                                hidden: '{!isJointSupplyDemand}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            margin: 0,
                                            width: 50,
                                            fieldLabel: '#{공동수급업체수}',
                                            hideLabel: true,
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 99,
                                            minValue: 0,
                                            bind: {
                                                hidden: '{!isJointSupplyDemand}',
                                                value: '{bidData.jointSupplyDemandVendorCount}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 1,
                                    reference: 'proposalSubmitMethod',
                                    hidden: true,
                                    width: 340,
                                    layout: 'table',
                                    fieldLabel: '#{제안서제출방법}',
                                    labelWidth: 150,
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{ON-LINE}',
                                            offText: '#{OFF-LINE}',
                                            onValue: 'Online',
                                            offValue: 'Offline',
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.proposalSubmitMethod}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    colspan: 2,
                                    title: '#{배점한도}',
                                    layout: {
                                        type: 'table',
                                        columns: 2,
                                        tableAttrs: {
                                            style: {
                                                width: '100%'
                                            }
                                        },
                                        tdAttrs: {
                                            style: {
                                                width: '50%'
                                            }
                                        }
                                    },
                                    bind: {
                                        hidden: '{hideOpenBidDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfield',
                                            width: 320,
                                            fieldLabel: '#{기술능력평가 배점한도}',
                                            labelWidth: 180,
                                            readOnly: true,
                                            hideTrigger: true,
                                            bind: {
                                                value: '{bidData.proposalTechnicalRate}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            width: 320,
                                            fieldLabel: '#{입찰가격평가 배점한도}',
                                            labelWidth: 180,
                                            readOnly: true,
                                            hideTrigger: true,
                                            bind: {
                                                value: '{bidData.proposalPriceRate}'
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            reference: 'changeReason',
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{정정사유}',
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            bind: {
                                hidden: '{isChangeReasonHidden}'
                            },
                            items: [
                                {
                                    xtype: 'textareafield',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 500,
                                    bind: {
                                        value: '{bidData.changeReason}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{입찰진행}',
                            layout: {
                                type: 'table',
                                columns: 1
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    width: 340,
                                    layout: 'table',
                                    fieldLabel: '#{PQ심사여부}',
                                    labelWidth: 220,
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{예}',
                                            offText: '#{아니오}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.pqEvalYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{공고일자}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.noticeDate}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.noticeDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.noticeDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{PQ심사접수마감일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{!bidData.pqEvalYn}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.pqEvalCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.pqEvalCloseDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.pqEvalCloseDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰참가신청시작일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.bidAttendRequestBeginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.bidAttendRequestBeginDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.bidAttendRequestBeginDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰참가신청마감일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.bidAttendRequestCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.bidAttendRequestCloseDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.bidAttendRequestCloseDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰서제출 시작일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 11
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.beginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 5 0 0',
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰서제출 마감일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 11
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.endDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    reference: 'specProposalBeginDate',
                                    fieldLabel: '#{규격서제출 시작일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{specProposalBeginDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.specProposalBeginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalBeginDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalBeginDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 5 0 0',
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    reference: 'specProposalCloseDate',
                                    fieldLabel: '#{규격서제출 마감일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{specProposalCloseDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.specProposalCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalCloseDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalCloseDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{가격입찰서 개찰일시(예정)}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{hideOpenBidDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.openBidDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.openBidDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.openBidDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'label',
                                    colspan: 2,
                                    margin: '5 0',
                                    text: '#{※ 개찰일시 : 전자입찰서 제출마감 일시부터 1시간 이후에 개찰}',
                                    bind: {
                                        hidden: '{!hideOpenBidDate}'
                                    }
                                },
                                {
                                    xtype: 'label',
                                    colspan: 2,
                                    margin: '5 0',
                                    style: {
                                        'text-align': 'center'
                                    },
                                    width: '100%',
                                    text: '#{『전자조달의 이용 및 촉진에 관한 법률 시행 규칙 제\2조 4항 적용』}',
                                    bind: {
                                        hidden: '{!hideOpenBidDate}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{투찰제한}',
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    colspan: 2,
                                    stateId: '1f46b062-f3c6-12db-e054-0017a4770c10',
                                    stateful: true,
                                    margin: '0 0 5 0',
                                    ui: 'grid',
                                    header: false,
                                    title: 'My Grid Panel',
                                    bind: {
                                        store: '{qualifiedStore}'
                                    },
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            width: 250,
                                            dataIndex: 'qualifiedQualificationCodeName',
                                            text: '#{적격자격명}'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 150,
                                            dataIndex: 'etc',
                                            menuDisabled: true,
                                            text: '#{m(미터)}'
                                        }
                                    ],
                                    viewConfig: {
                                        height: 70
                                    },
                                    plugins: [
                                        {
                                            ptype: 'etnaexport',
                                            useRenderer: true,
                                            defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                                        },
                                        {
                                            ptype: 'etnagridblock'
                                        },
                                        {
                                            ptype: 'etnagridcontext',
                                            contextMenu: true,
                                            advancedContextMenu: false
                                        },
                                        {
                                            ptype: 'etnagridstateful'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'gridpanel',
                                    colspan: 2,
                                    stateId: '1f46b062-f3c7-12db-e054-0017a4770c10',
                                    stateful: true,
                                    margin: '0 0 5 0',
                                    ui: 'grid',
                                    header: false,
                                    title: 'My Grid Panel',
                                    bind: {
                                        store: '{licenseStore}'
                                    },
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            width: 250,
                                            dataIndex: 'licenseQualificationCodeName',
                                            text: '#{면허자격명}'
                                        }
                                    ],
                                    viewConfig: {
                                        height: 70
                                    },
                                    plugins: [
                                        {
                                            ptype: 'etnaexport',
                                            useRenderer: true,
                                            defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                                        },
                                        {
                                            ptype: 'etnagridblock'
                                        },
                                        {
                                            ptype: 'etnagridcontext',
                                            contextMenu: true,
                                            advancedContextMenu: false
                                        },
                                        {
                                            ptype: 'etnagridstateful'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'gridpanel',
                                    colspan: 2,
                                    stateId: '1f46b062-f3c7-12db-e054-0017a4770c10',
                                    stateful: true,
                                    margin: '0 0 5 0',
                                    ui: 'grid',
                                    header: false,
                                    title: 'My Grid Panel',
                                    bind: {
                                        store: '{regionStore}'
                                    },
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            width: 150,
                                            dataIndex: 'areaCodeName',
                                            text: '#{지역명}'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 150,
                                            dataIndex: 'subAreaCodeName',
                                            text: '#{관할구역}'
                                        }
                                    ],
                                    viewConfig: {
                                        height: 70
                                    },
                                    plugins: [
                                        {
                                            ptype: 'etnaexport',
                                            useRenderer: true,
                                            defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                                        },
                                        {
                                            ptype: 'etnagridblock'
                                        },
                                        {
                                            ptype: 'etnagridcontext',
                                            contextMenu: true,
                                            advancedContextMenu: false
                                        },
                                        {
                                            ptype: 'etnagridstateful'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{추정가격}',
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    reference: 'presumedAmountField',
                                    fieldLabel: '#{추정금액(VAT포함)}',
                                    labelWidth: 160,
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfield',
                                            coverFormat: '0,000',
                                            margin: '0 5 0 0',
                                            width: 160,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            emptyText: '0',
                                            enforceMaxLength: true,
                                            hideTrigger: true,
                                            maxLength: 18,
                                            selectOnFocus: true,
                                            autoStripChars: true,
                                            decimalPrecision: 4,
                                            maxValue: 99999999999999,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.presumedAmount}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 5 0 0',
                                            text: '#{원}'
                                        },
                                        {
                                            xtype: 'displayfield',
                                            bind: {
                                                value: '{convertPresumedAmount}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    fieldLabel: '#{추정가격(VAT별도)}',
                                    labelWidth: 160,
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfield',
                                            coverFormat: '0,000',
                                            margin: '0 5 0 0',
                                            width: 160,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            emptyText: '0',
                                            enforceMaxLength: true,
                                            hideTrigger: true,
                                            maxLength: 18,
                                            selectOnFocus: true,
                                            autoStripChars: true,
                                            decimalPrecision: 4,
                                            maxValue: 99999999999999,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.presumedPrice}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 5 0 0',
                                            text: '#{원}'
                                        },
                                        {
                                            xtype: 'displayfield',
                                            bind: {
                                                value: '{convertPresumedPrice}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    colspan: 2,
                                    reference: 'estimatedPriceAmountField',
                                    defaults: {
                                        labelWidth: 150
                                    },
                                    title: '#{예비가격 기초금액}',
                                    layout: {
                                        type: 'table',
                                        columns: 1
                                    },
                                    items: [
                                        {
                                            xtype: 'fieldcontainer',
                                            reference: 'estimatedAmountField',
                                            fieldLabel: '#{기초금액}',
                                            layout: {
                                                type: 'table',
                                                columns: 3
                                            },
                                            bind: {
                                                hidden: '{isEstimatedPriceAmountEmpty}'
                                            },
                                            items: [
                                                {
                                                    xtype: 'numberfield',
                                                    coverFormat: '0,000.##',
                                                    width: 160,
                                                    fieldStyle: 'text-align:right',
                                                    readOnly: true,
                                                    bind: {
                                                        value: '{bidData.estimatedPriceAmount}'
                                                    }
                                                },
                                                {
                                                    xtype: 'label',
                                                    text: '#{원}'
                                                },
                                                {
                                                    xtype: 'displayfield',
                                                    bind: {
                                                        value: '{convertEstimatedPriceAmount}'
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'fieldcontainer',
                                            reference: 'estimatedAmountSecField',
                                            fieldLabel: '#{기초금액}',
                                            layout: {
                                                type: 'table',
                                                columns: 2
                                            },
                                            bind: {
                                                hidden: '{!isEstimatedPriceAmountEmpty}'
                                            },
                                            items: [
                                                {
                                                    xtype: 'textfield',
                                                    width: 195,
                                                    value: '#{미입력}',
                                                    readOnly: true
                                                },
                                                {
                                                    xtype: 'label',
                                                    text: '#{원}'
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'textareafield',
                                            colspan: 2,
                                            width: '100%',
                                            fieldLabel: '#{비고}',
                                            readOnly: true,
                                            bind: {
                                                hidden: '{isManySupply}',
                                                value: '{bidData.estimatedNote}'
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{현장설명회}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tableAttrs: {
                                    style: {
                                        width: '100%'
                                    }
                                },
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            bind: {
                                hidden: '{hideFieldIntro}'
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    width: '100%',
                                    layout: 'table',
                                    fieldLabel: '#{현장설명참석}',
                                    labelWidth: 180,
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{의무사항}',
                                            offText: '#{의무사항아님}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.bidAttendRequestYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'textfield',
                                    width: 360,
                                    fieldLabel: '#{현장입찰 실시장소 및 시간}',
                                    labelWidth: 180,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.fieldIntroductionLocation}'
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    width: 360,
                                    fieldLabel: '#{현장설명회일자}',
                                    labelWidth: 180,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.fieldIntroductionBeginDateTime}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '#{현장설명회시간}',
                                    labelWidth: 180,
                                    layout: {
                                        type: 'table',
                                        columns: 11
                                    },
                                    items: [
                                        {
                                            xtype: 'fieldcontainer',
                                            colspan: 11,
                                            layout: 'table',
                                            fieldLabel: '',
                                            items: [
                                                {
                                                    xtype: 'numberfield',
                                                    validator: function(value) {
                                                        if(Number(value) > 23) {
                                                            value = 0;
                                                        } else if(value < 0) {
                                                            value = 0;
                                                        }

                                                        this.setValue(value);

                                                        return true;
                                                    },
                                                    margin: '0 2 0 0',
                                                    width: 50,
                                                    fieldLabel: '',
                                                    readOnly: true,
                                                    emptyText: '0',
                                                    decimalPrecision: 0,
                                                    maxValue: 23,
                                                    minValue: 0,
                                                    bind: {
                                                        value: '{bidData.fieldIntroductionBeginDateHour}'
                                                    }
                                                },
                                                {
                                                    xtype: 'label',
                                                    margin: '0 2 0 0',
                                                    text: '#{시}'
                                                },
                                                {
                                                    xtype: 'numberfield',
                                                    validator: function(value) {
                                                        if(Number(value) > 59) {
                                                            value = 0;
                                                        } else if(value < 0) {
                                                            value = 0;
                                                        }

                                                        this.setValue(value);

                                                        return true;
                                                    },
                                                    margin: '0 2 0 0',
                                                    width: 50,
                                                    fieldLabel: '',
                                                    readOnly: true,
                                                    emptyText: '0',
                                                    decimalPrecision: 0,
                                                    maxValue: 59,
                                                    minValue: 0,
                                                    bind: {
                                                        value: '{bidData.fieldIntroductionBeginDateMinute}'
                                                    }
                                                },
                                                {
                                                    xtype: 'label',
                                                    margin: '0 5 0 0',
                                                    text: '#{분}'
                                                },
                                                {
                                                    xtype: 'label',
                                                    margin: '0 5 0 0',
                                                    text: '~'
                                                },
                                                {
                                                    xtype: 'numberfield',
                                                    validator: function(value) {
                                                        if(Number(value) > 23) {
                                                            value = 0;
                                                        } else if(value < 0) {
                                                            value = 0;
                                                        }

                                                        this.setValue(value);

                                                        return true;
                                                    },
                                                    margin: '0 2 0 0',
                                                    width: 50,
                                                    fieldLabel: '',
                                                    readOnly: true,
                                                    emptyText: '0',
                                                    decimalPrecision: 0,
                                                    maxValue: 23,
                                                    minValue: 0,
                                                    bind: {
                                                        value: '{bidData.fieldIntroductionEndDateHour}'
                                                    }
                                                },
                                                {
                                                    xtype: 'label',
                                                    margin: '0 2 0 0',
                                                    text: '#{시}'
                                                },
                                                {
                                                    xtype: 'numberfield',
                                                    validator: function(value) {
                                                        if(Number(value) > 59) {
                                                            value = 0;
                                                        } else if(value < 0) {
                                                            value = 0;
                                                        }

                                                        this.setValue(value);

                                                        return true;
                                                    },
                                                    margin: '0 2 0 0',
                                                    width: 50,
                                                    fieldLabel: '',
                                                    readOnly: true,
                                                    emptyText: '0',
                                                    decimalPrecision: 0,
                                                    maxValue: 59,
                                                    minValue: 0,
                                                    bind: {
                                                        value: '{bidData.fieldIntroductionEndDateMinute}'
                                                    }
                                                },
                                                {
                                                    xtype: 'label',
                                                    margin: 0,
                                                    text: '#{분}'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsed: false,
                            collapsible: true,
                            title: '#{입찰추가사항}',
                            layout: {
                                type: 'vbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    flex: 1,
                                    margin: '0 0 10 0',
                                    ui: 'grid',
                                    title: '#{자동첨부파일}',
                                    bind: {
                                        store: '{fileItemStore}'
                                    },
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            width: '90%',
                                            dataIndex: 'name',
                                            text: '#{파일명}'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                return value/1024+'KB';
                                            },
                                            width: 100,
                                            dataIndex: 'size',
                                            text: '#{사이즈}'
                                        }
                                    ],
                                    viewConfig: {
                                        height: 100
                                    },
                                    listeners: {
                                        cellclick: 'onGridpanelCellClick'
                                    }
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    width: '100%',
                                    fieldLabel: '#{첨부파일}',
                                    labelAlign: 'top',
                                    readOnly: true,
                                    autoLoad: true,
                                    bind: {
                                        value: '{bidData.attachFileGroupId}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    height: 150,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{입찰참가자격}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 4000,
                                    bind: {
                                        value: '{bidData.bidAttendRestrict}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    fieldLabel: '#{기타}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 1000,
                                    bind: {
                                        value: '{bidData.etc}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    fieldLabel: '#{참고사항}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 1000,
                                    bind: {
                                        value: '{bidData.note}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    reference: 'attendCon'
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            columnWidth: 1,
                            stateId: '1f46b062-f3c8-12db-e054-0017a4770c10',
                            stateful: true,
                            height: 160,
                            margin: '0 0 5 0',
                            ui: 'grid',
                            title: '#{입찰시간 변경이력 조회}',
                            bind: {
                                store: '{changeTimeStore}'
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    align: 'center',
                                    dataIndex: 'revision',
                                    text: '#{공고차수}'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'changeTypeName',
                                    text: '#{변경항목}'
                                },
                                {
                                    xtype: 'datecolumn',
                                    width: 140,
                                    align: 'center',
                                    dataIndex: 'beforeDateTime',
                                    text: '#{변경 전}',
                                    format: 'Y/m/d H:i'
                                },
                                {
                                    xtype: 'datecolumn',
                                    width: 140,
                                    align: 'center',
                                    dataIndex: 'afterDateTime',
                                    text: '#{변경 후}',
                                    format: 'Y/m/d H:i'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 200,
                                    dataIndex: 'changeReason',
                                    text: '#{변경사유}'
                                }
                            ],
                            viewConfig: {
                                autoScroll: false
                            },
                            plugins: [
                                {
                                    ptype: 'etnaexport',
                                    useRenderer: true,
                                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                                },
                                {
                                    ptype: 'etnagridblock'
                                },
                                {
                                    ptype: 'etnagridcontext',
                                    contextMenu: true,
                                    advancedContextMenu: false
                                },
                                {
                                    ptype: 'etnagridstateful'
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processBidAnnouncementdetailserviceBidAnnouncementDetail(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processBidAnnouncementdetailserviceBidAnnouncementDetail: function(config) {
        var me = this, items = me.items || config.items;

        items.push(
            {
                xclass:'Cmmn_Sp_Popup.view.opinionModule.List',
                reference : 'opinionModuleList',
                lazy : true,
                hidden:true,
                autoShow: true,
                columnWidth:1
            }
        );
    }

});

/*
 * File: app/view/foreignBidAnnouncement/detail/product/ForeignBidAnnouncementDetailViewModel1.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetailViewModel1', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.foreignbidannouncementdetailproductforeignbidannouncementdetail',

               
                                   
                                
                               
                                
                          
                          
                          
                               
                                                      
                                       
                                    
                                                 
                                         
                                  
      

    data: {
        newDate: new Date(),
        isPopup: true,
        bidData: null,
        isEditable: true,
        isFirst: true,
        totalEvalType: true,
        basisItem: [
            
        ],
        hideOpenBidDateTime: true,
        serverTime: Etna.util.Time.getServerTime(),
        isManySupply: false,
        hideColumn: true,
        isJointSupplyDemand: false,
        hideJointField: true,
        isChangeReasonHidden: true
    },

    stores: {
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        purchaseTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ItemTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        bidTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            listeners: {
                load: 'onEnumLoad'
            }
        },
        currencyCodeStore: {
            groupCode: 'Currency',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        competitionTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CompetitionTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            listeners: {
                load: 'onEnumLoad1'
            }
        },
        contractMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        estimatedPriceTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.EstimatedPriceTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        vendorAwardTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.VendorAwardTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        jointSupplyDemandMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.JointSupplyDemandMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            filters: {
                filterFn: function(item) {
                    var status = item.get('value');
                    var agreeStatus = ['General', 'Price'];
                    if(Ext.Array.contains(agreeStatus, status) === true){
                        return item;
                    }
                }
            }
        },
        noticeKindKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.NoticeKindKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        inOutTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.InOutTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            filters: {
                filterFn: function(item) {
                    if(item.get('value') !== 'In'){
                        return item;
                    }
                }
            }
        },
        twoPhaseTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.TwoPhaseTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        collectivelyBidMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CollectivelyBidMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        totalEvalMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.TotalEvalMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        limitedTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.LimitedTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        qualifiedEvalBasisTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.QualifiedEvalBasisTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        qualifiedItemTypeKind: {
            enumType: 'smartsuit.app.sim.qualifieditem.domain.enums.QualifiedItemTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        limitedReasonCodeStore: {
            groupCode: 'limitedReasonCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        designationReasonCodeStore: {
            groupCode: 'designationReasonCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        targetItemCodeStore: {
            groupCode: 'targetItem',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        unitCodeStore: {
            groupCode: 'Unit',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    mapping: 'id',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        vendorAttendRistrictStore: {
            data: [
                {
                    text: '등록외품목',
                    value: true
                },
                {
                    text: '등록품목',
                    value: false
                }
            ],
            fields: [
                {
                    name: 'text'
                },
                {
                    name: 'value'
                }
            ]
        },
        concessionTypeKindStore: {
            data: [
                {
                    text: '양허',
                    value: 'Concession'
                },
                {
                    text: '비양허',
                    value: 'NonConcession'
                }
            ],
            fields: [
                {
                    name: 'text'
                },
                {
                    name: 'value'
                }
            ]
        },
        bidItemStore: {
            model: 'bid_sp.model.foreign.BidItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.foreign.sp.ForeignBidDetailController.findBidItems',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        changeTimeStore: {
            model: 'bid_sp.model.foreign.BidDateTimeChange',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.foreign.sp.ForeignBidDetailController.findBidChangeTimeDetailList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        progressStore: {
            model: 'bid_sp.model.bid.ProgressState',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.foreign.sp.ForeignBidDetailController.findProgressStateSPList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        transTypeStore: {
            groupCode: 'transTypeCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        }
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                formulas: {
                    bidBeginDate: {
                        get: function(data) {
                            // 입찰서제출 시작일시 제어
                            // 2016.01.13. KJY. 상시투찰 여부와 상관없이 입찰시작일시 조회

                            var bidType = data.bidType;
                            var alwaysAttendYn = data.alwaysAttendYn;
                            var twoPhaseType = data.twoPhaseType;
                            var manySupplyYn = data.manySupplyYn;

                            if(bidType === 'Nego' || (bidType === 'LowestPrice' && (twoPhaseType === 'Separate' || twoPhaseType === 'Concurrent'))){
                                return true;
                            }else if(!bidType){
                                return true;
                            }else {
                                return false;
                            }
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            alwaysAttendYn: '{bidData.alwaysAttendYn}',
                            twoPhaseType: '{bidData.twoPhaseType}',
                            manySupplyYn: '{bidData.manySupplyYn}'
                        }
                    },
                    specProposalBeginDate: {
                        get: function(data) {
                            // 2016.01.13. KJY. 상시투찰 여부와 상관없이 입찰시작일시 조회

                            var bidType = data.bidType;
                            var alwaysAttendYn = data.alwaysAttendYn;
                            var twoPhaseType = data.twoPhaseType;

                            if(bidType === 'Nego' || (bidType === 'LowestPrice' && (twoPhaseType === 'Separate' || twoPhaseType === 'Concurrent'))){
                                return false;
                            }else {
                                return true;
                            }
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            alwaysAttendYn: '{bidData.alwaysAttendYn}',
                            twoPhaseType: '{bidData.twoPhaseType}'
                        }
                    },
                    specProposalCloseDate: {
                        get: function(data) {
                            var bidType = data.bidType;
                            var twoPhaseType = data.twoPhaseType;

                            if(bidType === 'Nego' || (bidType === 'LowestPrice' && (twoPhaseType === 'Separate' || twoPhaseType === 'Concurrent'))){
                                return false;
                            }
                            return true;
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            twoPhaseType: '{bidData.twoPhaseType}'
                        }
                    },
                    specProposalTitle: {
                        get: function(data) {
                            var bidType = data.bidType;
                            var twoPhaseType = data.twoPhaseType;
                            var specProposalBeginDate = me.getView().lookupReference('specProposalBeginDate');
                            var specProposalCloseDate = me.getView().lookupReference('specProposalCloseDate');

                            if(bidType === 'Nego'){
                                specProposalBeginDate.setFieldLabel(Ext.String.format('#{제안서제출 시작일시}'));
                                specProposalCloseDate.setFieldLabel(Ext.String.format('#{제안서제출 마감일시}'));
                            } else if((bidType === 'LowestPrice' && (twoPhaseType === 'Separate' || twoPhaseType === 'Concurrent')) ||
                            bidType === 'TotalEval' && twoPhaseType === 'Separate'){
                                // 2016.01.12. KJY. 2단계 동시일때 필드명 변경. (규격서제출 -> 입찰서/규격서제출)
                                if(bidType === 'LowestPrice' && twoPhaseType === 'Concurrent'){
                                    specProposalBeginDate.setFieldLabel(Ext.String.format('#{입찰서/규격서제출 시작일시}'));
                                    specProposalCloseDate.setFieldLabel(Ext.String.format('#{입찰서/규격서제출 마감일시}'));
                                }else{
                                    specProposalBeginDate.setFieldLabel(Ext.String.format('#{규격서제출 시작일시}'));
                                    specProposalCloseDate.setFieldLabel(Ext.String.format('#{규격서제출 마감일시}'));
                                }
                            }
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            twoPhaseType: '{bidData.twoPhaseType}'
                        }
                    },
                    convertPresumedPrice: {
                        get: function(data) {
                            var amount = 0;

                            if(data){
                                amount = data.presumedPrice;
                            }

                            if(amount > 0){
                                return Ext.String.format('{0} {1}', Ext.util.Format.numberWord(amount), '#{원}');
                            }
                        },
                        bind: {
                            presumedPrice: '{bidData.presumedPrice}'
                        }
                    },
                    convertEstimatedPriceAmount: {
                        get: function(data) {
                            var amount = 0;

                            if(data){
                                amount = data.estimatedPriceAmount;
                            }

                            if(amount > 0){
                                return Ext.String.format('{0} {1}', Ext.util.Format.numberWord(amount), '#{원}');
                            }
                        },
                        bind: {
                            estimatedPriceAmount: '{bidData.estimatedPriceAmount}'
                        }
                    },
                    isSideEquipment: {
                        get: function(data) {
                            // 2016.01.13. KJY. 유형구분(SideEquipment : 보조기기, ForeignCapital : 외자)
                            if(data == 'SideEquipment'){
                                return true;
                            }else{
                                return false;
                            }
                        },
                        bind: '{bidData.inOutType}'
                    }
                }
            };
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    findBid: function(param, type) {
        var deferred = Ext.create('Deft.Deferred');


        smartsuit.ui.etnajs.pro.foreign.sp.ForeignBidDetailController.findBidBasicInfo(param, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    }

});

/*
 * File: app/view/foreignBidAnnouncement/detail/product/ForeignBidAnnouncementDetailViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetailViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.foreignbidannouncementdetailproductforeignbidannouncementdetail',

    loadData: function(param, type) {
        var me = this, view = this.getView(),vm = this.getViewModel();

        vm.set('isPopup',false);
        vm.set('isEditable',false);
        vm.set('isFirst',true);

        Etna.suspendLayouts();

        view.setLoading(true);
        Etna.onDone(function() {
            me.searchBid(param, type);

            var searchParam = {
                bidId : param,
                type  : type
            };

            me.searchChangeTime(searchParam);
            me.searchBidItems(searchParam);
            me.searchBidProgress(searchParam);

            Etna.onDone(function() {
                Etna.deferredFlushLayouts();
                Etna.resumeLayouts(true);
            });
        });
    },

    close: function() {
        var me = this, view = me.getView();

        me.clearData();
        //me.expandComponents();
        view.fireEvent('closeDetail');
    },

    searchBid: function(param, type) {
        var me = this,
            view = this.getView(),
            vm = this.getViewModel();

        view.setLoading(true);
        vm.findBid(param, type).then({
            success: function(result) {
                vm.set('isJointSupplyDemand', result.jointSupplyDemandYn);
                vm.set('bidData', null);
                vm.set('bidData', me.getDateTime(result));
                me.loadOpinion(vm.get('bidData'));

                // [2015.10.16 송헌용] 정정사유 보이게 처리
                if(vm.get('bidData.changeReason')) {
                    vm.set('isChangeReasonHidden', false);
                }

                me.getView().setLoading(false);
            },
            failure: function() {
                me.getView().setLoading(false);
            }
        });
    },

    init: function() {
        var me = this,
            view = me.getView();

        me.getView().loadData = Ext.Function.bind(me.loadData, me);
        view.setHiddenKepcoPanel = Ext.Function.bind(me.setHiddenKepcoPanel, me);
    },

    getDateTime: function(param) {
        var me = this;

        var bidData = Ext.create('bid_sp.model.foreign.Bid', param);

        if(bidData.get('beginDateTime')) {
            bidData.set('beginDateHour', bidData.get('beginDateTime').getHours());
            bidData.set('beginDateMinute', bidData.get('beginDateTime').getMinutes());
        }

        if(bidData.get('endDateTime')) {
            bidData.set('endDateHour', bidData.get('endDateTime').getHours());
            bidData.set('endDateMinute', bidData.get('endDateTime').getMinutes());
        }
        // 2016.01.13. KJY. 입찰참가시작일시 추가
        if(bidData.get('bidAttendRequestBeginDateTime')) {
            bidData.set('bidAttendRequestBeginDateHour', bidData.get('bidAttendRequestBeginDateTime').getHours());
            bidData.set('bidAttendRequestBeginDateMinute', bidData.get('bidAttendRequestBeginDateTime').getMinutes());
        }
        if(bidData.get('bidAttendRequestCloseDateTime')) {
            bidData.set('bidAttendRequestCloseDateHour', bidData.get('bidAttendRequestCloseDateTime').getHours());
            bidData.set('bidAttendRequestCloseDateMinute', bidData.get('bidAttendRequestCloseDateTime').getMinutes());
        }

        if(bidData.get('openBidDateTime')) {
            bidData.set('openBidDateHour', bidData.get('openBidDateTime').getHours());
            bidData.set('openBidDateMinute', bidData.get('openBidDateTime').getMinutes());
        }

        if(bidData.get('specEvalCloseDateTime')) {
            bidData.set('specEvalCloseDateHour', bidData.get('specEvalCloseDateTime').getHours());
            bidData.set('specEvalCloseDateMinute', bidData.get('specEvalCloseDateTime').getMinutes());
        }

        if(bidData.get('specProposalBeginDateTime')) {
            bidData.set('specProposalBeginDateHour', bidData.get('specProposalBeginDateTime').getHours());
            bidData.set('specProposalBeginDateMinute', bidData.get('specProposalBeginDateTime').getMinutes());
        }

        if(bidData.get('specProposalCloseDateTime')) {
            bidData.set('specProposalCloseDateHour', bidData.get('specProposalCloseDateTime').getHours());
            bidData.set('specProposalCloseDateMinute', bidData.get('specProposalCloseDateTime').getMinutes());
        }

        bidData.set('purchaseType', bidData.get('purchaseType'));
        bidData.set('itemType', bidData.get('itemType'));

        // [2015.10.16 송헌용] 자동첨부 추가
        if(!bidData.get("autoAttachFileGroupId")){
            bidData.set("autoAttachFileGroupId",'CodeOfConduct');
        }

        // 2016.01.19. KJY. hs코드 추가
        bidData.set('hsCode', me.getHsCode(bidData));

        return bidData;
    },

    clearData: function() {
        var me = this, vm = this.getViewModel();
        var tabPanel = me.lookupReference('tabPanel');
        var changeTimeStore = vm.getStore('changeTimeStore');

        changeTimeStore.removeAll();
        var bidData = Ext.create('bid_sp.model.foreign.Bid', null);
        vm.set('totalEvalType', false);
        vm.set('bidData', bidData);
        vm.set('isFirst',true);
        vm.set('basisItem', []);
        vm.set('isManySupply', false);
        vm.set('hideColumn', true);
        vm.set('isJointSupplyDemand', false);
        vm.set('isChangeReasonHidden', true);
        tabPanel.setActiveTab(0);
    },

    searchBidItems: function(searchParam) {
        var me = this,
            vm = this.getViewModel();
        var basisItem = vm.get('basisItem');
        var itemStore = vm.getStore('bidItemStore');

        itemStore.load({
            params: searchParam,
            callback: function(records, operation, success) {
                itemStore.each(function(record){
                   if(record.get('basisItemYn') === true){
                       basisItem.push(record.get('id'));
                   }
                });
                if(basisItem.length === 0 && itemStore.first() !== null){
                    basisItem.push(itemStore.first().getId());
                    itemStore.first().set('basisItemYn', true);
                }
            }
        });
    },

    getMidnightDate: function(date) {
        var midnightTime = Ext.Date.clone(date);

        midnightTime.setHours(0);
        midnightTime.setMinutes(0);
        midnightTime.setSeconds(0);
        midnightTime.setMilliseconds(0);
        return midnightTime;
    },

    searchChangeTime: function(searchParam) {
        var me = this,
            vm = this.getViewModel();
        var basisItem = vm.get('basisItem');
        var changeTimeStore = vm.getStore('changeTimeStore');

        changeTimeStore.load({
            params: searchParam
        });
    },

    loadOpinion: function(bidData) {
        var me = this,
            vm = me.getViewModel(),
            view = me.getView();

        var form1 = me.lookupReference('form1');

        var opinionModuleList = me.lookupReference('opinionModuleList');

        var popData = {
            announceId	: bidData.get('id'),
            announceNo	: bidData.get('no'),
            announceName: bidData.get('name')
        };

        form1.add(opinionModuleList);
        opinionModuleList.setDefaultValue(popData);
        opinionModuleList.setVisible(true);
    },

    searchBidProgress: function(searchParam) {
        var me = this,
            view = me.getView(),
            vm = this.getViewModel();

        var progressStore = vm.getStore('progressStore');

        progressStore.load({
            params: searchParam
        });
    },

    setHiddenKepcoPanel: function() {
        var me= this;
        me.lookupReference('kepcopanel').setHidden(true);
    },

    getHsCode: function(bidData) {
        var me = this,
            vm = me.getViewModel();

        var hsCodeStr = bidData.get('hsCode');
        var returnHsCode = null;

        if(!!hsCodeStr){
            var hsCodePrefix = hsCodeStr.substring(0, 4);

            // 2016.01.19. KJY. 코드의 자리수를 10개로 셋팅
            if(hsCodePrefix == '9999'){
                returnHsCode = hsCodeStr.substring(4);
            }else{
                returnHsCode = hsCodeStr;
            }
        }

        return returnHsCode;
    },

    onButtonClick: function(button, e, eOpts) {
        var me = this,
            vm = me.getViewModel();

        // [2015.10.13 송헌용] 갱신버튼 추가
        me.loadData(vm.get('bidData.id'), 'Bid');
    },

    onPrintButtonClick: function(button, e, eOpts) {
        var me = this,
            vm = this.getViewModel(),
            bidData = vm.get('bidData');

        var w = 780,
            h = 768,
            leftPosition = (screen.width-w)/2,
            topPosition = (screen.height-h)/2;

        window.open('about:blank', 'print', 'location=no, width='+w+',height='+h+',top='+topPosition+',left='+leftPosition+',scrollbars=yes');

        var frm = Site.util.Format.makeForm('print.do', 'POST',  'print');
        frm.appendChild(Site.util.Format.makeInput('hidden', 'documentType', 'ProductBidAnnouncementPrint'));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'groupCode'   , 'PrintDocumentType'));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'id'          , bidData.get('id')));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'standardDate' , Ext.util.Format.date(bidData.get('noticeDate'),'Y-m-d')));
        frm.appendChild(Site.util.Format.makeInput('hidden', Ext.query("meta[name='_csrf_parameter']")[0].content,Ext.query("meta[name='_csrf']")[0].content));
        document.body.appendChild(frm);

        frm.submit();
    },

    onCloseBtnClick: function(button, e, eOpts) {
        var me = this;
        me.close();
    },

    onContainerItemClick: function(item) {
        var me = this;
        if(item.urlLink !== 'none'){ //tabUrl이 있는 경우
            var classPath = item.urlLink;

            //modal로 뜨도록 수정 (통테이후 반영예정)
            var popup = Ext.create(classPath, {
                floating : true,
                modal:true,
                title : item.tabTitle,
                bidNo : item.paramNo,
                noticeDate : item.paramNoticeDate,
                companyId : item.companyId,
                width:1024,
                height:768,
                resizable:true,
                draggable:true
            });

            popup.show();
            popup.center();

            //------------------------------------------------------------------tab으로 뜨도록
            //     if (MdiManager.hasView(classPath)) { //기존에 tab이 띄워져있으면 닫음
            //         var view = MdiManager.mdiTab.down(Ext.String.format('>[classpath='+classPath+']'));
            //         MdiManager.mdiTab.remove(view,true);
            //     }
            //     MdiManager.addViewToTab(classPath, { //tab 띄움
            //         title: item.tabTitle,
            //         authKey:  item.menuCode,
            //         bidNo : item.paramNo,
            //         noticeDate : item.paramNoticeDate,
            //         companyId : item.companyId
            //     }, classPath);
        }else if(item.notiMsg !== 'none'){ //화면을 보여주는 것 보다 alert창을 띄워야 하는 경우
            Etna.Message.alert(item.notiMsg);
        }
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {

        var me = this,
            view = me.getView(),
            vm = me.getViewModel();

        var targetItem = me.lookupReference('targetItem');
        var smallMediumFirmYn = me.lookupReference('smallMediumFirmYn');
        var qualifiedEval = me.lookupReference('qualifiedEval');
        var wishQuantityYn = me.lookupReference('wishQuantityYn');
        var manySupplyYn = me.lookupReference('manySupplyYn');
        var openBidDateTime = me.lookupReference('openBidDateTime');
        var serverTime = Ext.Date.clone(vm.get('serverTime'));
        var bidData = me.getViewModel().get('bidData');
        var estimatedPriceField = me.lookupReference('estimatedPriceField');
        var estimatedAmountField = me.lookupReference('estimatedAmountField');
        var estimatedAmountSecField = me.lookupReference('estimatedAmountSecField');
        var estimatedPriceFieldFlag = false;
        var estimatedAmountFieldLabel = '기초금액';
        var estimatedPriceFieldTitle = '예비가격 기초금액';
        var proposalLimit = me.lookupReference('proposalLimit');
        var totalEval = me.lookupReference('totalEval');

        if(newValue=='LowestPrice'){
            //최저가
            qualifiedEval.setVisible(false);
            wishQuantityYn.setVisible(true);
            smallMediumFirmYn.setVisible(false);
            targetItem.setVisible(false);
            manySupplyYn.setVisible(false);
            openBidDateTime.setVisible(false);
            proposalLimit.setVisible(false);
            totalEval.setVisible(false);

        }else if(newValue=='QualifiedEval'){
            //적격심사
            qualifiedEval.setVisible(true);
            wishQuantityYn.setVisible(false);
            smallMediumFirmYn.setVisible(true);
            targetItem.setVisible(false);
            manySupplyYn.setVisible(true);
            openBidDateTime.setVisible(false);
            proposalLimit.setVisible(false);
            totalEval.setVisible(false);

            estimatedPriceFieldFlag = bidData.get('estimatedPriceOpenYn');
            if(bidData.get('manySupplyYn')){//적격심사이면서 다수공급자입찰인 경우
                estimatedPriceFieldTitle = '입찰관련 참고사항';
                estimatedAmountFieldLabel = '예정가격 (VAT 포함)';
            }

        }else if(newValue=='TotalEval'){
            //종합평가
            qualifiedEval.setVisible(false);
            wishQuantityYn.setVisible(true);
            smallMediumFirmYn.setVisible(false);
            targetItem.setVisible(true);
            manySupplyYn.setVisible(false);
            openBidDateTime.setVisible(false);
            proposalLimit.setVisible(false);
            totalEval.setVisible(true);

        }else if(newValue=='Nego'){
            //협상
            qualifiedEval.setVisible(false);
            wishQuantityYn.setVisible(false);
            smallMediumFirmYn.setVisible(false);
            targetItem.setVisible(false);
            manySupplyYn.setVisible(false);
            openBidDateTime.setVisible(true);
            proposalLimit.setVisible(true);
            estimatedPriceFieldFlag = bidData.get('estimatedPriceOpenYn');
            totalEval.setVisible(false);

        }

        if(me.getViewModel().get('bidData.noticeKind') === 'ElectronicOpenPrivate'){//전자공개수의인 경우
            estimatedPriceFieldFlag = bidData.get('estimatedPriceOpenYn');
        }

        var estimatedPriceAmount = me.getViewModel().get('bidData.estimatedPriceAmount');
        if(!estimatedPriceAmount){//예비가격 기초금액이 없는 경우 미입력으로 나오도록 수정
            me.getViewModel().set('isEstimatedPriceAmountEmpty', true);
        }else{
            me.getViewModel().set('isEstimatedPriceAmountEmpty', false);
        }
        me.getViewModel().set('isManySupply', bidData.get('manySupplyYn'));
        estimatedAmountSecField.setFieldLabel(estimatedAmountFieldLabel);
        estimatedAmountField.setFieldLabel(estimatedAmountFieldLabel);
        estimatedPriceField.setVisible(estimatedPriceFieldFlag);
        estimatedPriceField.setTitle(estimatedPriceFieldTitle);
        // Etna.deferredFlushLayouts();
    },

    onCheckboxfieldChange1: function(field, newValue, oldValue, eOpts) {
        var me = this,
            vm = me.getViewModel();
        if(newValue){
            vm.set('hideColumn',false);

        } else {
            vm.set('hideColumn',true);
        }
    },

    onSearchItemButtonClick: function(button, e, eOpts) {
        var me = this;
        var bidData = me.getViewModel().get('bidData');
        var popup = me.lookupReference('popupItemSearch');

        popup.show();
        popup.center();
        popup.load(bidData);
    },

    onDisplayfieldChange: function(field, newValue, oldValue, eOpts) {
        var me = this,
            vm = me.getViewModel();

        if (newValue === 'MoreThanBasis'){
            me.lookupReference('moreThanBillion').setVisible(true);
            me.lookupReference('lessThanBillion').setVisible(false);
        } else if(newValue === 'LessThanBasis'){
            me.lookupReference('moreThanBillion').setVisible(false);
            me.lookupReference('lessThanBillion').setVisible(true);
        }
        // Etna.deferredFlushLayouts();
    },

    onCellEditingBeforeEdit: function(editor, context, eOpts) {
        var me = this,
            vm = this.getViewModel();

        var dataIndex = context.column.dataIndex;
        var record = context.record;
        var basisItems = vm.get('basisItem');
        var bidItemStore = vm.getStore('bidItemStore');

        if(vm.get('isEditable')) {
            if( dataIndex == 'basisItemYn' && !context.record.get('basisItemYn') ){
                basisItems.forEach(function(basisItem){
                    bidItemStore.getById(basisItem).set('basisItemYn', false);
                });
                vm.set('basisItem', []);
                vm.get('basisItem').push(context.record.get('id'));
            } else if (dataIndex == 'basisItemYn' && context.record.get('basisItemYn')){
                return false;
            }
            //     if(dataIndex==='quantity' || dataIndex==='eliminated') {
            //         return true;
            //     }
            return true;
        }
        return false;
    },

    onCellEditingEdit: function(editor, context, eOpts) {
        var me = this,
            vm = this.getViewModel();

        var field = context.field;
        var record = context.record;

        /*if(field == 'quantity' || field == 'estimatedPrice'){
        record.set('estimatedAmount', record.get('quantity') * record.get('estimatedPrice'));
        }

        var totalAmount = 0;
        var itemStore = vm.getStore('bidItemStore');

        itemStore.each(function(item){
        if(!item.get('eliminated')) {
        totalAmount += item.get('estimatedAmount');
        }
        });

        vm.get('bidData').set('budgetAmount', totalAmount);*/
    },

    onGridpanelSelectionChange: function(model, selected, eOpts) {
        var me = this,
            vm = this.getViewModel();

        if(selected.length) {
            //vm.set('itemGridBtnDisabled', false);
        } else {
            //vm.set('itemGridBtnDisabled', true);
        }
    },

    onEnumLoad: function(store, records, successful, eOpts) {
        var me = this,
            vm = this.getViewModel();

        if(successful) {
            store.filter([
            {
                filterFn: function(record) {
                    if(record.get('value')!=='LimitedLowestPrice' && record.get('value')!=='CollectivelyBid' && record.get('value')!=='TwoPhase'){
                        return record.get('value');
                    }

                }
            }
            ]);
        }
    },

    onEnumLoad1: function(store, records, successful, eOpts) {
        var me = this,
            vm = this.getViewModel();

        if(successful) {
            store.filter([
            {
                filterFn: function(record) {
                    return record.get('value')!=='Private';
                }
            }
            ]);
        }
    }

});

/*
 * File: app/view/foreignBidAnnouncement/detail/product/ForeignBidAnnouncementDetail.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetail', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.foreignbidannouncementdetailproductforeignbidannouncementdetail',

               
                                                                                                   
                                                                                                       
                                                             
                              
                         
                           
                        
                         
                      
                                  
                                 
                              
                                  
                                  
                                 
                                  
                                
                            
                                     
                         
                               
                        
                                  
                                 
                                   
                                    
                                  
                                     
                                 
                                 
                                
                                     
      

    controller: 'foreignbidannouncementdetailproductforeignbidannouncementdetail',
    viewModel: {
        type: 'foreignbidannouncementdetailproductforeignbidannouncementdetail'
    },
    ui: 'main',
    title: '#{자재입찰공고상세}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'page',
            items: [
                {
                    xtype: 'label',
                    text: '#{자재입찰 공고내역을 조회합니다.}'
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-refresh',
                    text: '#{갱신}',
                    listeners: {
                        click: 'onButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-print',
                    text: '#{인쇄}',
                    bind: {
                        hidden: '{isEditable}'
                    },
                    listeners: {
                        click: 'onPrintButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseBtnClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'kepcopanel',
            collapsible: true,
            reference: 'kepcopanel',
            height: 150,
            bind: {
                store: '{progressStore}'
            },
            listeners: {
                itemClick: 'onContainerItemClick'
            }
        },
        {
            xtype: 'tabpanel',
            flex: 1,
            reference: 'tabPanel',
            cls: 'nbr',
            overlapHeader: false,
            activeTab: 0,
            layout: {
                type: 'card',
                deferredRender: false
            },
            items: [
                {
                    xtype: 'form',
                    reference: 'form1',
                    autoScroll: true,
                    layout: 'column',
                    bodyPadding: 5,
                    title: '#{입찰기본정보}',
                    fieldDefaults: {
                        readOnly: true
                    },
                    tabConfig: {
                        xtype: 'tab',
                        height: '100%'
                    },
                    items: [
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            autoScroll: true,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{공고일반}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tableAttrs: {
                                    style: {
                                        width: '100%'
                                    }
                                },
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '#{공고명}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 100,
                                    bind: {
                                        value: '{bidData.name}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    width: '',
                                    layout: 'table',
                                    fieldLabel: '#{공고번호/차수}',
                                    labelWidth: 140,
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            width: 130,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.no}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            fieldLabel: '',
                                            value: '/'
                                        },
                                        {
                                            xtype: 'textfield',
                                            width: 60,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: center',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.revision}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'datefield',
                                    width: 340,
                                    fieldLabel: '#{공고일자}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.noticeDate}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{공고종류}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 2
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.noticeKind}',
                                                store: '{noticeKindKind}'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            fieldLabel: '',
                                            readOnly: true,
                                            boxLabel: '#{긴급공고}',
                                            bind: {
                                                value: '{bidData.emergencyNoticeYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    width: 340,
                                    layout: 'table',
                                    fieldLabel: '#{상시투찰적용여부}',
                                    labelWidth: 140,
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{적용}',
                                            offText: '#{미적용}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.alwaysAttendYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{국내외구분}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.inOutType}',
                                        store: '{inOutTypeKind}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{통화}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'id',
                                    bind: {
                                        value: '{bidData.currencyCode}',
                                        store: '{currencyCodeStore}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{입찰담당부서}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeDepartmentName}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{입찰담당자}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeName}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{납품장소}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 100,
                                    bind: {
                                        value: '{bidData.deliveryLocation}'
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    width: 340,
                                    fieldLabel: '#{최초납기}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 100,
                                    bind: {
                                        value: '{bidData.forienDeliveryDueDate}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{HS코드}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        hidden: '{isSideEquipment}',
                                        value: '{bidData.hsCode}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{운송조건}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'id',
                                    bind: {
                                        value: '{bidData.transType}',
                                        store: '{transTypeStore}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{계약입찰방식}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tableAttrs: {
                                    style: {
                                        width: '100%'
                                    }
                                },
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{계약방법}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.competitionType}',
                                        store: '{competitionTypeKind}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{계약구분}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.contractType}',
                                        store: '{contractTypeKind}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    width: 340,
                                    fieldLabel: '#{2단계}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 2
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            margin: '0 5 0 0 ',
                                            width: 100,
                                            fieldLabel: '',
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.twoPhaseType}',
                                                store: '{twoPhaseTypeKind}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    layout: {
                                        type: 'table',
                                        columns: 2,
                                        trAttrs: {
                                            style: {
                                                width: '100%'
                                            }
                                        },
                                        tdAttrs: {
                                            style: {
                                                width: '30%'
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            reference: '',
                                            margin: '0 10 0 0',
                                            width: 340,
                                            fieldLabel: '#{낙찰자결정방법}',
                                            labelWidth: 140,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.bidType}',
                                                store: '{bidTypeKind}'
                                            },
                                            listeners: {
                                                change: 'onComboboxChange'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            reference: 'wishQuantityYn',
                                            hidden: true,
                                            width: 80,
                                            hideLabel: true,
                                            readOnly: true,
                                            boxLabel: '#{희망수량}',
                                            bind: {
                                                value: '{bidData.wishQuantityYn}'
                                            },
                                            listeners: {
                                                change: 'onCheckboxfieldChange1'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            reference: 'smallMediumFirmYn',
                                            hidden: true,
                                            width: 80,
                                            hideLabel: true,
                                            readOnly: true,
                                            boxLabel: '#{중소기업}',
                                            bind: {
                                                value: '{bidData.smallMediumFirmYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'textareafield',
                                    colspan: 2,
                                    height: 150,
                                    width: '100%',
                                    fieldLabel: '#{낙찰자결정방법상세}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.bidTypeDetail}'
                                    }
                                },
                                {
                                    xtype: 'checkboxfield',
                                    reference: 'manySupplyYn',
                                    hidden: true,
                                    fieldLabel: '#{다수공급자입찰}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    boxLabel: '',
                                    bind: {
                                        value: '{bidData.manySupplyYn}'
                                    }
                                },
                                {
                                    xtype: 'etnatogglefield',
                                    fieldLabel: '#{공급구분}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    onText: '#{1회}',
                                    offText: '#{1년}',
                                    onValue: 'Once',
                                    offValue: 'Year',
                                    scale: 'small',
                                    bind: {
                                        hidden: '{!bidData.manySupplyYn}',
                                        value: '{bidData.manySupplyType}'
                                    }
                                },
                                {
                                    xtype: 'etnatogglefield',
                                    colspan: 2,
                                    fieldLabel: '#{유자격품목구분}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    onText: '#{적용}',
                                    offText: '#{미적용}',
                                    onValue: true,
                                    offValue: false,
                                    scale: 'small',
                                    bind: {
                                        value: '{bidData.qualifiedItemYn}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{공동수급여부}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 4,
                                        tableAttrs: {
                                            style: {
                                                width: '100%'
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{예}',
                                            offText: '#{아니오}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.jointSupplyDemandYn}'
                                            }
                                        },
                                        {
                                            xtype: 'combobox',
                                            margin: '0 5',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                hidden: '{!isJointSupplyDemand}',
                                                value: '{bidData.jointSupplyDemandMethod}',
                                                store: '{jointSupplyDemandMethodKind}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            width: 120,
                                            text: '#{제한 업체수}',
                                            bind: {
                                                hidden: '{!isJointSupplyDemand}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            margin: 0,
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 99,
                                            minValue: 0,
                                            bind: {
                                                hidden: '{!isJointSupplyDemand}',
                                                value: '{bidData.jointSupplyDemandVendorCount}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    reference: 'proposalLimit',
                                    fieldLabel: '#{배점한도}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{기술}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            margin: 0,
                                            width: 70,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            maxValue: 99,
                                            bind: {
                                                value: '{bidData.proposalTechnicalRate}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 5 0 0',
                                            text: ','
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{가격}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            margin: 0,
                                            width: 70,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.proposalPriceRate}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    reference: 'totalEval',
                                    fieldLabel: '#{종합낙찰제평가방법}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 3,
                                        trAttrs: {
                                            style: {
                                                width: '100%'
                                            }
                                        },
                                        tdAttrs: {
                                            style: {
                                                width: '30%'
                                            }
                                        }
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            reference: 'totalEvalMethodField',
                                            margin: '0 5 0 0',
                                            width: 195,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.totalEvalMethod}',
                                                store: '{totalEvalMethodKind}'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            reference: 'totalEvalYn',
                                            disabled: true,
                                            margin: '0 5 0 0',
                                            width: 80,
                                            hideLabel: true,
                                            readOnly: true,
                                            boxLabel: '#{종합평가}',
                                            bind: {
                                                value: '{bidData.totalEvalYn}'
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{입찰진행}',
                            layout: {
                                type: 'table',
                                columns: 1
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰참가신청시작일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.bidAttendRequestBeginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 24,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.bidAttendRequestBeginDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.bidAttendRequestBeginDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰참가신청마감일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.bidAttendRequestCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.bidAttendRequestCloseDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            editable: false,
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.bidAttendRequestCloseDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰서제출 시작일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{bidBeginDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.beginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 5 0 0',
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰서제출 마감일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{!specProposalCloseDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.endDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    reference: 'specProposalBeginDate',
                                    fieldLabel: '#{규격서제출 시작일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{specProposalBeginDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.specProposalBeginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalBeginDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalBeginDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 5 0 0',
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    reference: 'specProposalCloseDate',
                                    fieldLabel: '#{규격서제출 마감일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{specProposalCloseDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.specProposalCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalCloseDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalCloseDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    reference: 'openBidDateTime',
                                    hidden: true,
                                    fieldLabel: '#{가격입찰서 개찰일시(예정)}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            name: 'openBidDateTime',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.openBidDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            name: 'openBidDateHour',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.openBidDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            name: 'openBidDateMinute',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.openBidDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'label',
                                    html: '',
                                    style: {
                                        color: 'blue'
                                    },
                                    text: '※ 본 개찰일시는 예정일시로 제안서 평가완료후 확정일시 별도 통보함.',
                                    bind: {
                                        hidden: '{hideOpenBidDateTime}'
                                    }
                                },
                                {
                                    xtype: 'label',
                                    html: '',
                                    text: '※ 개찰일시 : 전자입찰서 제출마감 일시부터 1시간 이후에 개찰.',
                                    bind: {
                                        hidden: '{!hideOpenBidDateTime}'
                                    }
                                },
                                {
                                    xtype: 'label',
                                    text: ' 　　　　　　『전자조달 이용 및 촉진에 관한 법률 시행규칙 제2조 4항 적용』',
                                    bind: {
                                        hidden: '{!hideOpenBidDateTime}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            reference: 'changeReason',
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{정정사유}',
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            bind: {
                                hidden: '{isChangeReasonHidden}'
                            },
                            items: [
                                {
                                    xtype: 'textareafield',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 500,
                                    bind: {
                                        value: '{bidData.changeReason}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{추정정보}',
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    hidden: true,
                                    fieldLabel: '#{추정가격(VAT제외)}',
                                    labelWidth: 160,
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if (/[^0-9]/g.test(value)){
                                                    value = value.replace(/[^0-9]/g, '');
                                                }
                                                this.setValue(Number(value));

                                                return true;
                                            },
                                            coverFormat: '0,000',
                                            margin: '0 5 0 0',
                                            width: 190,
                                            fieldLabel: '',
                                            name: 'presumedPrice',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            emptyText: '0',
                                            enforceMaxLength: true,
                                            hideTrigger: true,
                                            maxLength: 18,
                                            selectOnFocus: true,
                                            autoStripChars: true,
                                            maxValue: 99999999999999,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.presumedPrice}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 10 0 0',
                                            text: '#{원}'
                                        },
                                        {
                                            xtype: 'displayfield',
                                            bind: {
                                                value: '{convertPresumedPrice}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    colspan: 2,
                                    reference: 'estimatedPriceField',
                                    defaults: {
                                        labelWidth: 150
                                    },
                                    title: '#{예비가격 기초금액}',
                                    layout: {
                                        type: 'table',
                                        columns: 1
                                    },
                                    items: [
                                        {
                                            xtype: 'toolbar',
                                            colspan: 2,
                                            ui: 'page',
                                            bind: {
                                                hidden: '{isEstimatedPriceAmountEmpty}'
                                            },
                                            items: [
                                                {
                                                    xtype: 'button',
                                                    iconCls: 'btn-search',
                                                    text: '#{품목별 상세조회}',
                                                    listeners: {
                                                        click: 'onSearchItemButtonClick'
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'fieldcontainer',
                                            reference: 'estimatedAmountField',
                                            fieldLabel: '#{기초금액}',
                                            labelWidth: 140,
                                            layout: {
                                                type: 'table',
                                                columns: 4
                                            },
                                            bind: {
                                                hidden: '{isEstimatedPriceAmountEmpty}'
                                            },
                                            items: [
                                                {
                                                    xtype: 'numberfield',
                                                    coverFormat: '0,000.##',
                                                    colspan: 2,
                                                    reference: '',
                                                    width: 195,
                                                    fieldStyle: 'text-align:right',
                                                    readOnly: true,
                                                    bind: {
                                                        value: '{bidData.estimatedPriceAmount}'
                                                    }
                                                },
                                                {
                                                    xtype: 'label',
                                                    margin: '0 5 0 0',
                                                    text: '#{원}'
                                                },
                                                {
                                                    xtype: 'displayfield',
                                                    bind: {
                                                        value: '{convertEstimatedPriceAmount}'
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'fieldcontainer',
                                            reference: 'estimatedAmountSecField',
                                            fieldLabel: '#{기초금액}',
                                            labelWidth: 140,
                                            layout: {
                                                type: 'table',
                                                columns: 3
                                            },
                                            bind: {
                                                hidden: '{!isEstimatedPriceAmountEmpty}'
                                            },
                                            items: [
                                                {
                                                    xtype: 'textfield',
                                                    colspan: 2,
                                                    reference: '',
                                                    width: 195,
                                                    value: '#{미입력}',
                                                    readOnly: true
                                                },
                                                {
                                                    xtype: 'label',
                                                    margin: '0 5 0 0',
                                                    text: '#{원}'
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'textareafield',
                                            colspan: 2,
                                            width: '100%',
                                            fieldLabel: '#{비고}',
                                            labelWidth: 140,
                                            readOnly: true,
                                            bind: {
                                                hidden: '{isManySupply}',
                                                value: '{bidData.estimatedNote}'
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            reference: 'qualifiedEval',
                            hidden: true,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{적격심사정보}',
                            layout: {
                                type: 'table',
                                columns: 1
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{적격심사평가기준}',
                                    labelWidth: 160,
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            margin: '0 20 0 0',
                                            width: 100,
                                            labelWidth: 160,
                                            name: 'qualifiedEvalBasisType',
                                            fieldStyle: '',
                                            readOnly: true,
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.qualifiedEvalBasisType}',
                                                store: '{qualifiedEvalBasisTypeKind}'
                                            },
                                            listeners: {
                                                change: 'onDisplayfieldChange'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            reference: 'moreThanBillion',
                                            hidden: true,
                                            style: {
                                                color: 'red'
                                            },
                                            text: '#{※ 적격심사 세부기준 제 4조 제1항 제1호를 적용(납품실적/기술능력심사)}'
                                        },
                                        {
                                            xtype: 'label',
                                            reference: 'lessThanBillion',
                                            hidden: true,
                                            style: {
                                                color: 'red'
                                            },
                                            text: '#{※ 적격심사 세부기준 제 4조 제1항 제2호를 적용}'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            title: '#{첨부파일}',
                            layout: {
                                type: 'table',
                                columns: 1
                            },
                            items: [
                                {
                                    xtype: 'etnaattachmentfield',
                                    reference: 'autoAttachmentField',
                                    width: '100%',
                                    fieldLabel: '#{자동첨부}',
                                    labelAlign: 'top',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.autoAttachFileGroupId}'
                                    }
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    width: '100%',
                                    fieldLabel: '#{붙임서류}',
                                    labelAlign: 'top',
                                    readOnly: true,
                                    autoLoad: true,
                                    bind: {
                                        value: '{bidData.attachFileGroupId}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{입찰추가사항}',
                            layout: {
                                type: 'vbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    flex: 1,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{계약조건 공시장소}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.mailBidDistribution}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    flex: 1,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{계약착수일 및 완료일}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 100,
                                    bind: {
                                        value: '{bidData.contractBeginEndDate}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    height: 150,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{입찰시 제출서류}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.bidAttendDocument}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    height: 250,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{입찰참가자격}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.bidAttendRestrict}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    height: 260,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{입찰보증금납부 및 귀속}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 3000,
                                    bind: {
                                        value: '{bidData.bidBondBelong}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    height: 100,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{입찰무효사항}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.bidNullification}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    height: 100,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{입찰참가신청서류}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.bidAttendRequestDocument}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    height: 180,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{추가정보제공처}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.moreInformation}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    margins: '0 0 5 0',
                                    height: 300,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{기타공고사항}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    editable: false,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.etc}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            columnWidth: 1,
                            stateId: '1f46b062-f3c0-12db-e054-0017a4770c10',
                            stateful: true,
                            height: 160,
                            margin: '0 0 5 0',
                            ui: 'grid',
                            title: '#{입찰시간 변경이력 조회}',
                            bind: {
                                store: '{changeTimeStore}'
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    align: 'center',
                                    dataIndex: 'revision',
                                    text: '#{공고차수}'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'changeTypeName',
                                    text: '#{변경항목}'
                                },
                                {
                                    xtype: 'datecolumn',
                                    width: 140,
                                    align: 'center',
                                    dataIndex: 'beforeDateTime',
                                    text: '#{변경 전}',
                                    format: 'Y/m/d H:i'
                                },
                                {
                                    xtype: 'datecolumn',
                                    width: 140,
                                    align: 'center',
                                    dataIndex: 'afterDateTime',
                                    text: '#{변경 후}',
                                    format: 'Y/m/d H:i'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 200,
                                    dataIndex: 'changeReason',
                                    text: '#{변경사유}'
                                }
                            ],
                            viewConfig: {
                                autoScroll: false
                            },
                            plugins: [
                                {
                                    ptype: 'etnaexport',
                                    useRenderer: true,
                                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                                },
                                {
                                    ptype: 'etnagridblock'
                                },
                                {
                                    ptype: 'etnagridcontext',
                                    contextMenu: true,
                                    advancedContextMenu: false
                                },
                                {
                                    ptype: 'etnagridstateful'
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'form',
                    autoScroll: true,
                    layout: 'column',
                    bodyPadding: 5,
                    title: '#{품목정보}',
                    items: [
                        {
                            xtype: 'fieldcontainer',
                            totalEvalLoading: true,
                            columnWidth: 1,
                            reference: 'targetItem',
                            hidden: true,
                            margin: '0 0 5 0',
                            layout: 'table',
                            fieldLabel: '#{대상품목}',
                            items: [
                                {
                                    xtype: 'combobox',
                                    margin: '0 0 5 0',
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'id',
                                    bind: {
                                        value: '{bidData.targetItem}',
                                        readOnly: '{!isEditable}',
                                        store: '{targetItemCodeStore}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'grid',
                            title: '#{품목정보}',
                            bind: {
                                store: '{bidItemStore}'
                            },
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    ui: 'grid',
                                    items: [
                                        {
                                            xtype: 'tbfill'
                                        }
                                    ]
                                }
                            ],
                            columns: [
                                {
                                    xtype: 'etnastatuscolumn',
                                    width: 50,
                                    align: 'center',
                                    text: '#{상태}',
                                    bind: {
                                        hidden: '{!isEditable}'
                                    }
                                },
                                {
                                    xtype: 'etnaeliminatecolumn',
                                    width: 50,
                                    text: '#{삭제}',
                                    bind: {
                                        hidden: '{!isEditable}'
                                    },
                                    editor: {
                                        xtype: 'checkboxfield'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 100,
                                    align: 'center',
                                    dataIndex: 'itemCode',
                                    text: '#{자재식별번호}'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 200,
                                    dataIndex: 'itemName',
                                    text: '#{품명}'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 300,
                                    dataIndex: 'itemSpec',
                                    text: '#{규격}',
                                    editor: {
                                        xtype: 'textfield'
                                    }
                                },
                                {
                                    xtype: 'etnastorecolumn',
                                    width: 60,
                                    align: 'center',
                                    dataIndex: 'itemUnit',
                                    text: '#{단위}',
                                    valueField: 'value',
                                    displayField: 'text',
                                    bind: {
                                        store: '{unitCodeStore}'
                                    },
                                    editor: {
                                        xtype: 'combobox',
                                        queryMode: 'local',
                                        valueField: 'value',
                                        bind: {
                                            store: '{unitCodeStore}'
                                        }
                                    }
                                },
                                {
                                    xtype: 'numbercolumn',
                                    width: 100,
                                    align: 'right',
                                    dataIndex: 'quantity',
                                    text: '#{수량}',
                                    format: '0,000.###'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 100,
                                    align: 'right',
                                    text: '#{HS CODE}',
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            height: 0,
                                            width: 100,
                                            dataIndex: 'hsCode',
                                            text: '#{HsCode}'
                                        },
                                        {
                                            xtype: 'etnastorecolumn',
                                            height: 0,
                                            width: 100,
                                            dataIndex: 'concessionType',
                                            text: '#{concessionType}',
                                            valueField: 'value',
                                            displayField: 'text',
                                            bind: {
                                                store: '{concessionTypeKindStore}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 100,
                                    align: 'center',
                                    text: '#{하한~상한 수주율}',
                                    bind: {
                                        hidden: '{hideColumn}'
                                    },
                                    columns: [
                                        {
                                            xtype: 'numbercolumn',
                                            align: 'right',
                                            dataIndex: 'underLimitObtainOrderRate',
                                            text: '#{이상(%)}',
                                            format: '0,000.##'
                                        },
                                        {
                                            xtype: 'numbercolumn',
                                            align: 'right',
                                            dataIndex: 'upperLimitObtainOrderRate',
                                            text: '#{이하(%)}',
                                            format: '0,000.##'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'checkcolumn',
                                    width: 100,
                                    dataIndex: 'basisItemYn',
                                    text: '#{기준품목}',
                                    bind: {
                                        hidden: '{hideColumn}'
                                    },
                                    editor: {
                                        xtype: 'checkboxfield'
                                    }
                                }
                            ],
                            viewConfig: {
                                height: 120
                            },
                            plugins: [
                                {
                                    ptype: 'cellediting',
                                    listeners: {
                                        beforeedit: 'onCellEditingBeforeEdit',
                                        edit: 'onCellEditingEdit'
                                    }
                                },
                                {
                                    ptype: 'etnaexport',
                                    useRenderer: true,
                                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                                },
                                {
                                    ptype: 'etnagridblock'
                                },
                                {
                                    ptype: 'etnagridcontext',
                                    contextMenu: true,
                                    advancedContextMenu: false
                                },
                                {
                                    ptype: 'etnagridstateful'
                                }
                            ],
                            listeners: {
                                selectionchange: 'onGridpanelSelectionChange'
                            }
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{첨부파일}',
                            items: [
                                {
                                    xtype: 'etnaattachmentfield',
                                    anchor: '100%',
                                    reference: 'purchaseSpecAttachFileGroup',
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{구매규격서}',
                                    labelAlign: 'top',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.purchaseSpecAttachFileGroupId}'
                                    }
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    anchor: '100%',
                                    reference: 'specialConditionAtachFileGroup',
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{특수조건}',
                                    labelAlign: 'top',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.specialConditionAttachFileGrpId}'
                                    }
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    anchor: '100%',
                                    reference: 'etcAtachFileGroup',
                                    margin: 0,
                                    fieldLabel: '#{기타첨부}',
                                    labelAlign: 'top',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.etcAttachFileGroupId}'
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'bidannouncementpopuppopupsearchitems',
            reference: 'popupItemSearch'
        }
    ],

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processBidAnnouncementdetailproductBidAnnouncementDetail(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processBidAnnouncementdetailproductBidAnnouncementDetail: function(config) {
        var me = this, items = me.items || config.items;
        items.push(
            {xclass:'Cmmn_Sp_Popup.view.opinionModule.List',
             reference : 'opinionModuleList',
             lazy : true,
             hidden:true,
             autoShow: true,
             columnWidth:1
            }

        );
    }

});

/*
 * File: app/view/foreignBidAnnouncement/detail/service/ForeignBidAnnouncementDetailViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetailViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.foreignbidannouncementdetailserviceforeignbidannouncementdetail',

               
                                   
                                
                               
                                
                          
                          
                               
                                              
                                     
                                            
                                           
                                                 
                                    
                                            
      

    data: {
        newDate: new Date(),
        isPopup: true,
        bidData: null,
        isEditable: true,
        codeType: '',
        hideOpenBidDate: true,
        hideFieldIntro: true,
        serverTime: Etna.util.Time.getServerTime(),
        isJointSupplyDemand: false,
        hideJointField: true,
        isChangeReasonHidden: true
    },

    stores: {
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        purchaseTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ItemTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            listeners: {
                load: 'onEnumLoad'
            }
        },
        bidTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            listeners: {
                load: 'onEnumLoad1'
            }
        },
        currencyCodeStore: {
            groupCode: 'Currency',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        competitionTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CompetitionTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        estimatedPriceTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.EstimatedPriceTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        vendorAwardTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.VendorAwardTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        jointSupplyDemandMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.JointSupplyDemandMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        noticeKindKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.NoticeKindKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        inOutTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.InOutTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        twoPhaseTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.TwoPhaseTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        collectivelyBidMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CollectivelyBidMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        autoEvalMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.AutoEvalMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        autoEvalTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.AutoEvalTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        constructTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ConstructTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        limitedReasonCodeStore: {
            groupCode: 'limitedReasonCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        purchaseGroupStore: {
            fields: [
                {
                    name: 'id'
                },
                {
                    name: 'name'
                }
            ],
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.cmmn.CommonController.findJobs',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        decimalPointStore: {
            model: 'bid_sp.model.bid.tempModel',
            data: [
                {
                    text: 1,
                    value: 1
                },
                {
                    text: 2,
                    value: 2
                },
                {
                    text: 3,
                    value: 3
                },
                {
                    text: 4,
                    value: 4
                }
            ]
        },
        qualifiedStore: {
            model: 'bid_sp.model.foreign.QualifiedCodes',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.foreign.sp.ForeignBidDetailController.findQualifiedCodeData',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        licenseStore: {
            model: 'bid_sp.model.foreign.LicenseCodes',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.foreign.sp.ForeignBidDetailController.findLicenseCodeData',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        regionStore: {
            model: 'bid_sp.model.foreign.RegionCodes',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.foreign.sp.ForeignBidDetailController.findRegionCodeData',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        changeTimeStore: {
            model: 'bid_sp.model.foreign.BidDateTimeChange',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.foreign.sp.ForeignBidDetailController.findBidChangeTimeDetailList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        fileItemStore: {
            model: 'bid_sp.model.bid.FileItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.getFileItemList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        progressStore: {
            model: 'bid_sp.model.foreign.ProgressState',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.foreign.sp.ForeignBidDetailController.findProgressStateSPList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        }
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                formulas: {
                    bidBeginDate: {
                        get: function(data) {
                            var bidType = data.bidType;
                            var alwaysAttendYn = data.alwaysAttendYn;
                            var twoPhaseType = data.twoPhaseType;

                            if(bidType === 'Nego' || (bidType === 'LowestPrice' && twoPhaseType === 'Separate')){
                                return true;
                            }else if(!bidType){
                                return true;
                            }else {
                                return alwaysAttendYn;
                            }
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            alwaysAttendYn: '{bidData.alwaysAttendYn}',
                            twoPhaseType: '{bidData.twoPhaseType}'
                        }
                    },
                    specProposalBeginDate: {
                        get: function(data) {
                            var bidType = data.bidType;
                            var alwaysAttendYn = data.alwaysAttendYn;
                            var twoPhaseType = data.twoPhaseType;

                            if(bidType === 'Nego' || (bidType === 'LowestPrice' && twoPhaseType === 'Separate')){
                                return alwaysAttendYn;
                            }else {
                                return true;
                            }
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            alwaysAttendYn: '{bidData.alwaysAttendYn}',
                            twoPhaseType: '{bidData.twoPhaseType}'
                        }
                    },
                    specProposalCloseDate: {
                        get: function(data) {
                            var bidType = data.bidType;
                            var twoPhaseType = data.twoPhaseType;

                            if(bidType === 'Nego' || (bidType === 'LowestPrice' && twoPhaseType === 'Separate')){
                                return false;
                            }
                            return true;
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            twoPhaseType: '{bidData.twoPhaseType}'
                        }
                    },
                    specProposalTitle: {
                        get: function(data) {
                            var bidType = data.bidType;
                            var twoPhaseType = data.twoPhaseType;
                            var specProposalBeginDate = me.getView().lookupReference('specProposalBeginDate');
                            var specProposalCloseDate = me.getView().lookupReference('specProposalCloseDate');

                            // [2015.10.29 송헌용] 제안서제출 -> 입찰(제안서) 용어 변경
                            if(bidType === 'Nego'){
                                specProposalBeginDate.setFieldLabel(Ext.String.format('#{입찰(제안서) 시작일시}'));
                                specProposalCloseDate.setFieldLabel(Ext.String.format('#{입찰(제안서) 마감일시}'));
                            } else if(bidType === 'LowestPrice' && twoPhaseType === 'Separate'){
                                specProposalBeginDate.setFieldLabel(Ext.String.format('#{규격서제출 시작일시}'));
                                specProposalCloseDate.setFieldLabel(Ext.String.format('#{규격서제출 마감일시}'));
                            }
                        },
                        bind: {
                            bidType: '{bidData.bidType}',
                            twoPhaseType: '{bidData.twoPhaseType}'
                        }
                    },
                    convertEstimatedPriceAmount: {
                        get: function(data) {
                            var amount = 0;

                            if(data){
                                amount = data.estimatedPriceAmount;
                            }

                            if(amount > 0){
                                return Ext.String.format('{0} {1}', Ext.util.Format.numberWord(amount), '#{원}');
                            }
                        },
                        bind: {
                            estimatedPriceAmount: '{bidData.estimatedPriceAmount}'
                        }
                    },
                    convertPresumedAmount: {
                        get: function(data) {
                            var amount = 0;
                            if(data){
                                amount = data.presumedAmount;
                            }
                            if(amount > 0){
                                return Ext.String.format('{0} {1}', Ext.util.Format.numberWord(amount), '#{원}');
                            }
                        },
                        bind: {
                            presumedAmount: '{bidData.presumedAmount}'
                        }
                    },
                    convertPresumedPrice: {
                        get: function(data) {
                            var amount = 0;
                            if(data){
                                amount = data.presumedPrice;
                            }
                            if(amount > 0){
                                return Ext.String.format('{0} {1}', Ext.util.Format.numberWord(amount), '#{원}');
                            }
                        },
                        bind: {
                            presumedPrice: '{bidData.presumedPrice}'
                        }
                    }
                }
            };
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    findBid: function(param, type) {

        var deferred = Ext.create('Deft.Deferred');


        smartsuit.ui.etnajs.pro.foreign.sp.ForeignBidDetailController.findBidBasicInfo(param, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    }

});

/*
 * File: app/view/foreignBidAnnouncement/detail/service/ForeignBidAnnouncementDetailViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetailViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.foreignbidannouncementdetailserviceforeignbidannouncementdetail',

    close: function() {
        var me = this, view = this.getView();

                me.clearData();
                //me.expandComponents();
                view.fireEvent('closeDetail');
    },

    loadData: function(param, type) {
        var me = this, view = this.getView(),vm = this.getViewModel();

        vm.set('isPopup',false);
        vm.set('isEditable',false);
        vm.set('isFirst',true);

        Etna.suspendLayouts();

        Etna.onDone(function() {
            me.searchBid(param, type);

            var fileGroupId = 'ConstructionBidFileGroup';
            if(vm.get('bidData.ItemTpye')=='Service'){
                fileGroupId = 'ServiceBidFileGroup';
            }

            var searchParam = {
                bidId 		: param,
                type  		: type,
                fileGroupId	: fileGroupId,
                bidFileType	: 'Bid'
            };

            me.searchChangeTime(searchParam);
            me.codeStoreLoad(searchParam);
            me.searchBidProgress(searchParam);

            var fileItemStore = me.getViewModel().get('fileItemStore');

            fileItemStore.load({
                params: searchParam,
                callback: function(records, operation, success){

                }
            });


            Etna.onDone(function() {
                Etna.deferredFlushLayouts();
                Etna.resumeLayouts(true);
            });
        });
    },

    searchBid: function(param, type) {
        var me = this,
            view = me.getView(),
            vm = this.getViewModel();

        view.setLoading(true);
        vm.findBid(param, type).then({
            success: function(result) {
                vm.set('isJointSupplyDemand', result.jointSupplyDemandYn);
                vm.set('bidData', null);
                vm.set('bidData', me.getDateTime(result));

                me.loadOpinion(vm.get('bidData'));

                if(vm.get('bidData').get('fieldIntroductionYn')){
                    vm.set('hideFieldIntro',false);
                }

                // [2015.10.07 송헌용] 공사 공고상세조회에서 예비가격기초금액 공개
                var estimatedPriceAmountField = me.lookupReference('estimatedPriceAmountField');
                var estimatedPriceAmount = me.getViewModel().get('bidData.estimatedPriceAmount');

                if(!estimatedPriceAmount){//예비가격 기초금액이 없는 경우 미입력으로 나오도록 수정
                    me.getViewModel().set('isEstimatedPriceAmountEmpty', true);
                }else{
                    me.getViewModel().set('isEstimatedPriceAmountEmpty', false);
                }
                estimatedPriceAmountField.setVisible(true);

                // [2015.10.16 송헌용] 정정사유 보이게 처리
                if(vm.get('bidData.changeReason')) {
                    vm.set('isChangeReasonHidden', false);
                }

                view.updateLayout(true);
                view.setLoading(false);
            },
            failure: function() {
                view.setLoading(false);
            }
        });
    },

    init: function() {
        var me = this,
            view = me.getView();

        me.getView().loadData = Ext.Function.bind(me.loadData, me);
        view.setHiddenKepcoPanel = Ext.Function.bind(me.setHiddenKepcoPanel, me);
    },

    getDateTime: function(param) {
        var me = this,
            vm = this.getViewModel();

        var bidData = Ext.create('bid_sp.model.foreign.Bid', param);

        if(bidData.get('noticeDate')) {
            bidData.set('noticeDateHour', bidData.get('noticeDate').getHours());
            bidData.set('noticeDateMinute', bidData.get('noticeDate').getMinutes());
        }

        if(bidData.get('beginDateTime')) {
            bidData.set('beginDateHour', bidData.get('beginDateTime').getHours());
            bidData.set('beginDateMinute', bidData.get('beginDateTime').getMinutes());
        }

        if(bidData.get('endDateTime')) {
            bidData.set('endDateHour', bidData.get('endDateTime').getHours());
            bidData.set('endDateMinute', bidData.get('endDateTime').getMinutes());
        }

        if(bidData.get('bidAttendRequestBeginDateTime')) {
            bidData.set('bidAttendRequestBeginDateHour', bidData.get('bidAttendRequestBeginDateTime').getHours());
            bidData.set('bidAttendRequestBeginDateMinute', bidData.get('bidAttendRequestBeginDateTime').getMinutes());
        }

        if(bidData.get('bidAttendRequestCloseDateTime')) {
            bidData.set('bidAttendRequestCloseDateHour', bidData.get('bidAttendRequestCloseDateTime').getHours());
            bidData.set('bidAttendRequestCloseDateMinute', bidData.get('bidAttendRequestCloseDateTime').getMinutes());
        }

        if(bidData.get('openBidDateTime')) {
            bidData.set('openBidDateHour', bidData.get('openBidDateTime').getHours());
            bidData.set('openBidDateMinute', bidData.get('openBidDateTime').getMinutes());
        }

        if(bidData.get('specEvalCloseDateTime')) {
            bidData.set('specEvalCloseDateHour', bidData.get('specEvalCloseDateTime').getHours());
            bidData.set('specEvalCloseDateMinute', bidData.get('specEvalCloseDateTime').getMinutes());
        }

        if(bidData.get('pqEvalCloseDateTime')) {
            bidData.set('pqEvalCloseDateHour', bidData.get('pqEvalCloseDateTime').getHours());
            bidData.set('pqEvalCloseDateMinute', bidData.get('pqEvalCloseDateTime').getMinutes());
        }

        if(bidData.get('fieldIntroductionBeginDateTime')) {
            bidData.set('fieldIntroductionBeginDateHour', bidData.get('fieldIntroductionBeginDateTime').getHours());
            bidData.set('fieldIntroductionBeginDateMinute', bidData.get('fieldIntroductionBeginDateTime').getMinutes());
        }

        if(bidData.get('fieldIntroductionEndDateTime')) {
            bidData.set('fieldIntroductionEndDateHour', bidData.get('fieldIntroductionEndDateTime').getHours());
            bidData.set('fieldIntroductionEndDateMinute', bidData.get('fieldIntroductionEndDateTime').getMinutes());
        }

        if(!bidData.get("autoAttachFileGroupId")){
            bidData.set("autoAttachFileGroupId",'CodeOfConduct');
            vm.set('bidData',bidData);

        }

        if(bidData.get('specProposalBeginDateTime')) {
            bidData.set('specProposalBeginDateHour', bidData.get('specProposalBeginDateTime').getHours());
            bidData.set('specProposalBeginDateMinute', bidData.get('specProposalBeginDateTime').getMinutes());
        }

        if(bidData.get('specProposalCloseDateTime')) {
            bidData.set('specProposalCloseDateHour', bidData.get('specProposalCloseDateTime').getHours());
            bidData.set('specProposalCloseDateMinute', bidData.get('specProposalCloseDateTime').getMinutes());
        }

        bidData.set('purchaseType', bidData.get('purchaseType'));


        return bidData;
    },

    clearData: function() {
        var me = this, vm = this.getViewModel();
        var changeTimeStore = vm.getStore('changeTimeStore');
        var opinionModuleList = me.lookupReference('opinionModuleList');
        var bidData = Ext.create('bid_sp.model.foreign.Bid', null);
        var qualifiedStore = vm.getStore('qualifiedStore');
        var licenseStore = vm.getStore('licenseStore');
        var regionStore = vm.getStore('regionStore');

        vm.set('bidData', bidData);
        vm.set('isFirst',true);
        vm.set('hideOpenBidDate', true);
        vm.set('hideFieldIntro', true);
        vm.set('isJointSupplyDemand', false);
        vm.set('isChangeReasonHidden', true);

        changeTimeStore.removeAll();
        qualifiedStore.removeAll();
        licenseStore.removeAll();
        regionStore.removeAll();

        opinionModuleList.clearData();
        opinionModuleList.setVisible(false);
    },

    codeStoreLoad: function(param) {
        var me = this, view = this.getView(),vm = this.getViewModel();


        var qualifiedStore = vm.getStore('qualifiedStore');

        qualifiedStore.load({
            params: param,
            callback: function(records, operation, success) {

            }
        });

        var licenseStore = vm.getStore('licenseStore');

        licenseStore.load({
            params: param,
            callback: function(records, operation, success) {

            }
        });

        var regionStore = vm.getStore('regionStore');

        regionStore.load({
            params: param,
            callback: function(records, operation, success) {

            }
        });
    },

    getMidnightDate: function(date) {
        var midnightTime = Ext.Date.clone(date);

        midnightTime.setHours(0);
        midnightTime.setMinutes(0);
        midnightTime.setSeconds(0);
        midnightTime.setMilliseconds(0);
        return midnightTime;
    },

    searchChangeTime: function(searchParam) {
        var me = this,
            vm = this.getViewModel();
        var basisItem = vm.get('basisItem');
        var changeTimeStore = vm.getStore('changeTimeStore');

        changeTimeStore.load({
            params: searchParam
        });
    },

    loadOpinion: function(bidData) {
        var me = this,
            vm = me.getViewModel(),
            view = me.getView();

        var form1 = me.lookupReference('form1');

        var opinionModuleList = me.lookupReference('opinionModuleList');

        var popData = {
            announceId	: bidData.get('id'),
            announceNo	: bidData.get('no'),
            announceName: bidData.get('name')
        };

        form1.add(opinionModuleList);
        opinionModuleList.setDefaultValue(popData);
        opinionModuleList.setVisible(true);
    },

    searchBidProgress: function(searchParam) {
        var me = this,
            view = me.getView(),
            vm = this.getViewModel();

        var progressStore = vm.getStore('progressStore');

        progressStore.load({
            params: searchParam
        });
    },

    setHiddenKepcoPanel: function() {
        var me= this;
        me.lookupReference('kepcopanel').setHidden(true);
    },

    showPrintPopup: function() {
        var me = this, vm = this.getViewModel();

        var type = 'ServiceBidAnnounceViewPrintSpForm';

        var w = 780,
            h = 768,
            leftPosition = (screen.width-w)/2,
            topPosition = (screen.height-h)/2;

        window.open('about:blank', 'print', 'location=no, width='+w+',height='+h+',top='+topPosition+',left='+leftPosition+',scrollbars=yes');

        var frm = Site.util.Format.makeForm('print.do', 'POST',  'print');

        frm.appendChild(Site.util.Format.makeInput('hidden', 'documentType', type));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'groupCode'   , 'PrintDocumentType'));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'id'          , vm.get('bidData.id')));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'standardDate' , Ext.util.Format.date(vm.get('bidData.noticeDate'),'Y-m-d')));
        frm.appendChild(Site.util.Format.makeInput('hidden', Ext.query("meta[name='_csrf_parameter']")[0].content,Ext.query("meta[name='_csrf']")[0].content));

        document.body.appendChild(frm);
        frm.submit();
    },

    onRefreshButtonClick: function(button, e, eOpts) {
        var me = this,
            vm = me.getViewModel();

        // [2015.10.13 송헌용] 갱신버튼 추가
        me.loadData(vm.get('bidData.id'), 'Bid');
    },

    onPrintBtnClick: function(button, e, eOpts) {
        var me = this;

        me.showPrintPopup();

    },

    onCloseBtnClick1: function(button, e, eOpts) {
        var me = this,vm = this.getViewModel(), view = this.getView();

        me.clearData();
        me.close();

    },

    onContainerItemClick: function(item) {
        var me = this;
        if(item.urlLink !== 'none'){ //tabUrl이 있는 경우
            var classPath = item.urlLink;

            //modal로 뜨도록 수정 (통테이후 반영예정)
            var popup = Ext.create(classPath, {
                floating : true,
                modal:true,
                title : item.tabTitle,
                bidNo : item.paramNo,
                noticeDate : item.paramNoticeDate,
                companyId : item.companyId,
                width:1024,
                height:768,
                resizable:true,
                draggable:true
            });

            popup.show();
            popup.center();

            //------------------------------------------------------------------tab으로 뜨도록
            //     if (MdiManager.hasView(classPath)) { //기존에 tab이 띄워져있으면 닫음
            //         var view = MdiManager.mdiTab.down(Ext.String.format('>[classpath='+classPath+']'));
            //         MdiManager.mdiTab.remove(view,true);
            //     }
            //     MdiManager.addViewToTab(classPath, { //tab 띄움
            //         title: item.tabTitle,
            //         authKey:  item.menuCode,
            //         bidNo : item.paramNo,
            //         noticeDate : item.paramNoticeDate,
            //         companyId : item.companyId
            //     }, classPath);
        }else if(item.notiMsg !== 'none'){ //화면을 보여주는 것 보다 alert창을 띄워야 하는 경우
            Etna.Message.alert(item.notiMsg);
        }
    },

    onComboboxChange2: function(field, newValue, oldValue, eOpts) {
        if(!newValue) {
            return false;
        }

        var me = this,
            vm = me.getViewModel(),
            presumedAmountField = me.lookupReference('presumedAmountField');

        // [2015.11.03 송헌용] 계약방법에 따른 필드명 및 pq심사여부 제어
        // 배전단가
        if(newValue === 'DistributorPrice') {
            presumedAmountField.setFieldLabel(Ext.String.format('#{가상설계금액(VAT별도)}'));
            // 배전감리전문업체
        } else if(newValue === 'DistributorPriceInspectionCompany') {
            presumedAmountField.setFieldLabel(Ext.String.format('#{가상설계금액(VAT별도)}'));
        } else {
            presumedAmountField.setFieldLabel(Ext.String.format('#{추정금액(VAT포함)}'));
        }
    },

    onComboboxChange1: function(field, newValue, oldValue, eOpts) {
        var me = this,
            view = me.getView(),
            vm = me.getViewModel();
        var proposalSubmitMethod = me.lookupReference('proposalSubmitMethod');//제안서제출방법

        proposalSubmitMethod.setVisible(false);
        if(newValue=='Nego'){
            //협상
            proposalSubmitMethod.setVisible(true);
            vm.set('hideOpenBidDate', false);
        }else if(newValue=='QualifiedEval'){
            //종합평가
            vm.set('hideOpenBidDate', true);
        }else if(newValue=='LowestPrice'){
            //최저가
            vm.set('hideOpenBidDate', true);
        }else if(newValue=='CollectivelyBid'){
            //일괄입찰
            vm.set('hideOpenBidDate', false);
        }

        // Etna.deferredFlushLayouts();
    },

    onGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {

    },

    onEnumLoad: function(store, records, successful, eOpts) {
        var me = this,
            vm = this.getViewModel();

        if(successful) {
            store.filter([
            {
                filterFn: function(record) {
                    return record.get('value')!=='Product';
                }
            }
            ]);
        }
    },

    onEnumLoad1: function(store, records, successful, eOpts) {
        var me = this,
            vm = this.getViewModel();

        if(successful) {
            store.filter([
            {
                filterFn: function(record) {
                    if(record.get('value')!=='LimitedLowestPrice' && record.get('value')!=='TotalEval' && record.get('value')!=='TwoPhase'){
                        return record.get('value');
                    }

                }
            }
            ]);
        }
    }

});

/*
 * File: app/view/foreignBidAnnouncement/detail/service/ForeignBidAnnouncementDetail.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetail', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.foreignbidannouncementdetailserviceforeignbidannouncementdetail',

               
                                                                                                  
                                                                                                       
                              
                           
                        
                         
                      
                                  
                                 
                                  
                                 
                         
                                
                            
                                  
                              
                         
                        
                                  
                                 
                                   
                                    
                                     
                              
      

    controller: 'foreignbidannouncementdetailserviceforeignbidannouncementdetail',
    viewModel: {
        type: 'foreignbidannouncementdetailserviceforeignbidannouncementdetail'
    },
    data: {
        
    },
    ui: 'main',
    title: '#{공사용역입찰신규등록}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'page',
            items: [
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    itemId: 'refreshButton',
                    iconCls: 'btn-refresh',
                    text: '#{갱신}',
                    listeners: {
                        click: 'onRefreshButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-print',
                    text: '#{인쇄}',
                    listeners: {
                        click: 'onPrintBtnClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseBtnClick1'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'kepcopanel',
            collapsible: true,
            reference: 'kepcopanel',
            height: 150,
            bind: {
                store: '{progressStore}'
            },
            listeners: {
                itemClick: 'onContainerItemClick'
            }
        },
        {
            xtype: 'tabpanel',
            flex: 1,
            reference: 'bidTabPanel',
            cls: 'nbr',
            activeTab: 0,
            plain: true,
            layout: {
                type: 'card',
                deferredRender: false
            },
            items: [
                {
                    xtype: 'form',
                    reference: 'form1',
                    autoScroll: true,
                    layout: 'column',
                    bodyPadding: 5,
                    title: '#{입찰기본정보}',
                    items: [
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 5,
                            collapsible: true,
                            title: '#{공고일반}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tableAttrs: {
                                    style: {
                                        width: '100%'
                                    }
                                },
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '#{공고명}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 100,
                                    bind: {
                                        value: '{bidData.name}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    width: 340,
                                    layout: 'table',
                                    fieldLabel: '#{공고번호/차수}',
                                    labelWidth: 150,
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            width: 130,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.no}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            fieldLabel: '',
                                            value: '/'
                                        },
                                        {
                                            xtype: 'textfield',
                                            width: 60,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: center',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.revision}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{공고부서}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.contractRequestDepartmentName}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    width: 340,
                                    fieldLabel: '#{공고종류}',
                                    labelWidth: 150,
                                    layout: {
                                        type: 'table',
                                        columns: 1
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            margin: '0 5 0 0',
                                            width: 185,
                                            hideLabel: true,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.noticeKind}',
                                                store: '{noticeKindKind}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    width: 340,
                                    layout: 'table',
                                    fieldLabel: '#{상시투찰적용여부}',
                                    labelWidth: 150,
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{적용}',
                                            offText: '#{미적용}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.alwaysAttendYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{국내외구분}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.inOutType}',
                                        store: '{inOutTypeKind}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{통화}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'id',
                                    bind: {
                                        value: '{bidData.currencyCode}',
                                        store: '{currencyCodeStore}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{입찰담당부서}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeDepartmentName}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 340,
                                    fieldLabel: '#{입찰담당자}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeName}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{계약입찰방식}',
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{계약방법}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.competitionType}',
                                        store: '{competitionTypeKind}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{계약구분}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.contractType}',
                                        store: '{contractTypeKind}'
                                    },
                                    listeners: {
                                        change: 'onComboboxChange2'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'bidTypeCombo',
                                    width: 340,
                                    fieldLabel: '#{낙찰자결정방법}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.bidType}',
                                        store: '{bidTypeKind}'
                                    },
                                    listeners: {
                                        change: 'onComboboxChange1'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    width: 340,
                                    fieldLabel: '#{2단계}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.twoPhaseType}',
                                        store: '{twoPhaseTypeKind}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 2,
                                    width: 340,
                                    fieldLabel: '#{일괄입찰유형}',
                                    labelWidth: 150,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        hidden: '{hideOpenBidDate}',
                                        value: '{bidData.collectivelyBidMethod}',
                                        store: '{collectivelyBidMethodKind}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 1,
                                    fieldLabel: '#{공동수급여부}',
                                    labelWidth: 150,
                                    layout: {
                                        type: 'table',
                                        columns: 4
                                    },
                                    items: [
                                        {
                                            xtype: 'fieldcontainer',
                                            margin: '0 5 0 0',
                                            layout: 'table',
                                            fieldLabel: '',
                                            labelWidth: 150,
                                            items: [
                                                {
                                                    xtype: 'etnatogglefield',
                                                    readOnly: true,
                                                    onText: '#{예}',
                                                    offText: '#{아니오}',
                                                    onValue: true,
                                                    offValue: false,
                                                    scale: 'small',
                                                    bind: {
                                                        value: '{bidData.jointSupplyDemandYn}'
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'combobox',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '#{공동수급방법}',
                                            hideLabel: true,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                hidden: '{!isJointSupplyDemand}',
                                                value: '{bidData.jointSupplyDemandMethod}',
                                                store: '{jointSupplyDemandMethodKind}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{제한업체수}',
                                            bind: {
                                                hidden: '{!isJointSupplyDemand}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            margin: 0,
                                            width: 50,
                                            fieldLabel: '#{공동수급업체수}',
                                            hideLabel: true,
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 99,
                                            minValue: 0,
                                            bind: {
                                                hidden: '{!isJointSupplyDemand}',
                                                value: '{bidData.jointSupplyDemandVendorCount}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 1,
                                    reference: 'proposalSubmitMethod',
                                    hidden: true,
                                    width: 340,
                                    layout: 'table',
                                    fieldLabel: '#{제안서제출방법}',
                                    labelWidth: 150,
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{ON-LINE}',
                                            offText: '#{OFF-LINE}',
                                            onValue: 'Online',
                                            offValue: 'Offline',
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.proposalSubmitMethod}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    colspan: 2,
                                    title: '#{배점한도}',
                                    layout: {
                                        type: 'table',
                                        columns: 2,
                                        tableAttrs: {
                                            style: {
                                                width: '100%'
                                            }
                                        },
                                        tdAttrs: {
                                            style: {
                                                width: '50%'
                                            }
                                        }
                                    },
                                    bind: {
                                        hidden: '{hideOpenBidDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfield',
                                            width: 320,
                                            fieldLabel: '#{기술능력평가 배점한도}',
                                            labelWidth: 180,
                                            readOnly: true,
                                            hideTrigger: true,
                                            bind: {
                                                value: '{bidData.proposalTechnicalRate}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            width: 320,
                                            fieldLabel: '#{입찰가격평가 배점한도}',
                                            labelWidth: 180,
                                            readOnly: true,
                                            hideTrigger: true,
                                            bind: {
                                                value: '{bidData.proposalPriceRate}'
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            columnWidth: 1,
                            reference: 'changeReason',
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{정정사유}',
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            bind: {
                                hidden: '{isChangeReasonHidden}'
                            },
                            items: [
                                {
                                    xtype: 'textareafield',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 500,
                                    bind: {
                                        value: '{bidData.changeReason}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{입찰진행}',
                            layout: {
                                type: 'table',
                                columns: 1
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    width: 340,
                                    layout: 'table',
                                    fieldLabel: '#{PQ심사여부}',
                                    labelWidth: 220,
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{예}',
                                            offText: '#{아니오}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.pqEvalYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{공고일자}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.noticeDate}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.noticeDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.noticeDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{PQ심사접수마감일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{!bidData.pqEvalYn}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.pqEvalCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.pqEvalCloseDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.pqEvalCloseDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰참가신청시작일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.bidAttendRequestBeginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.bidAttendRequestBeginDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.bidAttendRequestBeginDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰참가신청마감일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.bidAttendRequestCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.bidAttendRequestCloseDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.bidAttendRequestCloseDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰서제출 시작일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 11
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.beginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 5 0 0',
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{입찰서제출 마감일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 11
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.endDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    reference: 'specProposalBeginDate',
                                    fieldLabel: '#{규격서제출 시작일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{specProposalBeginDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.specProposalBeginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalBeginDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalBeginDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 5 0 0',
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    reference: 'specProposalCloseDate',
                                    fieldLabel: '#{규격서제출 마감일시}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{specProposalCloseDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.specProposalCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalCloseDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            hideTrigger: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.specProposalCloseDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{가격입찰서 개찰일시(예정)}',
                                    labelWidth: 220,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{hideOpenBidDate}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            margin: '0 5 0 0',
                                            width: 120,
                                            fieldLabel: '',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.openBidDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.openBidDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: '0 2 0 0',
                                            width: 50,
                                            fieldLabel: '',
                                            readOnly: true,
                                            emptyText: '0',
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.openBidDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: 0,
                                            text: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'label',
                                    colspan: 2,
                                    margin: '5 0',
                                    text: '#{※ 개찰일시 : 전자입찰서 제출마감 일시부터 1시간 이후에 개찰}',
                                    bind: {
                                        hidden: '{!hideOpenBidDate}'
                                    }
                                },
                                {
                                    xtype: 'label',
                                    colspan: 2,
                                    margin: '5 0',
                                    style: {
                                        'text-align': 'center'
                                    },
                                    width: '100%',
                                    text: '#{『전자조달의 이용 및 촉진에 관한 법률 시행 규칙 제\2조 4항 적용』}',
                                    bind: {
                                        hidden: '{!hideOpenBidDate}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{투찰제한}',
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    colspan: 2,
                                    stateId: '1f46b062-f3c6-12db-e054-0017a4770c10',
                                    stateful: true,
                                    margin: '0 0 5 0',
                                    ui: 'grid',
                                    header: false,
                                    title: 'My Grid Panel',
                                    bind: {
                                        store: '{qualifiedStore}'
                                    },
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            width: 250,
                                            dataIndex: 'qualifiedQualificationCodeName',
                                            text: '#{적격자격명}'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 150,
                                            dataIndex: 'etc',
                                            menuDisabled: true,
                                            text: '#{m(미터)}'
                                        }
                                    ],
                                    viewConfig: {
                                        height: 70
                                    },
                                    plugins: [
                                        {
                                            ptype: 'etnaexport',
                                            useRenderer: true,
                                            defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                                        },
                                        {
                                            ptype: 'etnagridblock'
                                        },
                                        {
                                            ptype: 'etnagridcontext',
                                            contextMenu: true,
                                            advancedContextMenu: false
                                        },
                                        {
                                            ptype: 'etnagridstateful'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'gridpanel',
                                    colspan: 2,
                                    stateId: '1f46b062-f3c7-12db-e054-0017a4770c10',
                                    stateful: true,
                                    margin: '0 0 5 0',
                                    ui: 'grid',
                                    header: false,
                                    title: 'My Grid Panel',
                                    bind: {
                                        store: '{licenseStore}'
                                    },
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            width: 250,
                                            dataIndex: 'licenseQualificationCodeName',
                                            text: '#{면허자격명}'
                                        }
                                    ],
                                    viewConfig: {
                                        height: 70
                                    },
                                    plugins: [
                                        {
                                            ptype: 'etnaexport',
                                            useRenderer: true,
                                            defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                                        },
                                        {
                                            ptype: 'etnagridblock'
                                        },
                                        {
                                            ptype: 'etnagridcontext',
                                            contextMenu: true,
                                            advancedContextMenu: false
                                        },
                                        {
                                            ptype: 'etnagridstateful'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'gridpanel',
                                    colspan: 2,
                                    stateId: '1f46b062-f3c7-12db-e054-0017a4770c10',
                                    stateful: true,
                                    margin: '0 0 5 0',
                                    ui: 'grid',
                                    header: false,
                                    title: 'My Grid Panel',
                                    bind: {
                                        store: '{regionStore}'
                                    },
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            width: 150,
                                            dataIndex: 'areaCodeName',
                                            text: '#{지역명}'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 150,
                                            dataIndex: 'subAreaCodeName',
                                            text: '#{관할구역}'
                                        }
                                    ],
                                    viewConfig: {
                                        height: 70
                                    },
                                    plugins: [
                                        {
                                            ptype: 'etnaexport',
                                            useRenderer: true,
                                            defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                                        },
                                        {
                                            ptype: 'etnagridblock'
                                        },
                                        {
                                            ptype: 'etnagridcontext',
                                            contextMenu: true,
                                            advancedContextMenu: false
                                        },
                                        {
                                            ptype: 'etnagridstateful'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{추정가격}',
                            layout: {
                                type: 'table',
                                columns: 2
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    reference: 'presumedAmountField',
                                    fieldLabel: '#{추정금액(VAT포함)}',
                                    labelWidth: 160,
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfield',
                                            coverFormat: '0,000',
                                            margin: '0 5 0 0',
                                            width: 160,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            emptyText: '0',
                                            enforceMaxLength: true,
                                            hideTrigger: true,
                                            maxLength: 18,
                                            selectOnFocus: true,
                                            autoStripChars: true,
                                            decimalPrecision: 4,
                                            maxValue: 99999999999999,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.presumedAmount}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 5 0 0',
                                            text: '#{원}'
                                        },
                                        {
                                            xtype: 'displayfield',
                                            bind: {
                                                value: '{convertPresumedAmount}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    fieldLabel: '#{추정가격(VAT별도)}',
                                    labelWidth: 160,
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfield',
                                            coverFormat: '0,000',
                                            margin: '0 5 0 0',
                                            width: 160,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            emptyText: '0',
                                            enforceMaxLength: true,
                                            hideTrigger: true,
                                            maxLength: 18,
                                            selectOnFocus: true,
                                            autoStripChars: true,
                                            decimalPrecision: 4,
                                            maxValue: 99999999999999,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.presumedPrice}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 5 0 0',
                                            text: '#{원}'
                                        },
                                        {
                                            xtype: 'displayfield',
                                            bind: {
                                                value: '{convertPresumedPrice}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    colspan: 2,
                                    reference: 'estimatedPriceAmountField',
                                    defaults: {
                                        labelWidth: 150
                                    },
                                    title: '#{예비가격 기초금액}',
                                    layout: {
                                        type: 'table',
                                        columns: 1
                                    },
                                    items: [
                                        {
                                            xtype: 'fieldcontainer',
                                            reference: 'estimatedAmountField',
                                            fieldLabel: '#{기초금액}',
                                            layout: {
                                                type: 'table',
                                                columns: 3
                                            },
                                            bind: {
                                                hidden: '{isEstimatedPriceAmountEmpty}'
                                            },
                                            items: [
                                                {
                                                    xtype: 'numberfield',
                                                    coverFormat: '0,000.##',
                                                    width: 160,
                                                    fieldStyle: 'text-align:right',
                                                    readOnly: true,
                                                    bind: {
                                                        value: '{bidData.estimatedPriceAmount}'
                                                    }
                                                },
                                                {
                                                    xtype: 'label',
                                                    text: '#{원}'
                                                },
                                                {
                                                    xtype: 'displayfield',
                                                    bind: {
                                                        value: '{convertEstimatedPriceAmount}'
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'fieldcontainer',
                                            reference: 'estimatedAmountSecField',
                                            fieldLabel: '#{기초금액}',
                                            layout: {
                                                type: 'table',
                                                columns: 2
                                            },
                                            bind: {
                                                hidden: '{!isEstimatedPriceAmountEmpty}'
                                            },
                                            items: [
                                                {
                                                    xtype: 'textfield',
                                                    width: 195,
                                                    value: '#{미입력}',
                                                    readOnly: true
                                                },
                                                {
                                                    xtype: 'label',
                                                    text: '#{원}'
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'textareafield',
                                            colspan: 2,
                                            width: '100%',
                                            fieldLabel: '#{비고}',
                                            readOnly: true,
                                            bind: {
                                                hidden: '{isManySupply}',
                                                value: '{bidData.estimatedNote}'
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsible: true,
                            title: '#{현장설명회}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tableAttrs: {
                                    style: {
                                        width: '100%'
                                    }
                                },
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            bind: {
                                hidden: '{hideFieldIntro}'
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    width: '100%',
                                    layout: 'table',
                                    fieldLabel: '#{현장설명참석}',
                                    labelWidth: 180,
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{의무사항}',
                                            offText: '#{의무사항아님}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.bidAttendRequestYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'textfield',
                                    width: 360,
                                    fieldLabel: '#{현장입찰 실시장소 및 시간}',
                                    labelWidth: 180,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.fieldIntroductionLocation}'
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    width: 360,
                                    fieldLabel: '#{현장설명회일자}',
                                    labelWidth: 180,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.fieldIntroductionBeginDateTime}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '#{현장설명회시간}',
                                    labelWidth: 180,
                                    layout: {
                                        type: 'table',
                                        columns: 11
                                    },
                                    items: [
                                        {
                                            xtype: 'fieldcontainer',
                                            colspan: 11,
                                            layout: 'table',
                                            fieldLabel: '',
                                            items: [
                                                {
                                                    xtype: 'numberfield',
                                                    validator: function(value) {
                                                        if(Number(value) > 23) {
                                                            value = 0;
                                                        } else if(value < 0) {
                                                            value = 0;
                                                        }

                                                        this.setValue(value);

                                                        return true;
                                                    },
                                                    margin: '0 2 0 0',
                                                    width: 50,
                                                    fieldLabel: '',
                                                    readOnly: true,
                                                    emptyText: '0',
                                                    decimalPrecision: 0,
                                                    maxValue: 23,
                                                    minValue: 0,
                                                    bind: {
                                                        value: '{bidData.fieldIntroductionBeginDateHour}'
                                                    }
                                                },
                                                {
                                                    xtype: 'label',
                                                    margin: '0 2 0 0',
                                                    text: '#{시}'
                                                },
                                                {
                                                    xtype: 'numberfield',
                                                    validator: function(value) {
                                                        if(Number(value) > 59) {
                                                            value = 0;
                                                        } else if(value < 0) {
                                                            value = 0;
                                                        }

                                                        this.setValue(value);

                                                        return true;
                                                    },
                                                    margin: '0 2 0 0',
                                                    width: 50,
                                                    fieldLabel: '',
                                                    readOnly: true,
                                                    emptyText: '0',
                                                    decimalPrecision: 0,
                                                    maxValue: 59,
                                                    minValue: 0,
                                                    bind: {
                                                        value: '{bidData.fieldIntroductionBeginDateMinute}'
                                                    }
                                                },
                                                {
                                                    xtype: 'label',
                                                    margin: '0 5 0 0',
                                                    text: '#{분}'
                                                },
                                                {
                                                    xtype: 'label',
                                                    margin: '0 5 0 0',
                                                    text: '~'
                                                },
                                                {
                                                    xtype: 'numberfield',
                                                    validator: function(value) {
                                                        if(Number(value) > 23) {
                                                            value = 0;
                                                        } else if(value < 0) {
                                                            value = 0;
                                                        }

                                                        this.setValue(value);

                                                        return true;
                                                    },
                                                    margin: '0 2 0 0',
                                                    width: 50,
                                                    fieldLabel: '',
                                                    readOnly: true,
                                                    emptyText: '0',
                                                    decimalPrecision: 0,
                                                    maxValue: 23,
                                                    minValue: 0,
                                                    bind: {
                                                        value: '{bidData.fieldIntroductionEndDateHour}'
                                                    }
                                                },
                                                {
                                                    xtype: 'label',
                                                    margin: '0 2 0 0',
                                                    text: '#{시}'
                                                },
                                                {
                                                    xtype: 'numberfield',
                                                    validator: function(value) {
                                                        if(Number(value) > 59) {
                                                            value = 0;
                                                        } else if(value < 0) {
                                                            value = 0;
                                                        }

                                                        this.setValue(value);

                                                        return true;
                                                    },
                                                    margin: '0 2 0 0',
                                                    width: 50,
                                                    fieldLabel: '',
                                                    readOnly: true,
                                                    emptyText: '0',
                                                    decimalPrecision: 0,
                                                    maxValue: 59,
                                                    minValue: 0,
                                                    bind: {
                                                        value: '{bidData.fieldIntroductionEndDateMinute}'
                                                    }
                                                },
                                                {
                                                    xtype: 'label',
                                                    margin: 0,
                                                    text: '#{분}'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            afterLoading: true,
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyPadding: 10,
                            collapsed: false,
                            collapsible: true,
                            title: '#{입찰추가사항}',
                            layout: {
                                type: 'vbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    flex: 1,
                                    margin: '0 0 10 0',
                                    ui: 'grid',
                                    title: '#{자동첨부파일}',
                                    bind: {
                                        store: '{fileItemStore}'
                                    },
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            width: '90%',
                                            dataIndex: 'name',
                                            text: '#{파일명}'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                return value/1024+'KB';
                                            },
                                            width: 100,
                                            dataIndex: 'size',
                                            text: '#{사이즈}'
                                        }
                                    ],
                                    viewConfig: {
                                        height: 100
                                    },
                                    listeners: {
                                        cellclick: 'onGridpanelCellClick'
                                    }
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    width: '100%',
                                    fieldLabel: '#{첨부파일}',
                                    labelAlign: 'top',
                                    readOnly: true,
                                    autoLoad: true,
                                    bind: {
                                        value: '{bidData.attachFileGroupId}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    height: 150,
                                    margin: '0 0 5 0',
                                    fieldLabel: '#{입찰참가자격}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 4000,
                                    bind: {
                                        value: '{bidData.bidAttendRestrict}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    fieldLabel: '#{기타}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 1000,
                                    bind: {
                                        value: '{bidData.etc}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    flex: 1,
                                    fieldLabel: '#{참고사항}',
                                    labelAlign: 'top',
                                    labelWidth: 160,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 1000,
                                    bind: {
                                        value: '{bidData.note}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    reference: 'attendCon'
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            columnWidth: 1,
                            stateId: '1f46b062-f3c8-12db-e054-0017a4770c10',
                            stateful: true,
                            height: 160,
                            margin: '0 0 5 0',
                            ui: 'grid',
                            title: '#{입찰시간 변경이력 조회}',
                            bind: {
                                store: '{changeTimeStore}'
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    align: 'center',
                                    dataIndex: 'revision',
                                    text: '#{공고차수}'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'changeTypeName',
                                    text: '#{변경항목}'
                                },
                                {
                                    xtype: 'datecolumn',
                                    width: 140,
                                    align: 'center',
                                    dataIndex: 'beforeDateTime',
                                    text: '#{변경 전}',
                                    format: 'Y/m/d H:i'
                                },
                                {
                                    xtype: 'datecolumn',
                                    width: 140,
                                    align: 'center',
                                    dataIndex: 'afterDateTime',
                                    text: '#{변경 후}',
                                    format: 'Y/m/d H:i'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 200,
                                    dataIndex: 'changeReason',
                                    text: '#{변경사유}'
                                }
                            ],
                            viewConfig: {
                                autoScroll: false
                            },
                            plugins: [
                                {
                                    ptype: 'etnaexport',
                                    useRenderer: true,
                                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                                },
                                {
                                    ptype: 'etnagridblock'
                                },
                                {
                                    ptype: 'etnagridcontext',
                                    contextMenu: true,
                                    advancedContextMenu: false
                                },
                                {
                                    ptype: 'etnagridstateful'
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processBidAnnouncementdetailserviceBidAnnouncementDetail(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processBidAnnouncementdetailserviceBidAnnouncementDetail: function(config) {
        var me = this, items = me.items || config.items;

        items.push(
            {
                xclass:'Cmmn_Sp_Popup.view.opinionModule.List',
                reference : 'opinionModuleList',
                lazy : true,
                hidden:true,
                autoShow: true,
                columnWidth:1
            }
        );
    }

});

/*
 * File: app/view/privateContract/detail/product/PrivateContractDetailSPViewModel1.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewModel1', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.foreignprivatecontractdetailproductforeignprivatecontractdetailsp',

               
                                   
                                
                               
                                
                          
                          
                          
                               
                                   
                                         
                                         
                                   
      

    data: // miscarriagePrivateYn 유찰수의인지 아닌지
    {
        newDate: new Date(),
        bidData: null,
        isVisibleTotEval: true,
        isVisibleProposal: true,
        isVisibleSaveBtn: true,
        isVisibleDelBtn: true,
        isVisibleNoticeBtn: true,
        isVisibleSettlementBtn: true,
        isDisableSpec: true,
        isDisableTwoPhase: true,
        isReadOnly: false
    },

    stores: {
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        purchaseTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.PurchaseTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        inOutTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.InOutTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        bidMethodStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        competitionTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CompetitionTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        bidTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        twoPhaseTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.TwoPhaseTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        currencyCodeStore: {
            groupCode: 'Currency',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        proposalTechnicalRateCodeStore: {
            groupCode: 'ProposalTechnicalRateCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        totalEvalMethodKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.TotalEvalMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            listeners: {
                load: 'onContractTypeKindStoreLoad'
            }
        },
        reasonCodeStore: {
            groupCode: 'PrivatereasonCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodesWithAdditional',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        jointSupplyDemandMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.JointSupplyDemandMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            filters: {
                filterFn: function(item) {
                    // 분담이행(Allotted), 공동이행(Joint)만 보인다.

                    if(item && item.get('value')){
                        return item.get('value') == 'Joint' || item.get('value') == 'Allotted';
                    }
                }
            }
        },
        unitStore: {
            groupCode: 'Unit',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        bidItemStore: {
            model: 'bid_sp.model.bid.BidItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidItems',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        fileItemStore: {
            model: 'bid_sp.model.bid.FileItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.getFileItemList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        privatereasonCodeStore: {
            model: 'bid_sp.model.bid.comboProperty',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.findCodesAndAdditionalProperty',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'additionalProperty1'
                }
            ]
        },
        submitYnStore: {
            data: [
                {
                    value: true,
                    text: '제출'
                },
                {
                    value: false,
                    text: '미제출'
                }
            ],
            fields: [
                {
                    name: 'value'
                },
                {
                    name: 'text'
                }
            ]
        },
        vendorYnStore: {
            data: [
                {
                    value: true,
                    text: 'Y'
                },
                {
                    value: false,
                    text: 'N'
                }
            ],
            fields: [
                {
                    name: 'value'
                },
                {
                    name: 'text'
                }
            ]
        },
        progressStore: {
            model: 'bid_sp.model.bid.ProgressState',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findProgressStateSPList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        }
    },
    formulas: {
        simulation: {
            get: function(data) {
                return data.simulationBidYn;
            },
            bind: {
                simulationBidYn: '{bidData.simulationBidYn}'
            }
        },
        isDisableTwoPhase: {
            get: function(data) {
                /*
                2단계 콤보, 희망수량 체크박스 변경
                */

                if(data == 'LowestPrice' || data == 'TotalEval'){
                    return false;
                }else{
                    return true;
                }
            },
            bind: '{bidData.bidType}'
        },
        privateSettlementDateText: {
            get: function(data) {
                var twoPhaseType = data.twoPhaseType;
                var bidType = data.bidType;

                if(bidType == 'Nego'){
                    return Ext.String.format('#{{0}}', '수의(제안)시담마감일시');
                }else if(twoPhaseType != 'Nothing' || !twoPhaseType){
                    return Ext.String.format('#{{0}}', '수의(규격)시담마감일시');
                }else{
                    return Ext.String.format('#{{0}}', '수의시담마감일시');
                }
            },
            bind: {
                twoPhaseType: '{bidData.twoPhaseType}',
                bidType: '{bidData.bidType}'
            }
        },
        hideSettlementBtnYn: {
            get: function(data) {
                // 수의시담 버튼 제어
                // 공고진행(PreAttendProgress) 일때만 가능
                if(data == 'PreAttendProgress'){
                    return false;
                }else{
                    return true;
                }
            },
            bind: '{bidData.progressState}'
        }
    },

    findBid: function(bidId, type) {
        var deferred = Ext.create('Deft.Deferred');

        smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidBasicInfo(bidId, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    }

});

/*
 * File: app/view/privateContract/detail/product/PrivateContractDetailSPViewController1.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewController1', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.foreignprivatecontractdetailproductforeignprivatecontractdetailsp',

    /* Init Function */
    init: function() {
        var me = this, view = me.getView();

        view.setDefaultFormData = Ext.Function.bind(me.setDefaultFormData, me);
        view.loadBidData        = Ext.Function.bind(me.loadBidData, me);
    },

    /* 데이터 초기화 */
    clearData: function() {
        var me = this, vm = this.getViewModel();

        me.lookupReference('bidTabPanel').setActiveTab(0);

        vm.set('bidData', Ext.create('bid_sp.model.bid.Bid',{}));
        vm.getStore('bidItemStore').removeAll();

        vm.set('newDate'               , new Date());
        vm.set('isVisibleTotEval'      , true);
        vm.set('isVisibleProposal'     , true);
        vm.set('isVisibleSaveBtn'      , true);
        vm.set('isVisibleDelBtn'       , true);
        vm.set('isVisibleNoticeBtn'    , true);
        vm.set('isDisableSpec'         , true);
        vm.set('isDisableTwoPhase'     , true);
        vm.set('isReadOnly'            , false);
    },

    /* 입찰공고 신규 작성 시 데이터 세팅 */
    setDefaultFormData: function() {
        var me = this, view = this.getView();

        me.getView().setLoading(true);

        me.getViewModel().set('pureYn', true); // 순수수의 여부

        Etna.onDone(function(){
            var loginUser = Cmmn.User.getData();
            var operatingUnitStore = me.getViewModel().getStore('operatingUnitStore');
            var operatingUnitId = operatingUnitStore&&operatingUnitStore.getRange().length>0?operatingUnitStore.first().get('id'):null;

            var model = me.getDateTime({
                operatingUnitId				 : operatingUnitId,
                purchaseType                 : 'Product',
                competitionType              : 'Private',
                progressState                : 'CreateProgress',
                inOutType                    : 'In',
                currencyCode                 : 'KRW',
                representativeDepartmentName : loginUser.departmentName,
                representativeName           : loginUser.name,
                representativeId             : loginUser.id,
                purchaseGroupId              : loginUser.purchaseGroupId,
                noticeDate                   : new Date(),
                purchasePlanDate             : new Date(),
                prDate                       : new Date(),
                beginDateTime				 : new Date(),
                endDateTime					 : new Date(),
                quotationSubmitCloseDateTime : new Date(),
                twoPhaseType				 : 'Nothing'					//2단계 해당없음
            });

            me.getViewModel().set('bidData', model);
            me.setBtnAction();
            me.getView().setLoading(false);
        });
    },

    /*
        작성된 입찰공고 조회
        type: 'Bid'
    */
    loadBidData: function(bidId, type) {
        var me = this, vm = this.getViewModel(), view = this.getView();

        Ext.suspendLayouts();

        me.getViewModel().set('pureYn', true); // 순수수의 여부

        view.setLoading(true);

        me.searchBid(bidId, type);



        var searchParam = {
            bidId 		: bidId,
            type  		: type
        };

        me.searchBidItems(searchParam);

        Etna.onDone(function() {
            Ext.resumeLayouts(true);
            view.setLoading(false);
        });
    },

    setDateTime: function() {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        // 수의시담 시작 일시
        if(bidData.get('beginDateTime')) {
            bidData.get('beginDateTime').setHours(bidData.get('beginDateHours'));
            bidData.get('beginDateTime').setMinutes(bidData.get('beginDateMinutes'));
        }

        // 수의시담 마감 일시
        if(bidData.get('endDateTime')) {
            bidData.get('endDateTime').setHours(bidData.get('endDateHours'));
            bidData.get('endDateTime').setMinutes(bidData.get('endDateMinutes'));
        }

        if(bidData.get('specProposalCloseDateTime')) {
            bidData.get('specProposalCloseDateTime').setHours(bidData.get('specProposalCloseDateHour'));
            bidData.get('specProposalCloseDateTime').setMinutes(bidData.get('specProposalCloseDateMinute'));
        }

        // 견적서 제출 마감일시
        if(bidData.get('quotationSubmitCloseDateTime')) {
            bidData.get('quotationSubmitCloseDateTime').setHours(bidData.get('quotationSubmitCloseDateHours'));
            bidData.get('quotationSubmitCloseDateTime').setMinutes(bidData.get('quotationSubmitCloseDateMinutes'));
        }
    },

    /* 날짜 및 시간 가공 */
    getDateTime: function(param) {
        var me = this;

        var bidData = Ext.create('bid_sp.model.bid.Bid', param);

        // 수의시담시작일시
        if(bidData.get('beginDateTime')) {
            bidData.set('beginDateHours', bidData.get('beginDateTime').getHours());
            bidData.set('beginDateMinutes', bidData.get('beginDateTime').getMinutes());
        }

        // 수의시담마감일시
        if(bidData.get('endDateTime')) {
            bidData.set('endDateHours', bidData.get('endDateTime').getHours());
            bidData.set('endDateMinutes', bidData.get('endDateTime').getMinutes());
        }


        if(bidData.get('specProposalCloseDateTime')) {
            bidData.set('specProposalCloseDateHour', bidData.get('specProposalCloseDateTime').getHours());
            bidData.set('specProposalCloseDateMinute', bidData.get('specProposalCloseDateTime').getMinutes());
        }

        //견적서제출마감일시
        if(bidData.get('quotationSubmitCloseDateTime')) {
            bidData.set('quotationSubmitCloseDateHours', bidData.get('quotationSubmitCloseDateTime').getHours());
            bidData.set('quotationSubmitCloseDateMinutes', bidData.get('quotationSubmitCloseDateTime').getMinutes());
        }

        return bidData;
    },

    /* 입찰 정보 조회 */
    searchBid: function(bidId, type) {
        var me = this, vm = this.getViewModel();
        var progressStore = vm.getStore('progressStore');

        progressStore.load({
            params:{
                bidId : bidId
            }
        });

        vm.findBid(bidId, type).then({
            success: function(result) {
                vm.set('bidData', me.getDateTime(result));
                me.lookupReference('defaultForm').getForm().clearInvalid();
                me.setBtnAction();
            }
        }).done();
    },

    /* 품목 정보 조회 */
    searchBidItems: function(searchParam) {
        var me = this, vm = this.getViewModel();

        var itemStore = vm.getStore('bidItemStore');

        itemStore.load({
            params: searchParam,
            callback: function(records, operation, success) {

            }
        });
    },

    close: function() {
        var me = this, view = this.getView();

        me.clearData();

        view.fireEvent('closeDetail');
    },

    /* 버튼 및 속성 제어 */
    setBtnAction: function() {
        var me = this, vm = this.getViewModel();
        var pureYn = vm.get('pureYn'); // 순수수의 여부
        var bidData = vm.get('bidData');

        if(bidData.get('progressState') === 'CreateProgress') {
            vm.set('isVisibleSaveBtn'  , false);
            vm.set('isVisibleDelBtn'   , false);
            vm.set('isVisibleNoticeBtn', false);
        } else if(bidData.get('progressState') === 'PreAttendProgress') {		// 공고진행
            vm.set('isVisibleSaveBtn'  , true);
            vm.set('isVisibleDelBtn'   , true);
            vm.set('isVisibleNoticeBtn', true);
            vm.set('isReadOnly'        , true);
        } else {
            vm.set('isVisibleSaveBtn'  , true);
            vm.set('isVisibleDelBtn'   , true);
            vm.set('isVisibleNoticeBtn', true);
            vm.set('isReadOnly'        , true);
        }

        var bidTypeKindStore = vm.getStore('bidTypeKindStore');

        bidTypeKindStore.clearFilter();

        if(pureYn){ 	// bidType 이 LowestPrice(최저가), TotalEval(종합낙찰제) 만 선택가능
            bidTypeKindStore.addFilter([
                function(item) {
                    if(item.get('value') == 'LowestPrice' || item.get('value') == 'TotalEval'){
                        return item;
                    }
                }
            ]);
        }else{		// bidType 이 LowestPrice(최저가), TotalEval(종합낙찰제), QualifiedEval(적격),  Nego(협상)만 선택가능
            bidTypeKindStore.addFilter([
                function(item) {
                    if(item.get('value') == 'LowestPrice' || item.get('value') == 'TotalEval' || item.get('value') == 'QualifiedEval' || item.get('value') == 'Nego'){
                        return item;
                    }
                }
            ]);
        }
    },

    /* 2단계 콤보박스 Change Event */
    setSpecComboChange: function() {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        var bidType      = bidData.get('bidType');
        var twoPhaseType = bidData.get('twoPhaseType');

        if(bidType === 'TwoPhase' && twoPhaseType === 'Separate') {
            vm.set('isDisableSpec', false);
        } else {
            vm.set('isDisableSpec', true);

            bidData.set('specProposalCloseDateTime'  , null);
            bidData.set('specProposalCloseDateHour'  , 0);
            bidData.set('specProposalCloseDateMinute', 0);
        }
    },

    showPrintPopup: function() {
        var me = this, vm = this.getViewModel();

        var type = 'PrivateContractDetailSPForm';

        window.open('about:blank', 'print', 'location=no,width=800,height=500,scrollbars=yes');

        var frm = Site.util.Format.makeForm('print.do', 'POST',  'print');

        frm.appendChild(Site.util.Format.makeInput('hidden', 'documentType', type));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'groupCode'   , 'PrintDocumentType'));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'id'          , vm.get('bidData.id')));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'standardDate' , Ext.util.Format.date(vm.get('bidData.noticeDate'),'Y-m-d')));
        frm.appendChild(Site.util.Format.makeInput('hidden', Ext.query("meta[name='_csrf_parameter']")[0].content,Ext.query("meta[name='_csrf']")[0].content));

        document.body.appendChild(frm);
        frm.submit();
    },

    onPrintButtonClick: function(button, e, eOpts) {
        var me = this;

        me.showPrintPopup();
    },

    /* 닫기 버튼 클릭 시 */
    onCloseButtonClick: function(button, e, eOpts) {
        var me = this;

        me.close();
    },

    onContainerItemClick: function(item) {
        var me = this;
        if(item.urlLink !== 'none'){ //tabUrl이 있는 경우
            var classPath = item.urlLink;

            //modal로 뜨도록 수정 (통테이후 반영예정)
            var popup = Ext.create(classPath, {
                floating : true,
                modal:true,
                title : item.tabTitle,
                bidNo : item.paramNo,
                noticeDate : item.paramNoticeDate,
                companyId : item.companyId,
                width:1024,
                height:768,
                resizable:true,
                draggable:true
            });

            popup.show();
            popup.center();

            //------------------------------------------------------------------tab으로 뜨도록
            //     if (MdiManager.hasView(classPath)) { //기존에 tab이 띄워져있으면 닫음
            //         var view = MdiManager.mdiTab.down(Ext.String.format('>[classpath='+classPath+']'));
            //         MdiManager.mdiTab.remove(view,true);
            //     }
            //     MdiManager.addViewToTab(classPath, { //tab 띄움
            //         title: item.tabTitle,
            //         authKey:  item.menuCode,
            //         bidNo : item.paramNo,
            //         noticeDate : item.paramNoticeDate,
            //         companyId : item.companyId
            //     }, classPath);
        }else if(item.notiMsg !== 'none'){ //화면을 보여주는 것 보다 alert창을 띄워야 하는 경우
            Etna.Message.alert(item.notiMsg);
        }
    },

    onPrivateReasonComboboxChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        var reasonCode    = bidData.get('privateReasonCode');
        var privateReason = bidData.get('privateReason');

        var privateReasonCode = me.lookupReference('privateReasonCode');

        if(!Ext.isEmpty(newValue) || !Ext.isEmpty(reasonCode)) {
            if(!!privateReasonCode.findRecordByValue(newValue).data.additionalProperty1){

                var privateReason = privateReasonCode.findRecordByValue(newValue).data.additionalProperty1;

                if(!!privateReason){
                    privateReason = Ext.String.format('#{{0}}',privateReason.replace(/<br>+/g, ' '+String.fromCharCode(10)));
                    bidData.set('privateReason', Ext.String.format('#{{0}}',privateReason.replace(/\\n+/g, ' '+String.fromCharCode(10))));
                }
            }
        }
    },

    /* 낙찰자 결정 방법 Combo Box Change  */
    onBidTypeChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        if(newValue === 'TotalEval') {			// 종합낙찰제
            vm.set('isVisibleTotEval' , false);
            vm.set('isVisibleProposal', true);

        } else if(newValue === 'Nego') {			// 협상
            vm.set('isVisibleProposal', false);
            vm.set('isVisibleTotEval' , true);

            me.getViewModel().get('bidData').set('twoPhaseType', 'Nothing');
            me.lookupReference('twoPhaseTypeCombo').setValue('Nothing');
        } else if(newValue === 'TwoPhase') {			//2단계
            vm.set('isVisibleTotEval' , true);
            vm.set('isVisibleProposal', true);
            vm.set('isDisableSpec'    , true);
        }else if(newValue === 'LowestPrice'){		// 최저가
            bidData.set('proposalTechnicalRate', null);
            bidData.set('proposalPriceRate'    , null);
            bidData.set('totalEvalMethod'      , null);

            vm.set('isVisibleTotEval' , true);
            vm.set('isVisibleProposal', true);
            vm.set('isDisableSpec'    , true);

        }else {
            bidData.set('proposalTechnicalRate', null);
            bidData.set('proposalPriceRate'    , null);
            bidData.set('totalEvalMethod'      , null);

            vm.set('isVisibleTotEval' , true);
            vm.set('isVisibleProposal', true);
            vm.set('isDisableSpec'    , true);

            me.getViewModel().get('bidData').set('twoPhaseType', 'Nothing');
            me.lookupReference('twoPhaseTypeCombo').setValue('Nothing');
        }

        me.setSpecComboChange();
    },

    ontwoPhaseTypeChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        var bidType = me.getViewModel().get('bidData').get('bidType');

        // 낙찰자결정방법이 종합평가(TotalEval)인데 2단계를 동시(Concurrent)선택했을 경우
        if(bidType == 'TotalEval' && newValue == 'Concurrent'){
            Etna.Message.alert('#{"종합평가"낙찰방식일 경우 "동시"선택이 불가능합니다.}');
            me.getViewModel().get('bidData').set('twoPhaseType', 'Nothing');
            me.lookupReference('twoPhaseTypeCombo').setValue('Nothing');
        }else{
            me.setSpecComboChange();
        }
    },

    onProposalRateChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        bidData.set('proposalPriceRate' , newValue === 0 ? 0 : 100 - newValue);
    },

    /*
        공동수급여부 toggle 변경시
        true
        공동수급접수마감일시 오늘로 세팅

        false
        공동수급접수마감일시 값 지우기
    */
    onEtnatogglefieldChange11: function(field, newValue, oldValue, eOpts) {
        var me = this,
            vm = me.getViewModel();

        if(!newValue){
            vm.get('bidData').set('jointSupplyDemandVendorCount', 0);
            vm.get('bidData').set('jointSupplyDemandMethod', null);
        }else{
            vm.get('bidData').set('jointSupplyDemandVendorCount', !vm.get('bidData').get('jointSupplyDemandVendorCount')?2:vm.get('bidData').get('jointSupplyDemandVendorCount'));
        }
    },

    onItemCellEditingBeforeEdit: function(editor, context, eOpts) {
        var me = this, vm = this.getViewModel();

        return !vm.get('isReadOnly');
    },

    onItemCellEditingEdit: function(editor, context, eOpts) {
        var me = this, vm = this.getViewModel();
        var field  = context.field;
        var record = context.record;

        var itemStore = vm.getStore('bidItemStore');

        if(field === 'basisItemYn') {
            itemStore.each(function(item){
                if(item.get('id') !== record.get('id')) {
                    item.set('basisItemYn', null);
                }
            });
        }
    },

    onAfterRender: function(component, eOpts) {
        var me = this;

        me.getView().setLoading(true);
    },

    onContractTypeKindStoreLoad: function(store, records, successful, eOpts) {
        if(successful) {
            store.filter([
            {
                filterFn: function(record) {
                    return (record.get('value')!=='DistributorPrice' && record.get('value')!=='TransformatorPrice' &&
                    record.get('value')!=='GernalTransformator' && record.get('value')!=='DistributorPriceInspectionCompany'
                    );
                }
            }
            ]);
        }
    }

});

/*
 * File: app/view/foreignPrivateContract/detail/product/ForeignPrivateContractDetailSP.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.foreignPrivateContract.detail.product.ForeignPrivateContractDetailSP', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.foreignprivatecontractdetailproductforeignprivatecontractdetailsp',

               
                                                                                       
                                                                                            
                              
                                 
                             
                        
                         
                                  
                              
                                   
                                  
                                  
                                 
                                  
                                
                         
                                     
                      
                         
                                 
                                 
                                
                        
                                      
                                   
                                  
                                 
                                  
      

    controller: 'foreignprivatecontractdetailproductforeignprivatecontractdetailsp',
    viewModel: {
        type: 'foreignprivatecontractdetailproductforeignprivatecontractdetailsp'
    },
    autoScroll: true,
    ui: 'main',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    bind: {
        title: '#{수의계약상세}'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'page',
            bind: {
                hidden: '{!hidePrivateSettlementToolbarYn}'
            },
            items: [
                {
                    xtype: 'displayfield',
                    value: '#{물품에 대한 수의계약 공고문을 조회합니다.}'
                },
                {
                    xtype: 'tbspacer',
                    flex: 1
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-print',
                    text: '#{인쇄}',
                    listeners: {
                        click: 'onPrintButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseButtonClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'kepcopanel',
            collapsible: true,
            reference: 'kepcopanel',
            height: 150,
            bind: {
                store: '{progressStore}'
            },
            listeners: {
                itemClick: 'onContainerItemClick'
            }
        },
        {
            xtype: 'tabpanel',
            flex: 1,
            reference: 'bidTabPanel',
            cls: 'nbr',
            activeTab: 0,
            deferredRender: false,
            plain: true,
            layout: {
                type: 'card',
                deferredRender: true
            },
            items: [
                {
                    xtype: 'form',
                    reference: 'defaultForm',
                    fixed: true,
                    autoScroll: true,
                    layout: 'column',
                    bodyPadding: 5,
                    header: false,
                    title: '#{기본정보}',
                    trackResetOnLoad: true,
                    items: [
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            defaults: {
                                labelWidth: 140
                            },
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{공고일반}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{공고번호/차수}',
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 125,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.no}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '/'
                                        },
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 60,
                                            fieldStyle: 'text-align: center;',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.revision}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'datefield',
                                    width: 270,
                                    fieldLabel: '#{공고일자}',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.noticeDate}'
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    reference: 'purchasePlanDate',
                                    width: 270,
                                    fieldLabel: '#{구매계획일자}',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.purchasePlanDate}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    reference: 'purchasePlanNo',
                                    width: 300,
                                    fieldLabel: '#{구매계획번호}',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.purchasePlanNo}',
                                        hideTrigger: '{isReadOnly}'
                                    },
                                    triggers: {
                                        mytrigger: {
                                            handler: function(field, trigger, e) {
                                                var controller = field.up('[controller]').controller;
                                                controller.showPurchasePlanPopup();
                                            },
                                            allowAlwaysOnClick: true,
                                            cls: 'trigger-search'
                                        }
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    reference: 'prDate',
                                    width: 270,
                                    fieldLabel: '#{구매요청일자}',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.prDate}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    width: 300,
                                    fieldLabel: '#{구매유형}',
                                    readOnly: true,
                                    editable: false,
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.itemType}',
                                        store: '{purchaseTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'inOutType',
                                    width: 300,
                                    fieldLabel: '#{국내외구분}',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.inOutType}',
                                        store: '{inOutTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    reference: 'name',
                                    width: '100%',
                                    fieldLabel: '#{공고명}',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 400,
                                    bind: {
                                        value: '{bidData.name}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 300,
                                    fieldLabel: '#{입찰담당부서}',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeDepartmentName}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 300,
                                    fieldLabel: '#{입찰담당자}',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeName}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 2,
                                    reference: 'privateReasonCode',
                                    width: 300,
                                    fieldLabel: '#{수의사유}',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    valueField: 'id',
                                    bind: {
                                        value: '{bidData.privateReasonCode}',
                                        store: '{reasonCodeStore}'
                                    },
                                    listeners: {
                                        change: 'onPrivateReasonComboboxChange'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    colspan: 2,
                                    height: 100,
                                    width: '100%',
                                    fieldLabel: ' ',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 2000,
                                    bind: {
                                        value: '{bidData.privateReason}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            defaults: {
                                labelWidth: 140
                            },
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{계약입찰방식}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    width: 300,
                                    fieldLabel: '#{모의입찰여부}',
                                    layout: {
                                        type: 'table',
                                        columns: 2
                                    },
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{모의입찰}',
                                            offText: '#{실제입찰}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.simulationBidYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'contractType',
                                    width: 300,
                                    fieldLabel: '#{계약구분}',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.contractType}',
                                        store: '{contractTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'bidMethod',
                                    width: 300,
                                    fieldLabel: '#{입찰방식}',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.bidMethod}',
                                        store: '{bidMethodStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 2,
                                    width: 300,
                                    fieldLabel: '#{계약방법}',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.competitionType}',
                                        store: '{competitionTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'bidType',
                                    width: 300,
                                    fieldLabel: '#{낙찰자결정방법}',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.bidType}',
                                        store: '{bidTypeKindStore}'
                                    },
                                    listeners: {
                                        change: 'onBidTypeChange'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{2단계}',
                                    layout: {
                                        type: 'table',
                                        columns: 2
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            reference: 'twoPhaseTypeCombo',
                                            width: 100,
                                            readOnly: true,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.twoPhaseType}',
                                                store: '{twoPhaseTypeKindStore}'
                                            },
                                            listeners: {
                                                change: 'ontwoPhaseTypeChange'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            margin: '0 5',
                                            readOnly: true,
                                            boxLabel: '#{희망수량}',
                                            inputValue: 'true',
                                            uncheckedValue: 'false',
                                            bind: {
                                                disabled: '{pureYn}',
                                                value: '{bidData.wishQuantityYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '#{배점한도}',
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{isVisibleProposal}'
                                    },
                                    items: [
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            width: 30,
                                            value: '#{기술}'
                                        },
                                        {
                                            xtype: 'combobox',
                                            margin: '0 7 0 0',
                                            width: 50,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'id',
                                            bind: {
                                                value: '{bidData.proposalTechnicalRate}',
                                                store: '{proposalTechnicalRateCodeStore}'
                                            },
                                            listeners: {
                                                change: 'onProposalRateChange'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            width: 30,
                                            value: '#{가격}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            width: 50,
                                            readOnly: true,
                                            editable: false,
                                            bind: {
                                                value: '{bidData.proposalPriceRate}'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            margin: '0 6',
                                            width: '100%',
                                            labelWidth: 140,
                                            readOnly: true,
                                            boxLabel: '#{소프트웨어사업여부}',
                                            inputValue: 'true',
                                            uncheckedValue: 'false'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'textfield',
                                    reference: 'deliveryDueDate',
                                    width: 300,
                                    fieldLabel: '#{납기}',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.deliveryDueDate}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    reference: 'deliveryLocation',
                                    width: 300,
                                    fieldLabel: '#{납품장소}',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 500,
                                    bind: {
                                        value: '{bidData.deliveryLocation}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    fieldLabel: '#{종합낙찰방식}',
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    bind: {
                                        hidden: '{isVisibleTotEval}'
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            margin: 0,
                                            width: 150,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.totalEvalMethod}',
                                                store: '{totalEvalMethodKindStore}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5'
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            width: '100%',
                                            labelWidth: 140,
                                            readOnly: true,
                                            boxLabel: '#{종합평가}',
                                            inputValue: 'true',
                                            uncheckedValue: 'false'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'numberfield',
                                    validator: function(value) {
                                        if (/[^0-9][.][^0-9]/g.test(value)){
                                            value = value.replace(/[^0-9]/g, '');
                                        }
                                        this.setValue(Number(value));

                                        return true;
                                    },
                                    coverFormat: '0,000.##',
                                    reference: 'presumedPrice',
                                    width: 300,
                                    fieldLabel: '#{추정가격(VAT별도)}',
                                    fieldStyle: 'text-align: right',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    hideTrigger: true,
                                    maxLength: 18,
                                    bind: {
                                        value: '{bidData.presumedPrice}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'currencyCode',
                                    width: 300,
                                    fieldLabel: '#{통화}',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'id',
                                    bind: {
                                        value: '{bidData.currencyCode}',
                                        store: '{currencyCodeStore}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{하자보증기간}',
                                    layout: {
                                        type: 'table',
                                        columns: 4
                                    },
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            validator: function(value) {
                                                if (/[^0-9]/g.test(value)){
                                                    value = value.replace(/[^0-9]/g, '');
                                                }
                                                this.setValue(Number(value));

                                                return true;
                                            },
                                            margin: 0,
                                            width: 70,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            enforceMaxLength: true,
                                            maxLength: 4,
                                            bind: {
                                                value: '{bidData.warrantyPeriodYears}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{년}'
                                        },
                                        {
                                            xtype: 'textfield',
                                            validator: function(value) {
                                                if (/[^0-9]/g.test(value)){
                                                    value = value.replace(/[^0-9]/g, '');
                                                }
                                                this.setValue(Number(value));

                                                if(Number(value)>11){
                                                    this.setValue(null);
                                                }

                                                return true;
                                            },
                                            margin: 0,
                                            width: 40,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            enforceMaxLength: true,
                                            maxLength: 2,
                                            bind: {
                                                value: '{bidData.warrantyPeriodMonths}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{개월}'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            defaults: {
                                labelWidth: 150
                            },
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{입찰진행}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    layout: {
                                        type: 'table',
                                        columns: 11
                                    },
                                    bind: {
                                        fieldLabel: '{privateSettlementDateText}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            reference: 'beginDateTime',
                                            hidden: true,
                                            margin: '0 5 0 0',
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.beginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'beginDateHours',
                                            hidden: true,
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 24,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateHours}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            hidden: true,
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'beginDateMinutes',
                                            hidden: true,
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateMinutes}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            hidden: true,
                                            margin: '0 5',
                                            value: '#{분}'
                                        },
                                        {
                                            xtype: 'displayfield',
                                            hidden: true,
                                            margin: '0 5',
                                            value: '~'
                                        },
                                        {
                                            xtype: 'datefield',
                                            reference: 'endDateTime',
                                            margin: '0 5 0 0',
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.endDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'endDateHours',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 24,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateHours}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'endDateMinutes',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateMinutes}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    fieldLabel: '#{공동수급여부}',
                                    layout: {
                                        type: 'table',
                                        columns: 4
                                    },
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            margin: '0 5 0 0 ',
                                            readOnly: true,
                                            onText: '#{예}',
                                            offText: '#{아니오}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.jointSupplyDemandYn}'
                                            },
                                            listeners: {
                                                change: 'onEtnatogglefieldChange11'
                                            }
                                        },
                                        {
                                            xtype: 'combobox',
                                            margin: '0 10 0 0',
                                            width: 120,
                                            fieldLabel: '#{공동수급방법}',
                                            hideLabel: true,
                                            labelWidth: 140,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{해당없음}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                hidden: '{!bidData.jointSupplyDemandYn}',
                                                value: '{bidData.jointSupplyDemandMethod}',
                                                store: '{jointSupplyDemandMethodKind}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{제한 업체수(2이상)}',
                                            bind: {
                                                hidden: '{!bidData.jointSupplyDemandYn}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 99) {
                                                    value = 99;
                                                } else if(value < 2) {
                                                    value = 2;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: 0,
                                            width: 50,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            emptyText: '2',
                                            decimalPrecision: 0,
                                            maxValue: 99,
                                            minValue: 2,
                                            bind: {
                                                hidden: '{!bidData.jointSupplyDemandYn}',
                                                value: '{bidData.jointSupplyDemandVendorCount}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 1,
                                    fieldLabel: '#{견적서제출마감일시}',
                                    layout: {
                                        type: 'table',
                                        columns: 6
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            reference: 'quotationSubmitCloseDateTime',
                                            margin: '0 5 0 0',
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.quotationSubmitCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'quotationSubmitCloseDateHour',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.quotationSubmitCloseDateHours}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'quotationSubmitCloseDateMinute',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.quotationSubmitCloseDateMinutes}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'checkboxfield',
                                    colspan: 1,
                                    reference: 'quotationEvalYn',
                                    hideLabel: true,
                                    readOnly: true,
                                    boxLabel: '#{제한}',
                                    bind: {
                                        value: '{bidData.quotationEvalYn}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    validator: function(value) {
                                        if (/[^0-9]/g.test(value)){
                                            value = value.replace(/[^0-9]/g, '');
                                        }
                                        this.setValue(Number(value));


                                        return true;
                                    },
                                    colspan: 2,
                                    width: 220,
                                    fieldLabel: '#{견적서제출부수}',
                                    fieldStyle: 'text-align: right',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 22,
                                    bind: {
                                        value: '{bidData.quotationSubmitCount}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    hidden: true,
                                    fieldLabel: '#{규격서제출마감일시}',
                                    layout: {
                                        type: 'table',
                                        columns: 6
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            reference: 'specProposalCloseDateTime',
                                            margin: 0,
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                disabled: '{isDisableSpec}',
                                                value: '{bidData.specProposalCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'specProposalCloseDateHour',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                disabled: '{isDisableSpec}',
                                                value: '{bidData.specProposalCloseDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'specProposalCloseDateMinute',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                disabled: '{isDisableSpec}',
                                                value: '{bidData.specProposalCloseDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{분}'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            layout: 'fit',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{첨부파일}',
                            items: [
                                {
                                    xtype: 'etnaattachmentfield',
                                    reference: 'attachmentField',
                                    width: '100%',
                                    fieldLabel: '#{파일첨부}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.attachFileGroupId}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    reference: 'attendCon'
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{입찰추가사항}',
                            layout: {
                                type: 'table',
                                columns: 1,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'textareafield',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{용도}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 500,
                                    bind: {
                                        value: '{bidData.usage}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{추가정보제공처}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 500,
                                    bind: {
                                        value: '{bidData.moreInformation}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{기타}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 1000,
                                    bind: {
                                        value: '{bidData.etc}'
                                    }
                                }
                            ]
                        }
                    ],
                    tabConfig: {
                        xtype: 'tab',
                        textAlign: 'left'
                    }
                },
                {
                    xtype: 'form',
                    autoScroll: true,
                    layout: 'column',
                    bodyPadding: 5,
                    title: '#{품목정보}',
                    items: [
                        {
                            xtype: 'gridpanel',
                            columnWidth: 1,
                            reference: 'gridPanel',
                            stateId: '1f4a38d3-d146-495b-e054-0017a4770c10',
                            stateful: true,
                            margin: '0 0 5 0',
                            minHeight: 200,
                            ui: 'grid',
                            title: '#{품목정보}',
                            bind: {
                                store: '{bidItemStore}'
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    align: 'center',
                                    dataIndex: 'itemCode',
                                    text: '#{자재식별번호}'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 250,
                                    dataIndex: 'itemName',
                                    text: '#{품명}'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    required: true,
                                    width: 200,
                                    dataIndex: 'itemSpec',
                                    text: '#{규격}',
                                    editor: {
                                        xtype: 'textfield',
                                        enforceMaxLength: true,
                                        maxLength: 500
                                    }
                                },
                                {
                                    xtype: 'etnastorecolumn',
                                    required: true,
                                    align: 'center',
                                    dataIndex: 'itemUnit',
                                    text: '#{단위}',
                                    valueField: 'id',
                                    displayField: 'text',
                                    bind: {
                                        store: '{unitStore}'
                                    },
                                    editor: {
                                        xtype: 'combobox',
                                        editable: false,
                                        enforceMaxLength: true,
                                        maxLength: 36,
                                        queryMode: 'local',
                                        valueField: 'id',
                                        bind: {
                                            store: '{unitStore}'
                                        }
                                    }
                                },
                                {
                                    xtype: 'numbercolumn',
                                    required: true,
                                    align: 'right',
                                    dataIndex: 'quantity',
                                    text: '#{수량}',
                                    format: '0,000.###',
                                    editor: {
                                        xtype: 'numberfield',
                                        enforceMaxLength: true,
                                        maxLength: 18,
                                        minValue: 0
                                    }
                                },
                                {
                                    xtype: 'checkcolumn',
                                    reference: 'basisItemYn',
                                    width: 90,
                                    dataIndex: 'basisItemYn',
                                    text: '#{기준품목}',
                                    bind: {
                                        hidden: '{!bidData.wishQuantityYn}'
                                    },
                                    editor: {
                                        xtype: 'checkboxfield'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    align: 'center',
                                    dataIndex: 'prNo',
                                    text: '#{구매계획번호}'
                                }
                            ],
                            plugins: [
                                {
                                    ptype: 'cellediting',
                                    listeners: {
                                        beforeedit: 'onItemCellEditingBeforeEdit',
                                        edit: 'onItemCellEditingEdit'
                                    }
                                },
                                {
                                    ptype: 'etnacelltip',
                                    deferredRender: true
                                },
                                {
                                    ptype: 'etnaexport',
                                    useRenderer: true,
                                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                                },
                                {
                                    ptype: 'etnagridblock'
                                },
                                {
                                    ptype: 'etnagridcontext',
                                    contextMenu: true,
                                    advancedContextMenu: false
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{첨부파일}',
                            layout: {
                                type: 'table',
                                columns: 1,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'etnaattachmentfield',
                                    reference: 'purchaseSpecAttachFileGroup',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{구매규격서}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.purchaseSpecAttachFileGroupId}'
                                    }
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    reference: 'specialConditionAttachFileGroup',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{특수조건}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.specialConditionAttachFileGrpId}'
                                    }
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    reference: 'etcAttachFileGroup',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{기타첨부}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.etcAttachFileGroupId}'
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],
    listeners: {
        afterrender: 'onAfterRender'
    }

});

/*
 * File: app/view/privateContract/detail/service/PrivateContractDetailSPViewModel1.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewModel1', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.foreignprivatecontractdetailserviceforeignprivatecontractdetailsp',

               
                                   
                                
                               
                                
                          
                          
                          
                               
                                         
                                         
                                   
      

    data: {
        newDate: new Date(),
        bidData: null,
        isEditNumber: false,
        isVisibleSaveBtn: true,
        isVisibleDelBtn: true,
        isVisibleNoticeBtn: true,
        isReadOnly: false
    },

    stores: {
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        purchaseTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.PurchaseTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        inOutTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.InOutTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        bidMethodStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        competitionTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CompetitionTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        twoPhaseTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.TwoPhaseTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        currencyCodeStore: {
            groupCode: 'Currency',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        bidTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        reasonCodeStore: {
            groupCode: 'PrivatereasonServiceCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodesWithProperty',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        proposalTechnicalRateCodeStore: {
            groupCode: 'ProposalTechnicalRateCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        jointSupplyDemandMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.JointSupplyDemandMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            filters: {
                filterFn: function(item) {
                    // 분담이행(Allotted), 공동이행(Joint)만 보인다.

                    if(item && item.get('value')){
                        return item.get('value') == 'Joint' || item.get('value') == 'Allotted';
                    }
                }
            }
        },
        itemTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ItemTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        decimalPointDigitNumberStore: {
            data: [
                {
                    value: 0,
                    text: 0
                },
                {
                    value: 1,
                    text: 1
                },
                {
                    value: 2,
                    text: 2
                },
                {
                    value: 3,
                    text: 3
                },
                {
                    value: 4,
                    text: 4
                }
            ],
            fields: [
                {
                    name: 'value'
                },
                {
                    name: 'text'
                }
            ]
        },
        submitYnStore: {
            data: [
                {
                    value: true,
                    text: '제출'
                },
                {
                    value: false,
                    text: '미제출'
                }
            ],
            fields: [
                {
                    name: 'value'
                },
                {
                    name: 'text'
                }
            ]
        },
        vendorYnStore: {
            data: [
                {
                    value: true,
                    text: 'Y'
                },
                {
                    value: false,
                    text: 'N'
                }
            ],
            fields: [
                {
                    name: 'value'
                },
                {
                    name: 'text'
                }
            ]
        },
        privatereasonCodeStore: {
            model: 'bid_sp.model.bid.comboProperty',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.findCodesAndAdditionalProperty',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'additionalProperty1'
                }
            ]
        },
        progressStore: {
            model: 'bid_sp.model.bid.ProgressState',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findProgressStateSPList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        fileItemStore: {
            model: 'bid_sp.model.bid.FileItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.getFileItemList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        }
    },
    formulas: {
        simulation: {
            get: function(data) {
                return data.simulationBidYn;
            },
            bind: {
                simulationBidYn: '{bidData.simulationBidYn}'
            }
        },
        jointSupplyDemand: {
            get: function(data) {
                return data.jointSupplyDemandYn;
            },
            bind: {
                jointSupplyDemandYn: '{bidData.jointSupplyDemandYn}'
            }
        },
        hideSettlementBtnYn: {
            get: function(data) {
                // 수의시담 버튼 제어
                // 공고진행(PreAttendProgress) 일때만 가능
                if(data == 'PreAttendProgress'){
                    return false;
                }else{
                    return true;
                }
            },
            bind: '{bidData.progressState}'
        }
    },

    findBid: function(bidId, type) {
        var deferred = Ext.create('Deft.Deferred');

        smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidBasicInfo(bidId, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    }

});

/*
 * File: app/view/privateContract/detail/service/PrivateContractDetailSPViewController1.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewController1', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.foreignprivatecontractdetailserviceforeignprivatecontractdetailsp',

    /* Init Function */
    init: function() {
        var me = this, view = me.getView();

        view.setDefaultFormData = Ext.Function.bind(me.setDefaultFormData, me);
        view.loadBidData        = Ext.Function.bind(me.loadBidData, me);

    },

    /* 데이터 초기화 */
    clearData: function() {
        var me = this, vm = this.getViewModel();

        me.lookupReference('bidTabPanel').setActiveTab(0);

        vm.set('bidData', null);

        vm.set('newDate'               , new Date());
        vm.set('isVisibleSaveBtn'      , true);
        vm.set('isVisibleDelBtn'       , true);
        vm.set('isVisibleNoticeBtn'    , true);
        vm.set('isReadOnly'            , false);
    },

    /* 입찰공고 신규 작성 시 데이터 세팅 */
    setDefaultFormData: function() {
        var me = this, view = this.getView();

        me.getView().setLoading(true);

        Etna.onDone(function(){
            var loginUser = Cmmn.User.getData();
            var operatingUnitStore = me.getViewModel().getStore('operatingUnitStore');
            var operatingUnitId = operatingUnitStore&&operatingUnitStore.getRange().length>0?operatingUnitStore.first().get('id'):null;

            var model = me.getDateTime({
                operatingUnitId				 : operatingUnitId,
                competitionType              : 'Private',
                bidType                      : 'LowestPrice',
                progressState                : 'CreateProgress',
                inOutType                    : 'In',
                currencyCode                 : 'KRW',
                representativeDepartmentName : loginUser.departmentName,
                representativeName           : loginUser.name,
                representativeId             : loginUser.id,
                purchaseGroupId              : loginUser.purchaseGroupId,
                noticeDate                   : new Date(),
                purchasePlanDate             : new Date(),
                prDate                       : new Date(),
                autoAttachFileGroupId		 : 'CodeOfConduct',
                beginDateTime				 : new Date(),
                endDateTime					 : new Date(),
                quotationSubmitCloseDateTime : new Date(),
                twoPhaseType				 : 'Nothing'
            });


            me.getViewModel().set('bidData', model);
            me.setBtnAction();
            me.getView().setLoading(false);

        });
    },

    /* 작성된 입찰공고 조회 시 */
    loadBidData: function(bidId, type) {
        var me = this, vm = this.getViewModel(), view = this.getView();

        Ext.suspendLayouts();

        view.setLoading(true);

        me.searchBid(bidId, type);

        var fileGroupId = 'ConstructionBidFileGroup';
        if(vm.get('bidData.ItemTpye')=='Service'){
            fileGroupId = 'ServiceBidFileGroup';
        }

        var searchParam = {
            bidId 		: bidId,
            type  		: type,
            fileGroupId	: fileGroupId,
            bidFileType	: 'Private'
        };


        var fileItemStore = me.getViewModel().get('fileItemStore');

        fileItemStore.load({
            params: searchParam,
            callback: function(records, operation, success){

            }
        });

        Etna.onDone(function() {
            Ext.resumeLayouts(true);
            view.setLoading(false);
        });
    },

    setDateTime: function() {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        // 수의시담 시작 일시
        if(bidData.get('beginDateTime')) {
            bidData.get('beginDateTime').setHours(bidData.get('beginDateHours'));
            bidData.get('beginDateTime').setMinutes(bidData.get('beginDateMinutes'));
        }

        // 수의시담 마감 일시
        if(bidData.get('endDateTime')) {
            bidData.get('endDateTime').setHours(bidData.get('endDateHours'));
            bidData.get('endDateTime').setMinutes(bidData.get('endDateMinutes'));
        }

        if(bidData.get('specProposalCloseDateTime')) {
            bidData.get('specProposalCloseDateTime').setHours(bidData.get('specProposalCloseDateHour'));
            bidData.get('specProposalCloseDateTime').setMinutes(bidData.get('specProposalCloseDateMinute'));
        }

        // 견적서 제출 시작일시
        if(bidData.get('quotationSubmitStartDateTime')) {
            bidData.get('quotationSubmitStartDateTime').setHours(bidData.get('quotationSubmitStartDateHours'));
            bidData.get('quotationSubmitStartDateTime').setMinutes(bidData.get('quotationSubmitStartDateMinutes'));
        }

        // 견적서 제출 마감일시
        if(bidData.get('quotationSubmitCloseDateTime')) {
            bidData.get('quotationSubmitCloseDateTime').setHours(bidData.get('quotationSubmitCloseDateHours'));
            bidData.get('quotationSubmitCloseDateTime').setMinutes(bidData.get('quotationSubmitCloseDateMinutes'));
        }
    },

    /* 날짜 및 시간 가공 */
    getDateTime: function(param) {
        var me = this;

        var bidData = Ext.create('bid_sp.model.bid.Bid', param);

        // 수의시담시작일시
        if(bidData.get('beginDateTime')) {
            bidData.set('beginDateHours', bidData.get('beginDateTime').getHours());
            bidData.set('beginDateMinutes', bidData.get('beginDateTime').getMinutes());
        }

        // 수의시담마감일시
        if(bidData.get('endDateTime')) {
            bidData.set('endDateHours', bidData.get('endDateTime').getHours());
            bidData.set('endDateMinutes', bidData.get('endDateTime').getMinutes());
        }

        if(bidData.get('specProposalCloseDateTime')) {
            bidData.set('specProposalCloseDateHour', bidData.get('specProposalCloseDateTime').getHours());
            bidData.set('specProposalCloseDateMinute', bidData.get('specProposalCloseDateTime').getMinutes());
        }

        //견적서제출시작일시
        if(bidData.get('quotationSubmitStartDateTime')) {
            bidData.set('quotationSubmitStartDateHours', bidData.get('quotationSubmitStartDateTime').getHours());
            bidData.set('quotationSubmitStartDateMinutes', bidData.get('quotationSubmitStartDateTime').getMinutes());
        }

        //견적서제출마감일시
        if(bidData.get('quotationSubmitCloseDateTime')) {
            bidData.set('quotationSubmitCloseDateHours', bidData.get('quotationSubmitCloseDateTime').getHours());
            bidData.set('quotationSubmitCloseDateMinutes', bidData.get('quotationSubmitCloseDateTime').getMinutes());
        }

        return bidData;
    },

    /* 입찰공고 기본정보 조회 */
    searchBid: function(bidId, type) {
        var me = this, vm = this.getViewModel();
        var progressStore = vm.getStore('progressStore');

        progressStore.load({
            params:{
                bidId : bidId
            }
        });


        vm.findBid(bidId, type).then({
            success: function(result) {
                vm.set('bidData', me.getDateTime(result));
                me.lookupReference('defaultForm').getForm().clearInvalid();
                me.setBtnAction();
                me.setAmount();
            },
            failure: function() {

            }
        }).done();
    },

    /* 닫기 */
    close: function() {
        var me = this, view = this.getView();

        me.clearData();

        view.fireEvent('closeDetail');
    },

    /* 버튼 및 속성 제어 */
    setBtnAction: function() {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        if(bidData.get('progressState') === 'CreateProgress') {
            vm.set('isVisibleSaveBtn'  , false);
            vm.set('isVisibleDelBtn'   , false);
            vm.set('isVisibleNoticeBtn', false);
        } else if(bidData.get('progressState') === 'PreAttendProgress') {
            vm.set('isVisibleSaveBtn'  , true);
            vm.set('isVisibleDelBtn'   , true);
            vm.set('isVisibleNoticeBtn', true);
            vm.set('isReadOnly'        , true);
        } else {
            vm.set('isVisibleSaveBtn'  , true);
            vm.set('isVisibleDelBtn'   , true);
            vm.set('isVisibleNoticeBtn', true);
            vm.set('isReadOnly'        , true);
        }
    },

    /* 도급예산액 한글금액, 사정금액 한글금액 set 하는 부분 */
    setAmount: function() {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        var subcontractBudgetAmount = bidData.get('subcontractBudgetAmount');
        var approximateAmount       = bidData.get('approximateAmount');

        if(Number(subcontractBudgetAmount) > 0) {
            var subcontractBudgetAmountWon = Ext.String.format('{0}{1}',Ext.util.Format.numberWord(subcontractBudgetAmount),'#{원}');

            bidData.set('subcontractBudgetAmountWon', subcontractBudgetAmountWon);
        } else {
            bidData.set('subcontractBudgetAmountWon', null);
        }

        if(Number(approximateAmount) > 0) {
            var approximateAmountWon = Ext.String.format('{0}{1}',Ext.util.Format.numberWord(approximateAmount),'#{원}');

            bidData.set('approximateAmountWon' , approximateAmountWon);
        } else {
            bidData.set('approximateAmountWon' , null);
        }
    },

    /* 닫기 버튼 클릭 시 */
    onCloseButtonClick: function(button, e, eOpts) {
        var me = this, view = this.getView();

        me.close();
    },

    onContainerItemClick: function(item) {
        var me = this;
        if(item.urlLink !== 'none'){ //tabUrl이 있는 경우
            var classPath = item.urlLink;

            //modal로 뜨도록 수정 (통테이후 반영예정)
            var popup = Ext.create(classPath, {
                floating : true,
                modal:true,
                title : item.tabTitle,
                bidNo : item.paramNo,
                noticeDate : item.paramNoticeDate,
                companyId : item.companyId,
                width:1024,
                height:768,
                resizable:true,
                draggable:true
            });

            popup.show();
            popup.center();

            //------------------------------------------------------------------tab으로 뜨도록
            //     if (MdiManager.hasView(classPath)) { //기존에 tab이 띄워져있으면 닫음
            //         var view = MdiManager.mdiTab.down(Ext.String.format('>[classpath='+classPath+']'));
            //         MdiManager.mdiTab.remove(view,true);
            //     }
            //     MdiManager.addViewToTab(classPath, { //tab 띄움
            //         title: item.tabTitle,
            //         authKey:  item.menuCode,
            //         bidNo : item.paramNo,
            //         noticeDate : item.paramNoticeDate,
            //         companyId : item.companyId
            //     }, classPath);
        }else if(item.notiMsg !== 'none'){ //화면을 보여주는 것 보다 alert창을 띄워야 하는 경우
            Etna.Message.alert(item.notiMsg);
        }
    },

    onPrivateReasonComboboxChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        var reasonCode    = bidData.get('privateReasonCode');
        var privateReason = bidData.get('privateReason');

        var privateReasonCode = me.lookupReference('privateReasonCode');

        // if(!Ext.isEmpty(newValue) || !Ext.isEmpty(reasonCode)) {

        //     if(!!privateReasonCode.findRecordByValue(newValue).data.properties[0]){
        //         var privateReason = privateReasonCode.findRecordByValue(newValue).data.properties[0].value;

        //         bidData.set('privateReason', privateReason);
        //     }
        // }

        if(!Ext.isEmpty(newValue) || !Ext.isEmpty(reasonCode)) {

            if(!!privateReasonCode.findRecordByValue(newValue).data.additionalProperty1){
                var privateReason = privateReasonCode.findRecordByValue(newValue).data.additionalProperty1;

                if(!!privateReason){
                    privateReason = Ext.String.format('#{{0}}',privateReason.replace(/<br>+/g, ' '+String.fromCharCode(10)));
                    bidData.set('privateReason', Ext.String.format('#{{0}}',privateReason.replace(/\\n+/g, ' '+String.fromCharCode(10))));
                }
            }
        }

    },

    onComboboxChange1: function(field, newValue, oldValue, eOpts) {
        var me = this,
            vm = me.getViewModel();

        if(newValue=='Nego'){			// 협상
            vm.set('isVisibleProposal', false);
        }else{
            vm.set('isVisibleProposal', true);
        }
    },

    onDecimalNumberChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();
        var isReadOnly = vm.get('isReadOnly');

        if(!newValue){
            vm.get('bidData').set('decimalPointDigitNumber', 0);
        }
        vm.set('isEditNumber', newValue);
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        var subcontractBudgetAmount = me.lookupReference('subcontractBudgetAmount');
        var approximateAmount = me.lookupReference('approximateAmount');
        var coverFormat = "0,000.";

        for(var i = 1; i<=newValue; i++){
            coverFormat = coverFormat + '0';
        }

        subcontractBudgetAmount.setCoverFormat(coverFormat);
        me.getViewModel().set('bidData.subcontractBudgetAmount', me.getViewModel().get('bidData.subcontractBudgetAmount').toFixed(newValue));

        approximateAmount.setCoverFormat(coverFormat);
        me.getViewModel().set('bidData.approximateAmount', me.getViewModel().get('bidData.approximateAmount').toFixed(newValue));
    },

    onNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        var subcontractBudgetAmount = bidData.get('subcontractBudgetAmount');

        if(Number(newValue) > 0) {
            var subcontractBudgetAmountWon = Ext.String.format('{0}{1}',Ext.util.Format.numberWord(subcontractBudgetAmount),'#{원}');
            bidData.set('subcontractBudgetAmountWon', subcontractBudgetAmountWon);
        } else {
            bidData.set('subcontractBudgetAmountWon', null);
        }
    },

    onapproximateAmountChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        var approximateAmount = bidData.get('approximateAmount');

        if(Number(newValue) > 0) {
            var approximateAmountWon = Ext.String.format('{0}{1}',Ext.util.Format.numberWord(approximateAmount),'#{원}');
            bidData.set('approximateAmountWon', approximateAmountWon);
        } else {
            bidData.set('approximateAmountWon', null);
        }
    },

    onProposalRateChange1: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        bidData.set('proposalPriceRate' , newValue === 0 ? 0 : 100 - newValue);
    },

    onEtnatogglefieldChange111: function(field, newValue, oldValue, eOpts) {
        var me = this,
            vm = me.getViewModel();
        if(!newValue){
            vm.get('bidData').set('jointSupplyDemandVendorCount', 0);
            vm.get('bidData').set('jointSupplyDemandMethod', null);
        }else{
            vm.get('bidData').set('jointSupplyDemandVendorCount', !vm.get('bidData').get('jointSupplyDemandVendorCount')?2:vm.get('bidData').get('jointSupplyDemandVendorCount'));
        }
    },

    onGridpanelCellClick11: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        var me = this;
        var dataIndex = tableview.getColumnManager().getHeaderAtIndex(cellIndex).dataIndex;
        var attendCon = me.lookupReference('attendCon');

        if(dataIndex == 'name'){
            attendCon.setHtml('<iframe src="printDownloadAttachment.do?id='+record.get('id')+'" width="0", height="0"/>');
        }
    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this;

        me.getView().setLoading(true);
    }

});

/*
 * File: app/view/foreignPrivateContract/detail/service/ForeignPrivateContractDetailSP.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.foreignPrivateContract.detail.service.ForeignPrivateContractDetailSP', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.foreignprivatecontractdetailserviceforeignprivatecontractdetailsp',

               
                                                                                       
                                                                                            
                              
                                 
                             
                        
                         
                                  
                              
                                   
                                  
                                  
                                 
                                  
                                
                         
                         
                                 
                        
                                     
                     
      

    controller: 'foreignprivatecontractdetailserviceforeignprivatecontractdetailsp',
    viewModel: {
        type: 'foreignprivatecontractdetailserviceforeignprivatecontractdetailsp'
    },
    ui: 'main',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    bind: {
        title: '#{수의계약상세}'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'page',
            bind: {
                hidden: '{!hidePrivateSettlementToolbarYn}'
            },
            items: [
                {
                    xtype: 'displayfield',
                    value: '#{공사/용역에 대한 수의계약 공고문을 조회합니다.}'
                },
                {
                    xtype: 'tbspacer',
                    flex: 1
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseButtonClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'kepcopanel',
            collapsible: true,
            reference: 'kepcopanel',
            height: 150,
            bind: {
                store: '{progressStore}'
            },
            listeners: {
                itemClick: 'onContainerItemClick'
            }
        },
        {
            xtype: 'tabpanel',
            flex: 1,
            reference: 'bidTabPanel',
            cls: 'nbr',
            activeTab: 0,
            deferredRender: false,
            items: [
                {
                    xtype: 'form',
                    reference: 'defaultForm',
                    fixed: true,
                    autoScroll: true,
                    layout: 'column',
                    bodyPadding: 5,
                    header: false,
                    title: '#{기본정보}',
                    trackResetOnLoad: true,
                    items: [
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{공고일반}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{공고번호/차수}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 125,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.no}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '/'
                                        },
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 60,
                                            fieldStyle: 'text-align: center;',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.revision}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'datefield',
                                    width: 270,
                                    fieldLabel: '#{공고일자}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.noticeDate}'
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    reference: 'purchasePlanDate',
                                    width: 270,
                                    fieldLabel: '#{구매계획일자}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.purchasePlanDate}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    reference: 'purchasePlanNo',
                                    width: 300,
                                    fieldLabel: '#{구매계획번호}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.purchasePlanNo}',
                                        hideTrigger: '{isReadOnly}'
                                    },
                                    triggers: {
                                        mytrigger: {
                                            handler: function(field, trigger, e) {
                                                var controller = field.up('[controller]').controller;
                                                controller.showPurchasePlanPopup();
                                            },
                                            allowAlwaysOnClick: true,
                                            cls: 'trigger-search'
                                        }
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    reference: 'prDate',
                                    width: 270,
                                    fieldLabel: '#{구매요청일자}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.prDate}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    width: 300,
                                    fieldLabel: '#{구매유형}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.itemType}',
                                        store: '{itemTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'inOutType',
                                    width: 300,
                                    fieldLabel: '#{국내외구분}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.inOutType}',
                                        store: '{inOutTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    reference: 'name',
                                    width: '100%',
                                    fieldLabel: '#{공고명}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 400,
                                    bind: {
                                        value: '{bidData.name}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 300,
                                    fieldLabel: '#{입찰담당부서}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeDepartmentName}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 300,
                                    fieldLabel: '#{입찰담당자}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeName}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'privateReasonCode',
                                    width: '100%',
                                    fieldLabel: '#{수의사유}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    valueField: 'id',
                                    bind: {
                                        value: '{bidData.privateReasonCode}',
                                        store: '{reasonCodeStore}'
                                    },
                                    listeners: {
                                        change: 'onPrivateReasonComboboxChange'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 300,
                                    fieldLabel: '#{계약의뢰부서}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.contractRequestDepartmentName}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    colspan: 2,
                                    height: 100,
                                    width: '100%',
                                    fieldLabel: ' ',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 2000,
                                    bind: {
                                        value: '{bidData.privateReason}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{계약입찰방식}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{모의입찰여부}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 2
                                    },
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{모의입찰}',
                                            offText: '#{실제입찰}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.simulationBidYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'contractType',
                                    width: 300,
                                    fieldLabel: '#{계약구분}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.contractType}',
                                        store: '{contractTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'bidMethod',
                                    width: 300,
                                    fieldLabel: '#{입찰방식}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.bidMethod}',
                                        store: '{bidMethodStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 2,
                                    width: 300,
                                    fieldLabel: '#{계약방법}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.competitionType}',
                                        store: '{competitionTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'bidType',
                                    width: 300,
                                    fieldLabel: '#{낙찰자결정방법}',
                                    labelWidth: 140,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.bidType}',
                                        readOnly: 'true',
                                        store: '{bidTypeKindStore}'
                                    },
                                    listeners: {
                                        change: 'onComboboxChange1'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 300,
                                    fieldLabel: '#{계약자선정방법}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.privateSelectMethod}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 1,
                                    fieldLabel: '#{통화/소수점사용}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            reference: 'currencyCode',
                                            width: 75,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'id',
                                            bind: {
                                                value: '{bidData.currencyCode}',
                                                store: '{currencyCodeStore}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5'
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            readOnly: true,
                                            inputValue: 'true',
                                            uncheckedValue: 'false',
                                            bind: {
                                                value: '{bidData.decimalPointUseYn}'
                                            },
                                            listeners: {
                                                change: 'onDecimalNumberChange'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 4'
                                        },
                                        {
                                            xtype: 'combobox',
                                            margin: 0,
                                            width: 45,
                                            name: 'decimalCombo',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            editable: false,
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.decimalPointDigitNumber}',
                                                store: '{decimalPointDigitNumberStore}'
                                            },
                                            listeners: {
                                                change: 'onComboboxChange'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'textfield',
                                    reference: 'constructionServicePeriodDays',
                                    width: 300,
                                    fieldLabel: '#{공사/용역기간}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maskRe: /[0-9]/,
                                    maxLength: 22,
                                    bind: {
                                        value: '{bidData.constructionServicePeriodDays}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    fieldLabel: '#{도급예산액/한글금액}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 4
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfield',
                                            coverFormat: '0,000.####',
                                            reference: 'subcontractBudgetAmount',
                                            margin: 0,
                                            width: 155,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            enforceMaxLength: true,
                                            hideTrigger: true,
                                            maxLength: 18,
                                            decimalPrecision: 4,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.subcontractBudgetAmount}'
                                            },
                                            listeners: {
                                                change: 'onNumberfieldChange'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5'
                                        },
                                        {
                                            xtype: 'textfield',
                                            reference: 'subcontractBudgetAmountWon',
                                            margin: 0,
                                            width: 220,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.subcontractBudgetAmountWon}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{부가가치세포함}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    fieldLabel: '#{사정금액/한글금액}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 4
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfield',
                                            coverFormat: '0,000.####',
                                            reference: 'approximateAmount',
                                            margin: 0,
                                            width: 155,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            hideTrigger: true,
                                            maxLength: 18,
                                            decimalPrecision: 4,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.approximateAmount}'
                                            },
                                            listeners: {
                                                change: 'onapproximateAmountChange'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5'
                                        },
                                        {
                                            xtype: 'textfield',
                                            reference: 'approximateAmountWon',
                                            margin: 0,
                                            width: 220,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.approximateAmountWon}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{부가가치세포함}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '#{배점한도}',
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{isVisibleProposal}'
                                    },
                                    items: [
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            width: 30,
                                            value: '#{기술}'
                                        },
                                        {
                                            xtype: 'combobox',
                                            margin: '0 7 0 0',
                                            width: 50,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'id',
                                            bind: {
                                                value: '{bidData.proposalTechnicalRate}',
                                                store: '{proposalTechnicalRateCodeStore}'
                                            },
                                            listeners: {
                                                change: 'onProposalRateChange1'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            width: 30,
                                            value: '#{가격}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            width: 50,
                                            readOnly: true,
                                            editable: false,
                                            bind: {
                                                value: '{bidData.proposalPriceRate}'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            margin: '0 6',
                                            width: '100%',
                                            labelWidth: 140,
                                            readOnly: true,
                                            boxLabel: '#{소프트웨어사업여부}',
                                            inputValue: 'true',
                                            uncheckedValue: 'false'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            defaults: {
                                labelWidth: 140
                            },
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{입찰진행}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    hidden: true,
                                    fieldLabel: '#{수의시담마감일시}',
                                    layout: {
                                        type: 'table',
                                        columns: 11
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            reference: 'beginDateTime',
                                            hidden: true,
                                            margin: '0 5 0 0',
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.beginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'beginDateHours',
                                            hidden: true,
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 24,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateHours}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            hidden: true,
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'beginDateMinutes',
                                            hidden: true,
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateMinutes}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            hidden: true,
                                            margin: '0 5',
                                            value: '#{분}'
                                        },
                                        {
                                            xtype: 'displayfield',
                                            hidden: true,
                                            margin: '0 5',
                                            value: '~'
                                        },
                                        {
                                            xtype: 'datefield',
                                            reference: 'endDateTime',
                                            margin: '0 5 0 0',
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.endDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'endDateHours',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 24,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateHours}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'endDateMinutes',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateMinutes}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    fieldLabel: '#{공동수급여부}',
                                    layout: {
                                        type: 'table',
                                        columns: 4
                                    },
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            margin: '0 5 0 0 ',
                                            readOnly: true,
                                            onText: '#{예}',
                                            offText: '#{아니오}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.jointSupplyDemandYn}'
                                            },
                                            listeners: {
                                                change: 'onEtnatogglefieldChange111'
                                            }
                                        },
                                        {
                                            xtype: 'combobox',
                                            margin: '0 10 0 0',
                                            width: 120,
                                            fieldLabel: '#{공동수급방법}',
                                            hideLabel: true,
                                            labelWidth: 140,
                                            readOnly: true,
                                            emptyText: '#{해당없음}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                hidden: '{!bidData.jointSupplyDemandYn}',
                                                value: '{bidData.jointSupplyDemandMethod}',
                                                store: '{jointSupplyDemandMethodKind}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{제한 업체수(2이상)}',
                                            bind: {
                                                hidden: '{!bidData.jointSupplyDemandYn}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 99) {
                                                    value = 99;
                                                } else if(value < 2) {
                                                    value = 2;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: 0,
                                            width: 50,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            emptyText: '2',
                                            decimalPrecision: 0,
                                            maxValue: 99,
                                            minValue: 0,
                                            bind: {
                                                hidden: '{!bidData.jointSupplyDemandYn}',
                                                value: '{bidData.jointSupplyDemandVendorCount}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 1,
                                    fieldLabel: '#{견적서제출일시}',
                                    layout: {
                                        type: 'table',
                                        columns: 11
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            reference: 'quotationSubmitStartDateTime',
                                            margin: '0 5 0 0',
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.quotationSubmitStartDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'quotationSubmitStartDateHour',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 24,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.quotationSubmitStartDateHours}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'quotationSubmitStartDateMinute',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 24,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.quotationSubmitStartDateMinutes}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{분}'
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{~}'
                                        },
                                        {
                                            xtype: 'datefield',
                                            reference: 'quotationSubmitCloseDateTime',
                                            margin: '0 5 0 0',
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.quotationSubmitCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'quotationSubmitCloseDateHour',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.quotationSubmitCloseDateHours}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'quotationSubmitCloseDateMinute',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.quotationSubmitCloseDateMinutes}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'checkboxfield',
                                    colspan: 1,
                                    reference: 'quotationEvalYn',
                                    hidden: true,
                                    hideLabel: true,
                                    readOnly: true,
                                    boxLabel: '#{견적서제출여부}',
                                    bind: {
                                        value: '{bidData.quotationEvalYn}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{첨부파일}',
                            layout: {
                                type: 'table',
                                columns: 1,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    ui: 'grid',
                                    width: '100%',
                                    manageHeight: false,
                                    title: '#{자동첨부파일}',
                                    bind: {
                                        store: '{fileItemStore}'
                                    },
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            width: '90%',
                                            dataIndex: 'name',
                                            text: '#{파일명}'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                return value/1024+'KB';
                                            },
                                            width: 100,
                                            align: 'right',
                                            dataIndex: 'size',
                                            text: '#{사이즈}'
                                        }
                                    ],
                                    viewConfig: {
                                        height: 100
                                    },
                                    listeners: {
                                        cellclick: 'onGridpanelCellClick11'
                                    }
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    reference: 'attachmentField',
                                    width: '100%',
                                    fieldLabel: '#{파일첨부}',
                                    labelAlign: 'top',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.attachFileGroupId}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    reference: 'attendCon'
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{입찰추가사항}',
                            layout: {
                                type: 'table',
                                columns: 1,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'textareafield',
                                    reference: 'contractSize',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{계약물량 또는 규모}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.contractSize}'
                                    }
                                }
                            ]
                        }
                    ],
                    tabConfig: {
                        xtype: 'tab',
                        textAlign: 'left'
                    }
                }
            ]
        }
    ],
    listeners: {
        afterrender: 'onPanelAfterRender'
    }

});

/*
 * File: app/view/jointSupply/JointSupplyAndDemandViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.jointSupply.JointSupplyAndDemandViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.jointsupplyjointsupplyanddemand'

});

/*
 * File: app/view/jointSupply/list/JointSupplyAndDemandListViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.jointSupply.list.JointSupplyAndDemandListViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.jointsupplylistjointsupplyanddemandlist'

});

/*
 * File: app/view/jointSupply/list/JointSupplyAndDemandListViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.jointSupply.list.JointSupplyAndDemandListViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.jointsupplylistjointsupplyanddemandlist',

    onFormSpecialkey1: function(form, e) {
        var me = this;

        if(e.ENTER == e.getKey()){
            me.search();
        }
    }

});

/*
 * File: app/view/jointSupply/list/JointSupplyAndDemandList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.jointSupply.list.JointSupplyAndDemandList', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.jointsupplylistjointsupplyanddemandlist',

               
                                                                         
                                                                              
                         
                                 
                             
                            
                                           
                                  
                              
                         
                                  
                         
                                      
                                 
                               
                                  
                        
                            
      

    controller: 'jointsupplylistjointsupplyanddemandlist',
    viewModel: {
        type: 'jointsupplylistjointsupplyanddemandlist'
    },
    ui: 'main',
    title: '#{공동수급목록}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            reference: 'searchForm',
            data: {
                bubbleEvents: [
                    'specialkey'
                ],
                defaults: {
                    bubbleEvents: [
                        'specialkey'
                    ],
                    defaults: {
                        bubbleEvents: [
                            'specialkey'
                        ]
                    }
                }
            },
            margin: '0 0 5 0',
            ui: 'search',
            defaults: {
                bubbleEvents: [
                    'specialkey'
                ],
                defaults: {
                    bubbleEvents: [
                        'specialkey'
                    ],
                    defaults: {
                        bubbleEvents: [
                            'specialkey'
                        ]
                    }
                }
            },
            bodyBorder: false,
            fieldDefaults: {
                labelWidth: 120
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    ui: 'search',
                    items: [
                        {
                            xtype: 'displayfield',
                            value: '#{구매사에게 공동수급협정서를 작성/제출합니다.}'
                        },
                        {
                            xtype: 'tbspacer',
                            flex: 1
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-search',
                            text: '#{조회}'
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-refresh',
                            text: '#{초기화}'
                        }
                    ]
                }
            ],
            listeners: {
                specialkey: 'onFormSpecialkey1'
            },
            plugins: [
                {
                    ptype: 'autoClearButton'
                }
            ],
            items: [
                {
                    xtype: 'fieldcontainer',
                    fieldLabel: '#{공고일자}',
                    layout: {
                        type: 'table',
                        columns: 3
                    },
                    items: [
                        {
                            xtype: 'datefield',
                            margin: 0,
                            width: 110
                        },
                        {
                            xtype: 'label',
                            margin: '0 5',
                            text: '~'
                        },
                        {
                            xtype: 'datefield',
                            margin: 0,
                            width: 110
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{공고번호}'
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{입찰건명}'
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{공동수급상태}',
                    emptyText: '#{전체}'
                }
            ]
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            reference: 'gridPanel',
            ui: 'grid',
            header: false,
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    cls: 'grid-toolbar',
                    ui: 'grid',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'btn-save',
                            text: '#{공동수급협정서작성}'
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-send',
                            text: '#{제출/승인}'
                        },
                        {
                            xtype: 'tbspacer',
                            flex: 1
                        }
                    ]
                },
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    displayInfo: true
                }
            ],
            selModel: {
                selType: 'checkboxmodel',
                mode: 'SINGLE',
                checkOnly: true
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    dataIndex: 'string',
                    text: '#{공동수급방법}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 140,
                    dataIndex: 'string',
                    text: '#{공동수급참여형태}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    dataIndex: 'string',
                    text: '#{공동수급상태}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    dataIndex: 'string',
                    text: '#{운영단위}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    dataIndex: 'string',
                    text: '#{공고번호}'
                },
                {
                    xtype: 'numbercolumn',
                    width: 100,
                    dataIndex: 'number',
                    text: '#{공고차수}'
                },
                {
                    xtype: 'datecolumn',
                    width: 200,
                    dataIndex: 'date',
                    text: '#{입찰건명}'
                },
                {
                    xtype: 'booleancolumn',
                    width: 120,
                    dataIndex: 'bool',
                    text: '#{공고부서}'
                },
                {
                    xtype: 'booleancolumn',
                    width: 120,
                    dataIndex: 'bool',
                    text: '#{공고일자}'
                },
                {
                    xtype: 'booleancolumn',
                    width: 120,
                    dataIndex: 'bool',
                    text: '#{입찰참가마감일}'
                },
                {
                    xtype: 'booleancolumn',
                    width: 120,
                    dataIndex: 'bool',
                    text: '#{계약방법}'
                },
                {
                    xtype: 'booleancolumn',
                    width: 120,
                    dataIndex: 'bool',
                    text: '#{낙찰자선정}'
                },
                {
                    xtype: 'booleancolumn',
                    width: 120,
                    dataIndex: 'bool',
                    text: '#{공고구분}'
                },
                {
                    xtype: 'booleancolumn',
                    width: 120,
                    dataIndex: 'bool',
                    text: '#{입찰개시일시}'
                },
                {
                    xtype: 'booleancolumn',
                    width: 120,
                    dataIndex: 'bool',
                    text: '#{입찰마감일시}'
                }
            ]
        }
    ]

});

/*
 * File: app/view/jointSupply/detail/JointSupplyAndDemandDetailViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.jointSupply.detail.JointSupplyAndDemandDetailViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.jointsupplydetailjointsupplyanddemanddetail'

});

/*
 * File: app/view/jointSupply/detail/JointSupplyAndDemandDetail.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.jointSupply.detail.JointSupplyAndDemandDetail', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.jointsupplydetailjointsupplyanddemanddetail',

               
                                                                             
                              
                                 
                             
                            
                                  
                         
                                
                                 
                        
                                     
      

    viewModel: {
        type: 'jointsupplydetailjointsupplyanddemanddetail'
    },
    autoScroll: true,
    ui: 'main',
    title: '#{공동수급 협정서 작성}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            flex: 1,
            dock: 'top',
            ui: 'page',
            items: [
                {
                    xtype: 'displayfield',
                    value: '#{공동/분담이행협정서 작성을 합니다.}'
                },
                {
                    xtype: 'tbspacer',
                    flex: 1
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-save',
                    text: '#{임시저장}'
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-request',
                    text: '#{작성완료}'
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-request',
                    text: '#{작성}'
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}'
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'panel',
            autoScroll: true,
            margin: '0 0 5 0',
            ui: 'table',
            defaults: {
                labelWidth: 140
            },
            bodyBorder: true,
            title: '#{기본정보}',
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            items: [
                {
                    xtype: 'textfield',
                    fieldLabel: '#{공고번호}',
                    readOnly: true
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{입찰건명}',
                    readOnly: true
                },
                {
                    xtype: 'combobox',
                    fieldLabel: '#{공동수급방식}',
                    readOnly: true
                },
                {
                    xtype: 'combobox',
                    fieldLabel: '#{낙찰자결정방법}',
                    readOnly: true
                },
                {
                    xtype: 'combobox',
                    colspan: 2,
                    fieldLabel: '#{공동수급가능업체수}',
                    readOnly: true
                },
                {
                    xtype: 'displayfield',
                    colspan: 2,
                    value: '#{※계좌정보는 SRM → 회원센터 → 계좌정보에 등록된 계좌정보로 대금이 지급됩니다.(계좌정보에서 조회 및 등록가능)}'
                }
            ]
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            margin: '0 0 5 0',
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    cls: 'grid-toolbar',
                    ui: 'grid',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'btn-add',
                            text: '#{업체추가}'
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-delete',
                            text: '#{삭제}'
                        },
                        {
                            xtype: 'tbspacer',
                            flex: 1
                        }
                    ]
                }
            ],
            columns: [
                {
                    xtype: 'checkcolumn',
                    text: '#{선택}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 160,
                    dataIndex: 'string',
                    text: '#{회사명}'
                },
                {
                    xtype: 'numbercolumn',
                    width: 140,
                    dataIndex: 'number',
                    text: '#{사업자번호}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    dataIndex: 'date',
                    text: '#{대표자}'
                },
                {
                    xtype: 'numbercolumn',
                    width: 100,
                    dataIndex: 'bool',
                    text: '#{지분율}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 160,
                    dataIndex: 'bool',
                    text: '#{은행명}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 100,
                    dataIndex: 'bool',
                    text: '#{예금주}'
                },
                {
                    xtype: 'numbercolumn',
                    width: 160,
                    dataIndex: 'bool',
                    text: '#{계좌번호}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 140,
                    dataIndex: 'bool',
                    text: '#{비고}'
                }
            ],
            plugins: [
                {
                    ptype: 'cellediting'
                }
            ]
        }
    ]

});

/*
 * File: app/view/jointSupply/JointSupplyAndDemand.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.jointSupply.JointSupplyAndDemand', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.jointsupplyjointsupplyanddemand',

               
                                                                
                                                                
                                                                    
                         
      

    viewModel: {
        type: 'jointsupplyjointsupplyanddemand'
    },
    ui: 'main',

    layout: {
        type: 'card',
        deferredRender: true
    },
    items: [
        {
            xtype: 'jointsupplylistjointsupplyanddemandlist'
        },
        {
            xtype: 'jointsupplydetailjointsupplyanddemanddetail'
        }
    ]

});

/*
 * File: app/view/jointSupply/JointSupplyAndDemandViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.jointSupply.JointSupplyAndDemandViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.jointsupplyjointsupplyanddemand'
});

/*
 * File: app/view/jointSupply/detail/JointSupplyAndDemandDetailViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.jointSupply.detail.JointSupplyAndDemandDetailViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.jointsupplydetailjointsupplyanddemanddetail'
});

/*
 * File: app/view/openInfoData/BidResultViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.BidResultViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.openinfodatabidresult'

});

/*
 * File: app/view/openInfoData/BidResultViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.BidResultViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.openinfodatabidresult',

    showBidDetail: function(bidRecord) {
        var me = this;
        var detail;

        if(bidRecord.get('foreignBidType') == 'ProductBidForeignItem' || bidRecord.get('foreignBidType') == 'ProductBidSideEquipment'){	// 자재
            if(bidRecord.get('inOutType')!='In'){
                detail = me.lookupReference('foreignBidAnnouncementProductDetail');//외자
            }else{
                detail = me.lookupReference('bidAnnouncementProductDetail');
            }

        }else{
            if(bidRecord.get('foreignBidType') == 'ServiceBid'){
                detail = me.lookupReference('foreignBidAnnouncementServiceDetail'); //외자
            }else{
                detail = me.lookupReference('bidAnnouncementServiceDetail');
            }
        }

        detail.loadData(bidRecord.get('id'), 'Bid');
        me.getView().getLayout().setActiveItem(detail);
    },

    showList: function() {
        var me = this;
        var list = me.lookupReference('bidResultList');

        me.getView().getLayout().setActiveItem(list);
        list.search();
    },

    showBidResultDetailProduct: function(record) {
        var me = this;
        var detail;
        detail = me.lookupReference('bidResultDetailProduct');

        me.getView().getLayout().setActiveItem(detail);
        detail.loadData(record.get('id'));
    },

    showBidResultDetailService: function(record) {
        var me = this;
        var detail;
        detail = me.lookupReference('bidResultDetailService');

        me.getView().getLayout().setActiveItem(detail);
        detail.loadData(record.get('id'));
    },

    showBidResultDetailAtMulty: function(prevPanelName) {
        var me = this;

        if(prevPanelName === 'bidResultDetailProduct'){
            var detail = me.lookupReference('bidResultDetailProduct');
            me.getView().getLayout().setActiveItem(detail);
        }else if(prevPanelName === 'bidResultDetailService'){
            var detail = me.lookupReference('bidResultDetailService');
            me.getView().getLayout().setActiveItem(detail);
        }else if(prevPanelName === 'bidResultDetailFailService'){
            var detail = me.lookupReference('bidResultFailDetailService');
            me.getView().getLayout().setActiveItem(detail);
        }else if(prevPanelName === 'bidResultDetailFailProduct'){
            //유찰된 자재쪽은 복수추첨결과 x
        }
    },

    showMultiLotteryResult: function(id, prePanelName) {
        var me = this;

        var multy = me.lookupReference('multiLotteryResult');
        me.getView().getLayout().setActiveItem(multy);
        multy.loadView(id, prePanelName);
    },

    showBidResultFailDetailProduct: function(record) {
        var me = this;
        var detail;
        detail = me.lookupReference('bidResultFailDetailProduct');

        me.getView().getLayout().setActiveItem(detail);
        detail.loadData(record);
    },

    showBidResultFailDetailService: function(record) {
        var me = this;
        var detail;
        detail = me.lookupReference('bidResultFailDetailService');

        me.getView().getLayout().setActiveItem(detail);
        detail.loadData(record);
    },

    onPanelShowBidDetail: function(bidRecord, eventOptions) {
        var me = this;
        me.showBidDetail(bidRecord);
    },

    onPanelShowBidResultDetailProduct: function(record, eventOptions) {
        var me = this;
        me.showBidResultDetailProduct(record);
    },

    onPanelShowBidResultDetailService: function(record, eventOptions) {
        var me = this;
        me.showBidResultDetailService(record);
    },

    onPanelShowBidResultFailDetailProduct: function(record, eventOptions) {
        var me =this;
        me.showBidResultFailDetailProduct(record);
    },

    onPanelShowBidResultFailDetailService: function(record, eventOptions) {
        var me =this;
        me.showBidResultFailDetailService(record);
    },

    onPanelShowMultiLotteryResult: function(id, prePanelName, eventOptions) {
        var me = this;
        me.showMultiLotteryResult(id, prePanelName);
    },

    onPanelCloseDetail: function(eventOptions) {
        var me = this;
        me.showList();
    },

    onPanelShowMultiLotteryResult1: function(id, prePanelName, eventOptions) {
        var me = this;
        me.showMultiLotteryResult(id, prePanelName);
    },

    onPanelCloseDetail1: function(eventOptions) {
        var me = this;
        me.showList();
    },

    onPanelCloseDetail2: function(eventOptions) {
        var me = this;
        me.showList();
    },

    onPanelShowMultiLotteryResult2: function(id, prePanelName, eventOptions) {
        var me = this;
        me.showMultiLotteryResult(id, prePanelName);
    },

    onPanelCloseDetail3: function(eventOptions) {
        var me = this;
        me.showList();
    }

});

/*
 * File: app/view/openInfoData/list/BidResultListViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.BidResultListViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.openinfodatalistbidresultlist',

               
                                
                               
                          
                                
                                                  
                                          
      

    data: {
        searchValues: null
    },

    stores: {
        bidResultStore: {
            model: 'bid_sp.model.openInfoData.OpenInfoDataList',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.OpenInfoDataListController.findOpenInfoDataBidList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        companyStore: {
            model: 'bid_sp.model.catalog.CompanyCode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.basis.GroupCodeController.findCompanyCodeDatas',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        bidTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        noticeTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.NoticeTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        competitionTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CompetitionTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        purchaseTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.PurchaseTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        }
    }

});

/*
 * File: app/view/openInfoData/list/BidResultListViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.BidResultListViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.openinfodatalistbidresultlist',

    search: function() {
        var me = this, vm = this.getViewModel();
        var store = vm.getStore('bidResultStore');
        var params = vm.get('searchValues');

        if(!me.searchValidation()){
            return;
        }

        me.getView().setLoading(true);
        store.loadPage(1, {
            params : params,
            callback : function(records, operation, success){
                me.getView().setLoading(false);
            }
        });


    },

    refresh: function() {
        var me = this, vm = this.getViewModel();

        vm.set('searchValues', {
            companyId : me.getViewModel().get('companyStore').first().get('id'),
            fromNoticeDate : Ext.Date.add(new Date(), Ext.Date.MONTH, -1),
            toNoticeDate : Ext.Date.add(new Date()),
        });
    },

    searchValidation: function() {
        var me = this , vm = this.getViewModel();
        var returnValue = true;
        var fromNoticeDate = me.lookupReference('fromNoticeDate').getValue();
        var toNoticeDate = me.lookupReference('toNoticeDate').getValue();

        if(!fromNoticeDate || !toNoticeDate){
            Etna.Message.alert('#{공고일자는 필수입력입니다.}');
            returnValue = false;
        }

        return returnValue;
    },

    onOpenDataGridCellclick: function(record) {
        var me = this;

        //자재, 공사
        //낙찰업체보기, 개찰지연, 유찰등

        //하드코딩인데;;
        if(record.get('bidResultStateInOpenInfoData')==='비공개(낙찰)'){
            Etna.Message.alert('#{해당 공고는 공개 대상이 아닙니다.}');
            return;
        }else{
            if(record.get('bidResultStateInOpenInfoData')==='낙찰업체보기'){ //낙찰업체
                if(record.get('purchaseType') === 'Product'){
                    me.getView().fireEvent('showBidResultDetailProduct',record);
                }else if (record.get('purchaseType') === 'ConstructionService'){
                    me.getView().fireEvent('showBidResultDetailService',record);
                }
            }else{ //공고종료, 유찰, 유찰/재공고
                if(record.get('purchaseType') === 'Product'){
                    me.getView().fireEvent('showBidResultFailDetailProduct',record);
                }else if (record.get('purchaseType') === 'ConstructionService'){
                    me.getView().fireEvent('showBidResultFailDetailService',record);
                }
            }
        }
    },

    onBidGridCellclick: function(bidRecord) {
        var me = this;

        me.getView().fireEvent('showBidDetail',bidRecord);
    },

    init: function() {
        var me = this,
            vm = this.getViewModel();

        me.getView().search = Ext.Function.bind(me.search, me);
    },

    onSearchButtonClick: function(button, e, eOpts) {
        var me = this;
        me.search();
    },

    onRefreshButtonClick: function(button, e, eOpts) {
        var me = this, vm = this.getViewModel();

        me.refresh();
    },

    onFormSpecialKey: function(form, e) {
        var me = this;

        if(e.ENTER == e.getKey()){
            me.search();
        }
    },

    onGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        var me = this;
        var dataIndex = tableview.getColumnManager().getHeaderAtIndex(cellIndex).dataIndex;

        if(dataIndex == 'bidResultStateInOpenInfoData'){	// 결과클릭
            me.onOpenDataGridCellclick(record);
        }else if(dataIndex =='no'){ // 공고번호 클릭
            me.onBidGridCellclick(record);
        }
    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this, vm = this.getViewModel();

        me.getView().setLoading(true);
        Etna.onDone(function() {
            var companyCodeStore = vm.getStore('companyStore');
            companyCodeStore.load({
                callback: function(records, operation, success) {
                    me.refresh();
                    me.getView().setLoading(false);
                }
            });
        });
    }

});

/*
 * File: app/view/openInfoData/list/BidResultList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.BidResultList', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.openinfodatalistbidresultlist',

               
                                                               
                                                                    
                         
                                 
                           
                            
                                  
                                  
                              
                         
                                           
                         
                                 
                               
                        
                                    
                                  
                                 
                                   
                                   
      

    controller: 'openinfodatalistbidresultlist',
    viewModel: {
        type: 'openinfodatalistbidresultlist'
    },
    ui: 'main',
    title: '#{개찰결과조회}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            ui: 'search',
            defaults: {
                bubbleEvents: [
                    'specialkey'
                ],
                defaults: {
                    bubbleEvents: [
                        'specialkey'
                    ],
                    defaults: {
                        bubbleEvents: [
                            'specialkey'
                        ]
                    }
                }
            },
            bodyPadding: 5,
            title: '',
            fieldDefaults: {
                labelWidth: 120
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'displayfield',
                            fieldLabel: '',
                            value: '#{입찰에 대한 개찰결과를 조회합니다.}'
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-search',
                            text: '#{조회}',
                            listeners: {
                                click: 'onSearchButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-refresh',
                            text: '#{초기화}',
                            listeners: {
                                click: 'onRefreshButtonClick'
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'combobox',
                    width: 340,
                    fieldLabel: '#{회사이름}',
                    allowBlank: false,
                    editable: false,
                    displayField: 'name',
                    queryMode: 'local',
                    valueField: 'id',
                    bind: {
                        value: '{searchValues.companyId}',
                        store: '{companyStore}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    width: 340,
                    layout: 'table',
                    fieldLabel: '#{공고일자}',
                    labelWidth: 120,
                    items: [
                        {
                            xtype: 'datefield',
                            reference: 'fromNoticeDate',
                            width: 110,
                            fieldLabel: '',
                            name: 'fromNoticeDate',
                            allowBlank: false,
                            bind: {
                                value: '{searchValues.fromNoticeDate}',
                                maxValue: '{searchValues.toNoticeDate}'
                            }
                        },
                        {
                            xtype: 'label',
                            text: '~'
                        },
                        {
                            xtype: 'datefield',
                            reference: 'toNoticeDate',
                            width: 110,
                            fieldLabel: '',
                            name: 'toNoticeDate',
                            allowBlank: false,
                            bind: {
                                value: '{searchValues.toNoticeDate}',
                                minValue: '{searchValues.fromNoticeDate}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    width: 340,
                    fieldLabel: '#{공고번호}',
                    enforceMaxLength: true,
                    maxLength: 30,
                    bind: {
                        value: '{searchValues.no}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{공고명}',
                    enforceMaxLength: true,
                    maxLength: 500,
                    bind: {
                        value: '{searchValues.name}'
                    }
                }
            ],
            listeners: {
                specialKey: 'onFormSpecialKey'
            },
            plugins: [
                {
                    ptype: 'autoClearButton'
                }
            ]
        },
        {
            xtype: 'displayfield',
            fieldLabel: '',
            value: '#{※ 자재입찰 : 한국전력기술, 원자력연료, 발전교육원에서 등록한 공고는 공개하지 않습니다.}',
            fieldStyle: 'color:blue'
        },
        {
            xtype: 'displayfield',
            fieldLabel: '',
            value: '#{※ 공사/용역입찰 : 한국전력공사/전력거래소/발전5사 공고대상 공사/용역 입찰의 개찰결과에 대한 목록입니다. (2011/01/01 공고부터 공개)}',
            fieldStyle: 'color:blue'
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            autoScroll: true,
            ui: 'grid',
            title: '',
            bind: {
                store: '{bidResultStore}'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    align: 'center',
                    dataIndex: 'bidResultStateInOpenInfoData',
                    tdCls: 'link',
                    text: '#{입찰결과}'
                },
                {
                    xtype: 'etnastorecolumn',
                    width: 215,
                    align: 'center',
                    dataIndex: 'companyId',
                    text: '#{회사이름}',
                    valueField: 'id',
                    displayField: 'name',
                    bind: {
                        store: '{companyStore}'
                    }
                },
                {
                    xtype: 'etnastorecolumn',
                    width: 100,
                    align: 'center',
                    dataIndex: 'purchaseType',
                    text: '#{구매유형}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{purchaseTypeKind}'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    align: 'center',
                    dataIndex: 'no',
                    tdCls: 'link',
                    text: '#{공고번호}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'revision',
                    text: '#{공고차수}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'bidRevision',
                    text: '#{입찰차수}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 250,
                    dataIndex: 'name',
                    text: '#{공고명}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'placeName',
                    text: '#{공고부서}'
                },
                {
                    xtype: 'datecolumn',
                    width: 120,
                    align: 'center',
                    dataIndex: 'noticeDate',
                    text: '#{공고일자}'
                },
                {
                    xtype: 'etnastorecolumn',
                    align: 'center',
                    dataIndex: 'competitionType',
                    text: '#{계약방법}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{competitionTypeKind}'
                    }
                },
                {
                    xtype: 'etnastorecolumn',
                    align: 'center',
                    dataIndex: 'bidType',
                    text: '#{낙찰자선정}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{bidTypeKind}'
                    }
                },
                {
                    xtype: 'etnastorecolumn',
                    align: 'center',
                    dataIndex: 'noticeType',
                    text: '#{공고종류}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{noticeTypeKind}'
                    }
                },
                {
                    xtype: 'datecolumn',
                    width: 150,
                    align: 'center',
                    dataIndex: 'bidAttendRequestCloseDateTime',
                    text: '#{입찰참가 마감일시}'
                },
                {
                    xtype: 'datecolumn',
                    width: 150,
                    align: 'center',
                    dataIndex: 'beginDateTime',
                    text: '#{입찰서 제출 개시일시}'
                },
                {
                    xtype: 'datecolumn',
                    width: 150,
                    align: 'center',
                    dataIndex: 'endDateTime',
                    text: '#{입찰서 제출 마감일시}'
                }
            ],
            dockedItems: [
                {
                    xtype: 'etnascrollpagingtoolbar',
                    dock: 'bottom',
                    bind: {
                        store: '{bidResultStore}'
                    }
                }
            ],
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                }
            ],
            listeners: {
                cellclick: 'onGridpanelCellClick'
            }
        }
    ],
    listeners: {
        afterrender: 'onPanelAfterRender'
    }

});

/*
 * File: app/view/openInfoData/detail/product/BidResultDetailProductViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.detail.product.BidResultDetailProductViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.openinfodatadetailproductbidresultdetailproduct',

               
                          
                                
                               
                                
                          
                               
                                                    
      

    data: {
        gridTextSetHidden: true,
        gridNegoColSetHidden: false,
        gridSetHidden: false,
        bidData: null,
        isNotKepco: true
    },

    stores: {
        bidTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        currencyCodeStore: {
            groupCode: 'Currency',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        dataStore: {
            model: 'bid_sp.model.openInfoData.OpenInfoDataList'
        },
        dataStore2: {
            model: 'bid_sp.model.openInfoData.OpenInfoDataList'
        }
    },
    formulas: {
        setNegoRankingOpenYn: {
            get: function(data) {
                var negoRankingOpenYn =  data.negoRankingOpenYn;

                if(negoRankingOpenYn){
                    return '공개';
                }else{
                    return '비공개';
                }
            },
            bind: {
                negoRankingOpenYn: '{bidData.negoRankingOpenYn}'
            }
        },
        setMultiLotteryBtn: {
            get: function(data) {
                var estimatedPriceType =  data.estimatedPriceType;

                if(estimatedPriceType==='Multi'){
                    return false;
                }else{
                    return true;
                }
            },
            bind: {
                estimatedPriceType: '{bidData.estimatedPriceType}'
            }
        },
        setCurrencyCodeName: {
            get: function(data) {
                var currencyCode =  data.currencyCode;

                if(currencyCode==='KRW'){
                    return Ext.String.format('#{원}');
                }else if(currencyCode==='USD'){
                    return Ext.String.format('#{달러}');
                }else{
                    return '';
                }
            },
            bind: {
                currencyCode: '{bidData.currencyCode}'
            }
        }
    },

    findBidDetail: function(bidId) {
        var deferred = Ext.create('Deft.Deferred');

        smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidBasicInfo(bidId, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    },

    findOpenInfoDataDetail: function(condition) {
        var deferred = Ext.create('Deft.Deferred');

        smartsuit.ui.etnajs.pro.rfx.sp.OpenInfoDataDetailController.findOpenInfoDataDetail(condition, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    }

});

/*
 * File: app/view/openInfoData/detail/product/BidResultDetailProductViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.detail.product.BidResultDetailProductViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.openinfodatadetailproductbidresultdetailproduct',

    init: function() {
        var me = this;

        me.getView().loadData = Ext.Function.bind(me.loadData, me);
    },

    loadData: function(id) {
        var me = this, vm = this.getViewModel(), view = this.getView();
        vm.set('bidData.id',id);

        Etna.onDone(function(){
            me.findData(id);
        });

    },

    close: function() {
        var me = this;
        me.cleanData();
        me.getView().fireEvent('closeDetail');
    },

    cleanData: function() {

        var me = this, vm = this.getViewModel();

        vm.set('gridTextSetHidden',true);
        vm.set('gridNegoColSetHidden',false);
        vm.set('gridSetHidden',false);
        vm.set('bidData','');
        vm.set('bidData2','');
        vm.set('isNotKepco',true);


        vm.getStore('dataStore').removeAll();
        vm.getStore('dataStore2').removeAll();
    },

    findData: function(id) {
        var me = this, vm = this.getViewModel(), view = this.getView();

        view.setLoading(true);
        vm.findBidDetail(id).then({
            success: function(result){

                //단가, 총가에 따른 예정가격, 기초금액 Str 값변경
                vm.set('bidData',result);

                if(vm.get('bidData.contractType')=='Price'){ //일반단가
                    if(vm.get('bidData.estimatedAmount')>0){
                        vm.set('bidData2.estimatedAmount', '@'+Ext.util.Format.number(vm.get('bidData.estimatedAmount'), '0,000.##'));
                    }else{
                        vm.set('bidData2.estimatedAmount',Ext.util.Format.number(vm.get('bidData.estimatedAmount'), '0,000.##'));
                    }

                    if(vm.get('bidData.estimatedPriceBasicAmount')>0){
                        vm.set('bidData2.estimatedPriceBasicAmount','@'+Ext.util.Format.number(vm.get('bidData.estimatedPriceBasicAmount'), '0,000.##'));
                    }else{
                        vm.set('bidData2.estimatedPriceBasicAmount',Ext.util.Format.number(vm.get('bidData.estimatedPriceBasicAmount'), '0,000.##'));
                    }

                }else{
                    vm.set('bidData2.estimatedAmount', Ext.util.Format.number(vm.get('bidData.estimatedAmount'), '0,000.##'));
                    vm.set('bidData2.estimatedPriceBasicAmount', Ext.util.Format.number(vm.get('bidData.estimatedPriceBasicAmount'), '0,000.##'));
                }

                //한전일때만 기초금액, 추첨번호공개
                if(result.companyId === 'COM01'){
                    vm.set('isNotKepco',false);
                }else{
                    vm.set('isNotKepco',true);
                }

                vm.set('gridSetHidden',false);
                vm.set('gridNegoColSetHidden',true);
                if(result.bidType == 'TotalEval'){ //종합낙찰제
                    vm.set('gridTextSetHidden',false);

                }else if(result.bidType =='Nego'){ //협상에의한계약
                    vm.set('gridNegoColSetHidden',false);
                    vm.set('gridTextSetHidden',true);

                    if(result.negoRankingOpenYn){//협상순위 결과 공개여부
                        vm.set('gridSetHidden',false);
                    }else{
                        vm.set('gridSetHidden',true);
                    }
                }else{
                    vm.set('gridTextSetHidden',true);
                }

                //투찰내역조회
                me.findDataGrid(result);

            },
            failure: function() {
                view.setLoading(false);
            }
        }).done();
    },

    findDataGrid: function(condition) {
        var me = this, vm = this.getViewModel(), view = this.getView();
        var store = vm.getStore('dataStore');
        var store2 = vm.getStore('dataStore2');
        var modelList = [];
        var grid = me.lookupReference('dataGrid');
        var grid2 = me.lookupReference('dataGrid2');

        vm.set('proposalEvalOpenYn',true);

        if(store.getRange()){
            store.removeAll();
        }


        vm.findOpenInfoDataDetail(condition).then({
            success : function(records){
                if(records.length>0 && records[0].proposalEvalOpenYn){
                    vm.set('proposalEvalOpenYn',true);
                }else{
                    vm.set('proposalEvalOpenYn',false);
                }
                Ext.each(records, function(record){
                    var model = Ext.create('bid_sp.model.openInfoData.OpenInfoDataList',record);
                    if(model.get('note')==='참가신청 부적격' || model.get('note')==='규격서 부적격' || model.get('note')==='규격서 미제출' || model.get('note')==='품질등의서 부적격'){
                        note.set('attendAmount',null); //투찰금액
                        note.set('attendRate',null); //투찰율
                        note.set('quantity',null);   //투찰수량
                        note.set('lotteryNum',null); //추첨번호
                    }
                    modelList.push(model);
                });

                if(!vm.get('gridSetHidden')){
                    store.add(modelList);
                    grid.getView().refresh();
                }else{
                    store2.add(modelList);
                    grid2.getView().refresh();
                }

                view.setLoading(false);
            },failure : function(){
                view.setLoading(false);
            }

        });
    },

    proPopup: function(record) {
        var me = this, vm = this.getViewModel(), view = this.getView();
        var popup = me.lookupReference('proposalSubmitPopup');
        var object = Ext.create('bid_sp.model.bid.Bid', {
            id : vm.get('bidData.id')
        });

        popup.show();
        popup.center();
        //2번째 Param 공사로 던져야 '닫기'버튼 외 다른것 안뜸
        popup.loadOpenBidResult(object,'ConstructionService',record.get('vendorId'));
    },

    onMultiLotteryResultButtonClick: function(button, e, eOpts) {
        var me = this, vm = this.getViewModel(), view = this.getView();

        view.fireEvent('showMultiLotteryResult', vm.get('bidData.id'), 'bidResultDetailProduct');
    },

    onCloseButtonClick: function(button, e, eOpts) {
        var me = this;
        me.close();

    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this, view = this.getView();

        view.setLoading(true);
    }

});

/*
 * File: app/view/openInfoData/detail/product/BidResultDetailProduct.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.detail.product.BidResultDetailProduct', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.openinfodatadetailproductbidresultdetailproduct',

               
                                                                                  
                                                                                       
                              
                                 
                             
                           
                            
                         
                                  
                                  
                         
                                 
                               
                       
      

    controller: 'openinfodatadetailproductbidresultdetailproduct',
    viewModel: {
        type: 'openinfodatadetailproductbidresultdetailproduct'
    },
    ui: 'main',
    title: '#{개찰결과 상세조회}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            flex: 1,
            dock: 'top',
            ui: 'page',
            items: [
                {
                    xtype: 'displayfield',
                    value: '#{입찰개찰결과 상세내역을 조회합니다.}'
                },
                {
                    xtype: 'tbspacer'
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-view',
                    text: '#{복수추첨결과확인}',
                    bind: {
                        hidden: '{setMultiLotteryBtn}'
                    },
                    listeners: {
                        click: 'onMultiLotteryResultButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseButtonClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'form',
            margin: '0 0 5 0',
            ui: 'table',
            bodyPadding: 10,
            title: '#{입찰 기본정보}',
            fieldDefaults: {
                labelWidth: 120
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    width: '50%'
                }
            },
            items: [
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{공고번호}',
                    readOnly: true,
                    bind: {
                        value: '{bidData.no}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{공고명}',
                    readOnly: true,
                    bind: {
                        value: '{bidData.name}'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{낙찰자결정방법}',
                    readOnly: true,
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{bidData.bidType}',
                        store: '{bidTypeKind}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{입찰담당자}',
                    readOnly: true,
                    bind: {
                        value: '{bidData.representativeName}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{낙찰차수}',
                    fieldStyle: 'text-align:right',
                    readOnly: true,
                    bind: {
                        value: '{bidData.bidRevision}'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{계약구분}',
                    readOnly: true,
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{bidData.contractType}',
                        store: '{contractTypeKind}'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{통화}',
                    readOnly: true,
                    queryMode: 'local',
                    valueField: 'id',
                    bind: {
                        value: '{bidData.currencyCode}',
                        store: '{currencyCodeStore}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{제안서 평가결과}',
                    readOnly: true,
                    bind: {
                        hidden: '{gridNegoColSetHidden}',
                        value: '{setNegoRankingOpenYn}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    width: 300,
                    layout: 'table',
                    fieldLabel: '#{예정가격}',
                    items: [
                        {
                            xtype: 'textfield',
                            coverFormat: '0,000.####',
                            width: 145,
                            fieldStyle: 'text-align:right',
                            readOnly: true,
                            bind: {
                                value: '{bidData2.estimatedAmount}'
                            }
                        },
                        {
                            xtype: 'displayfield',
                            bind: {
                                value: '{setCurrencyCodeName}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'fieldcontainer',
                    width: 300,
                    layout: 'table',
                    fieldLabel: '#{기초금액}',
                    bind: {
                        hidden: '{isNotKepco}'
                    },
                    items: [
                        {
                            xtype: 'textfield',
                            coverFormat: '0,000.####',
                            width: 145,
                            fieldStyle: 'text-align:right',
                            readOnly: true,
                            bind: {
                                value: '{bidData2.estimatedPriceBasicAmount}'
                            }
                        },
                        {
                            xtype: 'displayfield',
                            bind: {
                                value: '{setCurrencyCodeName}'
                            }
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            reference: 'dataGrid',
            autoScroll: true,
            margin: '0 0 5 0',
            ui: 'grid',
            title: '#{투찰내역조회}',
            bind: {
                hidden: '{gridSetHidden}',
                store: '{dataStore}'
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'displayfield',
                            value: '#{※ 종합낙찰제의 경우 투찰금액과 에너지소모비용을 합산하여 최종 낙찰자를 선정함. 종합낙찰제의 경우 투찰률이 공개되지 않습니다.}',
                            fieldStyle: 'color:blue',
                            bind: {
                                hidden: '{gridTextSetHidden}'
                            }
                        }
                    ]
                }
            ],
            columns: [
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'ranking',
                    text: '#{투찰순위}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 110,
                    align: 'center',
                    dataIndex: 'vendorName',
                    text: '#{업체명}'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(!!value){
                            var registrationNo = Ext.String.insert(value, "-", 3);
                            return Ext.String.insert(registrationNo, "-", 6);
                        }
                    },
                    width: 120,
                    align: 'center',
                    dataIndex: 'vendorRegistrationNo',
                    text: '#{사업자등록번호}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'representativeName',
                    text: '#{대표자}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'proposalScore',
                    text: '#{제안점수}',
                    bind: {
                        hidden: '{gridNegoColSetHidden}'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'priceScore',
                    text: '#{가격점수}',
                    bind: {
                        hidden: '{gridNegoColSetHidden}'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'totalScore',
                    text: '#{총점}',
                    bind: {
                        hidden: '{gridNegoColSetHidden}'
                    }
                },
                {
                    xtype: 'actioncolumn',
                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                        var me= this;
                        var controller = item.up('[controller]').controller;
                        controller.proPopup(record);
                    },
                    width: 120,
                    align: 'center',
                    dataIndex: 'string',
                    text: '#{제안서평가결과}',
                    iconCls: 'icon-touch',
                    bind: {
                        hidden: '{!proposalEvalOpenYn}'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    align: 'right',
                    dataIndex: 'attendAmount',
                    text: '#{투찰금액}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 135,
                    align: 'center',
                    dataIndex: 'quantity',
                    text: '#{투찰수량[낙찰수량]}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'attendRate',
                    text: '#{투찰율(%)}'
                },
                {
                    xtype: 'datecolumn',
                    width: 125,
                    align: 'center',
                    dataIndex: 'submitDateTime',
                    text: '#{투찰일시}',
                    format: 'Y/m/d H:i'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'lotteryNum',
                    text: '#{추첨번호}',
                    bind: {
                        hidden: '{isNotKepco}'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'note',
                    text: '#{비고}'
                }
            ]
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            reference: 'dataGrid2',
            autoScroll: true,
            ui: 'grid',
            title: '#{제안서평가결과}',
            bind: {
                hidden: '{!gridSetHidden}',
                store: '{dataStore2}'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 110,
                    align: 'center',
                    dataIndex: 'vendorName',
                    text: '#{업체명}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'proposalScore',
                    text: '#{제안점수}'
                },
                {
                    xtype: 'actioncolumn',
                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                        var me= this;
                        var controller = item.up('[controller]').controller;
                        controller.proPopup(record);
                    },
                    width: 120,
                    align: 'center',
                    dataIndex: 'string',
                    text: '#{제안서평가결과}',
                    iconCls: 'icon-touch'
                }
            ]
        }
    ],
    listeners: {
        afterrender: 'onPanelAfterRender'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processOpenInfoDatadetailproductBidResultDetailProduct(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processOpenInfoDatadetailproductBidResultDetailProduct: function(config) {
        var me = this, items = me.items || config.items;
        items.push(
            {
                xclass:'bid_bp_proposaleval.view.PopupProposalSubmitResultRegistrationDetail',
                reference : 'proposalSubmitPopup',
                lazy : true,
                floating : true,
                closeAction : 'hide',
                closable : false,
                draggable : true,
                autoShow: false,
                modal:true,
            }
        );
    }

});

/*
 * File: app/view/openInfoData/detail/service/BidResultDetailServiceViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.detail.service.BidResultDetailServiceViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.openinfodatadetailservicebidresultdetailservice',

               
                          
                                
                               
                                
                               
                                   
                                                    
      

    data: {
        colSetHidden: true,
        bidData: null,
        
    },

    stores: {
        bidTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        dataStore: {
            model: 'bid_sp.model.openInfoData.OpenInfoDataList'
        },
        dataStore2: {
            model: 'bid_sp.model.openInfoData.OpenInfoDataList'
        },
        noticeKindKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.NoticeKindKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        }
    },
    formulas: {
        setNegoRankingOpenYn: {
            get: function(data) {
                var negoRankingOpenYn =  data.negoRankingOpenYn;

                if(negoRankingOpenYn){
                    return '공개';
                }else{
                    return '비공개';
                }
            },
            bind: {
                negoRankingOpenYn: '{bidData.negoRankingOpenYn}'
            }
        },
        setMultiLotteryBtn: {
            get: function(data) {
                var estimatedPriceType =  data.estimatedPriceType;

                if(estimatedPriceType==='Multi'){
                    return false;
                }else{
                    return true;
                }
            },
            bind: {
                estimatedPriceType: '{bidData.estimatedPriceType}'
            }
        },
        setWinningRateFieldHidden: {
            get: function(data) {
                var bidType =  data.bidType;
                var winningPriceLimitRate =  data.winningPriceLimitRate;

                if(bidType==='Nego'){
                    return true;
                }else{
                    if(winningPriceLimitRate ==='' || winningPriceLimitRate ===0 || winningPriceLimitRate ==='0'){
                        return true;
                    }else{
                        return false;
                    }
                }
            },
            bind: {
                bidType: '{bidData.bidType}',
                winningPriceLimitRate: '{bidData.winningPriceLimitRate}'
            }
        }
    },

    findBidDetail: function(bidId) {
        var deferred = Ext.create('Deft.Deferred');

        smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidBasicInfo(bidId, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    },

    findOpenInfoDataNegoGrid: function(bidId) {
        var deferred = Ext.create('Deft.Deferred');

        smartsuit.ui.etnajs.pro.rfx.sp.OpenInfoDataDetailController.findOpenInfoDataNegoGrid(bidId, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    },

    findOpenInfoDataAttendGrid: function(bidId) {
        var deferred = Ext.create('Deft.Deferred');

        smartsuit.ui.etnajs.pro.rfx.sp.OpenInfoDataDetailController.findOpenInfoDataAttendGrid(bidId, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    },

    findProposalEvalOpenYn: function(bidId) {
        var deferred = Ext.create('Deft.Deferred');

        smartsuit.ui.etnajs.pro.rfx.sp.OpenInfoDataDetailController.findProposalEvalOpenYn(bidId, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    }

});

/*
 * File: app/view/openInfoData/detail/service/BidResultDetailServiceViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.detail.service.BidResultDetailServiceViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.openinfodatadetailservicebidresultdetailservice',

    init: function() {
        var me = this;

        me.getView().loadData = Ext.Function.bind(me.loadData, me);
    },

    loadData: function(id) {
        var me = this, vm = this.getViewModel(), view = this.getView();
        vm.set('bidData.id',id);

        Etna.onDone(function(){
            me.findData(id);
        });

    },

    close: function() {
        var me = this;
        me.cleanData();
        me.getView().fireEvent('closeDetail');
    },

    cleanData: function() {

        var me = this, vm = this.getViewModel();

        vm.set('colSetHidden',true);
        vm.set('bidData',Ext.create('bid_sp.model.bid.Bid', {}));

        vm.getStore('dataStore').removeAll();
        vm.getStore('dataStore2').removeAll();
    },

    findData: function(id) {
        var me = this, vm = this.getViewModel(), view = this.getView();

        view.setLoading(true);
        vm.findBidDetail(id).then({
            success: function(result){
                var bidModel = Ext.create('bid_bp.model.bid.Bid', result);
                vm.set('bidData',bidModel);

                if(result.bidType =='Nego'){ //협상에의한 계약
                    vm.set('colSetHidden',false);
                }else{
                    vm.set('colSetHidden',true);
                }

                //투찰내역조회
                me.findDataGrid(id, result.bidType, result.negoRankingOpenYn);

                //제안서심사공개여부 조회
                me.findProposalEvalOpenYn(id);
            },
            failure: function() {
                view.setLoading(false);
            }
        }).done();
    },

    findDataGrid: function(id, bidType, negoRankingOpenYn) {
        var me = this, vm = this.getViewModel(), view = this.getView();
        var store = vm.getStore('dataStore');
        var store2 = vm.getStore('dataStore2');
        var modelList = [];
        var modelList2 = [];
        var grid = me.lookupReference('dataGrid');
        var grid2 = me.lookupReference('dataGrid2');
        var ranking = '';


        if(store.getRange()){
            store.removeAll();
        }


        //협상에의한 계약일때
        if(bidType === "Nego"){
            view.setLoading(true);
            vm.findOpenInfoDataNegoGrid(id).then({
                success : function(result){
                    Ext.each(result, function(item){
                        var model =null;

                        if(item.ranking ==='-1'){ //적격률 탈락(미만,초과)
                            item.ranking = '적격률탈락';
                            model = Ext.create('bid_sp.model.openInfoData.OpenInfoDataList',item);
                            modelList2.push(model);
                        }else{
                            model = Ext.create('bid_sp.model.openInfoData.OpenInfoDataList',item);
                            modelList.push(model);
                        }
                    });
                    if(modelList.length >0){
                        store.add(modelList);
                        grid.getView().refresh();
                    }
                    if(modelList2.length >0){
                        store2.add(modelList2);
                        grid2.getView().refresh();
                    }
                    view.setLoading(false);
                },failure : function(){
                    view.setLoading(false);
                }
            });
        }else{ //기타
            view.setLoading(true);
            vm.findOpenInfoDataAttendGrid(id).then({
                success : function(result){
                    Ext.each(result, function(item){
                        var model = null;
                        if(item.attendRangking<0){ //적격률 탈락(미만,초과)
                            ranking = '적격률탈락';
                            model = Ext.create('bid_sp.model.openInfoData.OpenInfoDataList',{
                                ranking : ranking,
                                vendorName : item.vendorName,
                                vendorRegistrationNo : item.vendorRegistrationNo,
                                representativeName : item.representativeName,
                                attendAmount : item.attendAmount,
                                submitDateTime : item.submitDateTime,
                                quantity : item.quantityOfInfoData,
                                note : item.note,
                                attendRate : item.attendRate,
                                lotteryNum : item.lotteryNum
                            });
                            modelList2.push(model);
                        }else{
                            ranking = item.attendRangking + '번';
                            model = Ext.create('bid_sp.model.openInfoData.OpenInfoDataList',{
                                ranking : ranking,
                                vendorName : item.vendorName,
                                vendorRegistrationNo : item.vendorRegistrationNo,
                                representativeName : item.representativeName,
                                attendAmount : item.attendAmount,
                                submitDateTime : item.submitDateTime,
                                quantity : item.quantityOfInfoData,
                                note : item.note,
                                attendRate : item.attendRate,
                                lotteryNum : item.lotteryNum
                            });
                            modelList.push(model);
                        }
                    });
                    if(modelList.length >0){
                        store.add(modelList);
                        grid.getView().refresh();
                    }
                    if(modelList2.length >0){
                        store2.add(modelList2);
                        grid2.getView().refresh();
                    }
                    view.setLoading(false);
                },failure : function(){
                    view.setLoading(false);
                }
            });
        }
    },

    findProposalEvalOpenYn: function(bidId) {
        var me = this, vm = this.getViewModel(), view = this.getView();

        view.setLoading(true);
        vm.findProposalEvalOpenYn(bidId).then({
            success : function(result){
                if(result){
                    vm.set('proposalEvalOpenYn',result.proposalEvalOpenYn);
                }else{
                    vm.set('proposalEvalOpenYn',false);
                }
                view.setLoading(false);
            },failure : function(){
                view.setLoading(false);
            }
        });
    },

    proPopup: function(record) {
        var me = this, vm = this.getViewModel(), view = this.getView();
        var popup = me.lookupReference('proposalSubmitPopup');
        var object = Ext.create('bid_sp.model.bid.Bid', {
            id : vm.get('bidData.id')
        });

        popup.show();
        popup.center();
        popup.loadOpenBidResult(object,'ConstructionService',record.get('vendorId'));
    },

    onMultiLotteryResultButtonClick: function(button, e, eOpts) {
        var me = this, vm = this.getViewModel(), view = this.getView();

        view.fireEvent('showMultiLotteryResult', vm.get('bidData.id'), 'bidResultDetailService');
    },

    onCloseButtonClick: function(button, e, eOpts) {
        var me = this;
        me.close();

    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this, view = this.getView();

        view.setLoading(true);
    }

});

/*
 * File: app/view/openInfoData/detail/service/BidResultDetailService.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.detail.service.BidResultDetailService', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.openinfodatadetailservicebidresultdetailservice',

               
                                                                                  
                                                                                       
                              
                                 
                             
                           
                            
                         
                                  
                                  
                                
                         
                                 
                                 
                               
                        
                                  
                                 
                                   
                                   
      

    controller: 'openinfodatadetailservicebidresultdetailservice',
    viewModel: {
        type: 'openinfodatadetailservicebidresultdetailservice'
    },
    autoScroll: true,
    ui: 'main',
    title: '#{입찰공고 개찰결과}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            flex: 1,
            dock: 'top',
            ui: 'page',
            items: [
                {
                    xtype: 'displayfield',
                    value: '#{입찰개찰결과 상세내역을 조회합니다.}'
                },
                {
                    xtype: 'tbspacer'
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-view',
                    text: '#{복수추첨결과확인}',
                    bind: {
                        hidden: '{setMultiLotteryBtn}'
                    },
                    listeners: {
                        click: 'onMultiLotteryResultButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseButtonClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'form',
            margin: '0 0 5 0',
            ui: 'table',
            bodyPadding: 10,
            title: '#{입찰 기본정보}',
            fieldDefaults: {
                labelWidth: 120
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    width: '50%'
                }
            },
            items: [
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{공고번호}',
                    readOnly: true,
                    bind: {
                        value: '{bidData.no}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{공고명}',
                    readOnly: true,
                    bind: {
                        value: '{bidData.name}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    width: 380,
                    fieldLabel: '#{공고사업소}',
                    layout: {
                        type: 'table',
                        columns: 3
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            width: 150,
                            fieldLabel: '',
                            readOnly: true,
                            displayField: 'name',
                            queryMode: 'local',
                            valueField: 'id',
                            bind: {
                                value: '{bidData.operatingUnitId}',
                                store: '{operatingUnitStore}'
                            }
                        },
                        {
                            xtype: 'displayfield',
                            margin: '0 2 0 2',
                            value: '/'
                        },
                        {
                            xtype: 'textfield',
                            width: 100,
                            fieldLabel: '',
                            readOnly: true,
                            bind: {
                                value: '{bidData.placeName}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{공고종류}',
                    readOnly: true,
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{bidData.noticeKind}',
                        store: '{noticeKindKind}'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{계약구분}',
                    readOnly: true,
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{bidData.contractType}',
                        store: '{contractTypeKind}'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{낙찰자결정방법}',
                    readOnly: true,
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{bidData.bidType}',
                        store: '{bidTypeKind}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    width: 300,
                    layout: 'table',
                    fieldLabel: '#{예정가격}',
                    items: [
                        {
                            xtype: 'numberfield',
                            coverFormat: '0,000.####',
                            width: 145,
                            fieldStyle: 'text-align:right',
                            readOnly: true,
                            decimalPrecision: 4,
                            bind: {
                                value: '{bidData.estimatedAmount}'
                            }
                        },
                        {
                            xtype: 'displayfield',
                            value: '#{원}'
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{적격률(%)}',
                    fieldStyle: 'text-align:right',
                    readOnly: true,
                    bind: {
                        hidden: '{setWinningRateFieldHidden}',
                        value: '{bidData.winningPriceLimitRate}'
                    }
                }
            ]
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            reference: 'dataGrid',
            stateId: '9be6b99f-888a-42ec-982f-258e4c2d2d7b',
            stateful: true,
            autoScroll: true,
            margin: '0 0 5 0',
            minHeight: 200,
            ui: 'grid',
            title: '#{투찰내역조회}',
            bind: {
                hidden: '{gridSetHidden}',
                store: '{dataStore}'
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'displayfield',
                            value: '#{※ 적격심사 대상자 목록}'
                        }
                    ]
                }
            ],
            columns: [
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'ranking',
                    text: '#{심사순위}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 110,
                    align: 'center',
                    dataIndex: 'vendorName',
                    text: '#{업체명}'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(!!value){
                            var registrationNo = Ext.String.insert(value, "-", 3);
                            return Ext.String.insert(registrationNo, "-", 6);
                        }
                    },
                    width: 120,
                    align: 'center',
                    dataIndex: 'vendorRegistrationNo',
                    text: '#{사업자등록번호}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'representativeName',
                    text: '#{대표자}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'proposalScore',
                    text: '#{제안점수}',
                    bind: {
                        hidden: '{colSetHidden}'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'priceScore',
                    text: '#{가격점수}',
                    bind: {
                        hidden: '{colSetHidden}'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'totalScore',
                    text: '#{총점}',
                    bind: {
                        hidden: '{colSetHidden}'
                    }
                },
                {
                    xtype: 'actioncolumn',
                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                        var me= this;
                        var controller = item.up('[controller]').controller;
                        controller.proPopup(record);
                    },
                    width: 120,
                    align: 'center',
                    dataIndex: 'string',
                    text: '#{제안서평가결과}',
                    iconCls: 'icon-touch',
                    bind: {
                        hidden: '{!proposalEvalOpenYn}'
                    }
                },
                {
                    xtype: 'numbercolumn',
                    width: 150,
                    align: 'right',
                    dataIndex: 'attendAmount',
                    text: '#{투찰금액}',
                    format: '0,000.####'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'attendRate',
                    text: '#{투찰율(%)}',
                    bind: {
                        hidden: '{!colSetHidden}'
                    }
                },
                {
                    xtype: 'datecolumn',
                    width: 125,
                    align: 'center',
                    dataIndex: 'submitDateTime',
                    text: '#{투찰일시}',
                    format: 'Y/m/d H:i'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'note',
                    text: '#{비고}'
                }
            ],
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                }
            ]
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            reference: 'dataGrid2',
            stateId: 'a68061ac-0cf2-4c0c-bb69-5b68dbf9ddef',
            stateful: true,
            autoScroll: true,
            margin: '0 0 5 0',
            minHeight: 200,
            ui: 'grid',
            bind: {
                store: '{dataStore2}'
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'displayfield',
                            value: '#{※ 적격률 탈락(미만, 초과) 대상자 목록}'
                        }
                    ]
                }
            ],
            columns: [
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'ranking',
                    text: ''
                },
                {
                    xtype: 'gridcolumn',
                    width: 110,
                    align: 'center',
                    dataIndex: 'vendorName',
                    text: '#{업체명}'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(!!value){
                            var registrationNo = Ext.String.insert(value, "-", 3);
                            return Ext.String.insert(registrationNo, "-", 6);
                        }
                    },
                    width: 120,
                    align: 'center',
                    dataIndex: 'vendorRegistrationNo',
                    text: '#{사업자등록번호}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'representativeName',
                    text: '#{대표자}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'totalScore',
                    text: '#{총점}',
                    bind: {
                        hidden: '{colSetHidden}'
                    }
                },
                {
                    xtype: 'actioncolumn',
                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                        var me= this;
                        var controller = item.up('[controller]').controller;
                        controller.proPopup(record);
                    },
                    width: 120,
                    align: 'center',
                    dataIndex: 'string',
                    text: '#{제안서평가결과}',
                    iconCls: 'icon-touch',
                    bind: {
                        hidden: '{!proposalEvalOpenYn}'
                    }
                },
                {
                    xtype: 'numbercolumn',
                    width: 150,
                    align: 'right',
                    dataIndex: 'attendAmount',
                    text: '#{투찰금액}',
                    format: '0,000.####'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'attendRate',
                    text: '#{투찰율(%)}',
                    bind: {
                        hidden: '{!colSetHidden}'
                    }
                },
                {
                    xtype: 'datecolumn',
                    width: 125,
                    align: 'center',
                    dataIndex: 'submitDateTime',
                    text: '#{투찰일시}',
                    format: 'Y/m/d H:i'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'note',
                    text: '#{비고}'
                }
            ],
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                }
            ]
        }
    ],
    listeners: {
        afterrender: 'onPanelAfterRender'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processOpenInfoDatadetailserviceBidResultDetailService(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processOpenInfoDatadetailserviceBidResultDetailService: function(config) {
        var me = this, items = me.items || config.items;
        items.push(
            {
                xclass:'bid_bp_proposaleval.view.PopupProposalSubmitResultRegistrationDetail',
                reference : 'proposalSubmitPopup',
                lazy : true,
                floating : true,
                closeAction : 'hide',
                closable : false,
                draggable : true,
                autoShow: false,
                modal:true,
            }
        );
    }

});

/*
 * File: app/view/openInfoData/detail/service/BidResultDetailServiceFailViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.detail.service.BidResultDetailServiceFailViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.openinfodatadetailservicebidresultdetailservicefail',

               
                          
                                
                               
                                
                               
                                   
                                                    
      

    data: {
        colSetHidden: true,
        bidData: null,
        
    },

    stores: {
        bidTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        dataStore: {
            model: 'bid_sp.model.openInfoData.OpenInfoDataList'
        },
        dataStore2: {
            model: 'bid_sp.model.openInfoData.OpenInfoDataList'
        },
        noticeKindKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.NoticeKindKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        }
    },
    formulas: {
        setNegoRankingOpenYn: {
            get: function(data) {
                var negoRankingOpenYn =  data.negoRankingOpenYn;

                if(negoRankingOpenYn){
                    return '공개';
                }else{
                    return '비공개';
                }
            },
            bind: {
                negoRankingOpenYn: '{bidData.negoRankingOpenYn}'
            }
        },
        setMultiLotteryBtn: {
            get: function(data) {
                var estimatedPriceType =  data.estimatedPriceType;

                if(estimatedPriceType==='Multi'){
                    return false;
                }else{
                    return true;
                }
            },
            bind: {
                estimatedPriceType: '{bidData.estimatedPriceType}'
            }
        },
        setWinningRateFieldHidden: {
            get: function(data) {
                var bidType =  data.bidType;
                var winningPriceLimitRate =  data.winningPriceLimitRate;

                if(bidType==='Nego'){
                    return true;
                }else{
                    if(winningPriceLimitRate ==='' || winningPriceLimitRate ===0 || winningPriceLimitRate ==='0'){
                        return true;
                    }else{
                        return false;
                    }
                }
            },
            bind: {
                bidType: '{bidData.bidType}',
                winningPriceLimitRate: '{bidData.winningPriceLimitRate}'
            }
        }
    },

    findBidDetail: function(bidId) {
        var deferred = Ext.create('Deft.Deferred');

        smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidBasicInfo(bidId, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    },

    findOpenInfoDataNegoGrid: function(bidId) {
        var deferred = Ext.create('Deft.Deferred');

        smartsuit.ui.etnajs.pro.rfx.sp.OpenInfoDataDetailController.findOpenInfoDataNegoGrid(bidId, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    },

    findOpenInfoDataAttendGrid: function(bidId) {
        var deferred = Ext.create('Deft.Deferred');

        smartsuit.ui.etnajs.pro.rfx.sp.OpenInfoDataDetailController.findOpenInfoDataAttendGrid(bidId, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    }

});

/*
 * File: app/view/openInfoData/detail/service/BidResultDetailServiceFailViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.detail.service.BidResultDetailServiceFailViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.openinfodatadetailservicebidresultdetailservicefail',

    init: function() {
        var me = this;

        me.getView().loadData = Ext.Function.bind(me.loadData, me);
    },

    loadData: function(record) {
        var me = this, vm = this.getViewModel(), view = this.getView();
        vm.set('bidData.id',record.get('id'));
        vm.set('bidResultStateInOpenInfoData',record.get('bidResultStateInOpenInfoData'));

        Etna.onDone(function(){
            me.findData(record.get('id'));
        });

    },

    close: function() {
        var me = this;
        me.cleanData();
        me.getView().fireEvent('closeDetail');
    },

    cleanData: function() {

        var me = this, vm = this.getViewModel();

        vm.set('colSetHidden',true);
        vm.set('bidData',Ext.create('bid_sp.model.bid.Bid', {}));

        vm.getStore('dataStore').removeAll();
        vm.getStore('dataStore2').removeAll();
    },

    findData: function(id) {
        var me = this, vm = this.getViewModel(), view = this.getView();

        view.setLoading(true);
        vm.findBidDetail(id).then({
            success: function(result){
                var bidModel = Ext.create('bid_sp.model.bid.Bid', result);
                vm.set('bidData',bidModel);
                view.setLoading(false);
            },
            failure: function() {
                view.setLoading(false);
            }
        }).done();
    },

    onMultiLotteryResultButtonClick: function(button, e, eOpts) {
        var me = this, vm = this.getViewModel(), view = this.getView();

        view.fireEvent('showMultiLotteryResult', vm.get('bidData.id'), 'bidResultDetailFailService');
    },

    onCloseButtonClick: function(button, e, eOpts) {
        var me = this;
        me.close();

    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this, view = this.getView();

        view.setLoading(true);
    }

});

/*
 * File: app/view/openInfoData/detail/service/BidResultDetailServiceFail.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.detail.service.BidResultDetailServiceFail', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.openinfodatadetailservicebidresultdetailservicefail',

               
                                                                                      
                                                                                           
                              
                                 
                             
                           
                            
                         
                                  
                                  
                               
      

    controller: 'openinfodatadetailservicebidresultdetailservicefail',
    viewModel: {
        type: 'openinfodatadetailservicebidresultdetailservicefail'
    },
    autoScroll: true,
    ui: 'main',
    title: '#{입찰공고 개찰결과}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            flex: 1,
            dock: 'top',
            ui: 'page',
            items: [
                {
                    xtype: 'displayfield',
                    value: '#{입찰개찰결과 상세내역을 조회합니다.}'
                },
                {
                    xtype: 'tbspacer'
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-view',
                    text: '#{복수추첨결과확인}',
                    bind: {
                        hidden: '{setMultiLotteryBtn}'
                    },
                    listeners: {
                        click: 'onMultiLotteryResultButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseButtonClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'form',
            margin: '0 0 5 0',
            ui: 'table',
            bodyPadding: 10,
            title: '#{입찰 기본정보}',
            fieldDefaults: {
                labelWidth: 120
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    width: '50%'
                }
            },
            items: [
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{공고번호}',
                    readOnly: true,
                    bind: {
                        value: '{bidData.no}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{공고명}',
                    readOnly: true,
                    bind: {
                        value: '{bidData.name}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    width: 380,
                    fieldLabel: '#{공고사업소}',
                    layout: {
                        type: 'table',
                        columns: 3
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            width: 150,
                            fieldLabel: '',
                            readOnly: true,
                            displayField: 'name',
                            queryMode: 'local',
                            valueField: 'id',
                            bind: {
                                value: '{bidData.operatingUnitId}',
                                store: '{operatingUnitStore}'
                            }
                        },
                        {
                            xtype: 'displayfield',
                            margin: '0 2 0 2',
                            value: '/'
                        },
                        {
                            xtype: 'textfield',
                            width: 100,
                            fieldLabel: '',
                            readOnly: true,
                            bind: {
                                value: '{bidData.placeName}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{공고종류}',
                    readOnly: true,
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{bidData.noticeKind}',
                        store: '{noticeKindKind}'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{계약구분}',
                    readOnly: true,
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{bidData.contractType}',
                        store: '{contractTypeKind}'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{낙찰자결정방법}',
                    readOnly: true,
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{bidData.bidType}',
                        store: '{bidTypeKind}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    width: 300,
                    layout: 'table',
                    fieldLabel: '#{예정가격}',
                    items: [
                        {
                            xtype: 'numberfield',
                            coverFormat: '0,000.####',
                            width: 145,
                            fieldStyle: 'text-align:right',
                            readOnly: true,
                            decimalPrecision: 4,
                            bind: {
                                value: '{bidData.estimatedAmount}'
                            }
                        },
                        {
                            xtype: 'displayfield',
                            value: '#{원}'
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{적격률(%)}',
                    fieldStyle: 'text-align:right',
                    readOnly: true,
                    bind: {
                        hidden: '{setWinningRateFieldHidden}',
                        value: '{bidData.winningPriceLimitRate}'
                    }
                }
            ]
        },
        {
            xtype: 'form',
            flex: 1,
            margin: '0 0 5',
            ui: 'grid',
            bodyPadding: 10,
            title: '#{투찰내역조회}',
            items: [
                {
                    xtype: 'fieldcontainer',
                    height: '100%',
                    width: '100%',
                    fieldLabel: '',
                    items: [
                        {
                            xtype: 'displayfield',
                            width: '100%',
                            fieldLabel: '',
                            value: '#{개찰결과를 확인할 수 없는 상태입니다.}',
                            fieldStyle: 'text-align:center; font-size: 20px'
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'textfield',
            fieldLabel: '#{상태}',
            readOnly: true,
            bind: {
                value: '{bidResultStateInOpenInfoData}'
            }
        },
        {
            xtype: 'textfield',
            fieldLabel: '#{사유}',
            readOnly: true,
            bind: {
                value: '{bidData.failReason}'
            }
        }
    ],
    listeners: {
        afterrender: 'onPanelAfterRender'
    }

});

/*
 * File: app/view/openInfoData/detail/product/BidResultDetailProductFailViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.detail.product.BidResultDetailProductFailViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.openinfodatadetailproductbidresultdetailproductfail',

               
                          
                                
                               
                                
                                                    
      

    data: {
        gridTextSetHidden: true,
        gridNegoColSetHidden: false,
        gridSetHidden: false,
        bidData: null,
        isNotKepco: true
    },

    stores: {
        bidTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        progressStateTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.RfxProgressStateKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        }
    },

    findBidDetail: function(bidId) {
        var deferred = Ext.create('Deft.Deferred');

        smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidBasicInfo(bidId, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    }

});

/*
 * File: app/view/openInfoData/detail/product/BidResultDetailProductFailViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.detail.product.BidResultDetailProductFailViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.openinfodatadetailproductbidresultdetailproductfail',

    init: function() {
        var me = this;

        me.getView().loadData = Ext.Function.bind(me.loadData, me);
    },

    loadData: function(record) {
        var me = this, vm = this.getViewModel(), view = this.getView();
        vm.set('bidData.id',record.get('id'));
        vm.set('bidResultStateInOpenInfoData',record.get('bidResultStateInOpenInfoData'));

        Etna.onDone(function(){
            me.findData(record.get('id'));
        });

    },

    close: function() {
        var me = this;
        me.cleanData();
        me.getView().fireEvent('closeDetail');
    },

    cleanData: function() {

        var me = this, vm = this.getViewModel();

        vm.set('bidData',Ext.create('bid_sp.model.bid.Bid', {}));

    },

    findData: function(id) {
        var me = this, vm = this.getViewModel(), view = this.getView();

        view.setLoading(true);
        vm.findBidDetail(id).then({
            success: function(result){
                var bidModel = Ext.create('bid_sp.model.bid.Bid', result);
                vm.set('bidData',bidModel);
                view.setLoading(false);
            },
            failure: function() {
                view.setLoading(false);
            }
        }).done();
    },

    onCloseButtonClick: function(button, e, eOpts) {
        var me = this;
        me.close();

    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this, view = this.getView();

        view.setLoading(true);
    }

});

/*
 * File: app/view/openInfoData/detail/product/BidResultDetailProductFail.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.detail.product.BidResultDetailProductFail', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.openinfodatadetailproductbidresultdetailproductfail',

               
                                                                                      
                                                                                           
                              
                                 
                             
                           
                            
                         
                                 
      

    controller: 'openinfodatadetailproductbidresultdetailproductfail',
    viewModel: {
        type: 'openinfodatadetailproductbidresultdetailproductfail'
    },
    autoScroll: true,
    ui: 'main',
    title: '#{개찰결과 상세조회}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            flex: 1,
            dock: 'top',
            ui: 'page',
            items: [
                {
                    xtype: 'displayfield',
                    value: '#{입찰개찰결과 상세내역을 조회합니다.}'
                },
                {
                    xtype: 'tbspacer'
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseButtonClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'form',
            margin: '0 0 5 0',
            ui: 'table',
            bodyPadding: 10,
            title: '#{입찰 기본정보}',
            fieldDefaults: {
                labelWidth: 120
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    width: '50%'
                }
            },
            items: [
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{공고번호}',
                    readOnly: true,
                    bind: {
                        value: '{bidData.no}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{공고명}',
                    readOnly: true,
                    bind: {
                        value: '{bidData.name}'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{낙찰자결정방법}',
                    readOnly: true,
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{bidData.bidType}',
                        store: '{bidTypeKind}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{입찰담당자}',
                    readOnly: true,
                    bind: {
                        value: '{bidData.representativeName}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{낙찰차수}',
                    fieldStyle: 'text-align:right',
                    readOnly: true,
                    bind: {
                        value: '{bidData.bidRevision}'
                    }
                }
            ]
        },
        {
            xtype: 'form',
            ui: 'table',
            bodyPadding: 10,
            title: '#{유찰사유}',
            fieldDefaults: {
                labelWidth: 120
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    width: '50%'
                }
            },
            items: [
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{진행상태}',
                    readOnly: true,
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{bidData.progressState}',
                        store: '{progressStateTypeKind}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{유찰사유}',
                    readOnly: true,
                    bind: {
                        value: '{bidData.failReason}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{비고}',
                    readOnly: true,
                    bind: {
                        value: '{bidResultStateInOpenInfoData}'
                    }
                }
            ]
        }
    ],
    listeners: {
        afterrender: 'onPanelAfterRender'
    }

});

/*
 * File: app/view/openInfoData/BidResult.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.BidResult', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.openinfodatabidresult',

               
                                                      
                                                           
                                                      
                                                                         
                                                                         
                                                                             
                                                                             
                         
      

    controller: 'openinfodatabidresult',
    viewModel: {
        type: 'openinfodatabidresult'
    },

    layout: {
        type: 'card',
        deferredRender: true
    },
    items: [
        {
            xtype: 'openinfodatalistbidresultlist',
            reference: 'bidResultList',
            listeners: {
                showBidDetail: 'onPanelShowBidDetail',
                showBidResultDetailProduct: 'onPanelShowBidResultDetailProduct',
                showBidResultDetailService: 'onPanelShowBidResultDetailService',
                showBidResultFailDetailProduct: 'onPanelShowBidResultFailDetailProduct',
                showBidResultFailDetailService: 'onPanelShowBidResultFailDetailService'
            }
        },
        {
            xtype: 'openinfodatadetailproductbidresultdetailproduct',
            lazy: true,
            reference: 'bidResultDetailProduct',
            listeners: {
                showMultiLotteryResult: 'onPanelShowMultiLotteryResult',
                closeDetail: 'onPanelCloseDetail'
            }
        },
        {
            xtype: 'openinfodatadetailservicebidresultdetailservice',
            lazy: true,
            reference: 'bidResultDetailService',
            listeners: {
                showMultiLotteryResult: 'onPanelShowMultiLotteryResult1',
                closeDetail: 'onPanelCloseDetail1'
            }
        },
        {
            xtype: 'openinfodatadetailservicebidresultdetailservicefail',
            lazy: true,
            reference: 'bidResultFailDetailService',
            listeners: {
                closeDetail: 'onPanelCloseDetail2',
                showMultiLotteryResult: 'onPanelShowMultiLotteryResult2'
            }
        },
        {
            xtype: 'openinfodatadetailproductbidresultdetailproductfail',
            reference: 'bidResultFailDetailProduct',
            listeners: {
                closeDetail: 'onPanelCloseDetail3'
            }
        }
    ],

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processOpenInfoDataBidResult(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processOpenInfoDataBidResult: function(config) {
        var me = this, items = me.items || config.items;

        items.push({
            xclass:'bid_sp.view.bidAnnouncement.detail.product.BidAnnouncementDetail',
            reference : 'bidAnnouncementProductDetail',
            lazy : true,
            autoShow: false,
            listeners: {
                closeDetail: 'showList'
            }
        },{
            xclass:'bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetail',
            reference : 'bidAnnouncementServiceDetail',
            lazy : true,
            autoShow: false,
            listeners: {
                closeDetail: 'showList'
            }
        },{
            xclass:'bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetail',
            reference : 'foreignBidAnnouncementProductDetail',
            lazy : true,
            listeners: {
                closeDetail : 'showList'
            }
        },{
            xclass:'bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetail',
            reference : 'foreignBidAnnouncementServiceDetail',
            lazy : true,
            listeners: {
                closeDetail : 'showList'
            }
        },{
            xclass:'bid_bp_openbid.view.openingBidsImplementation.detail.MultiLotteryResult',
            reference : 'multiLotteryResult',
            lazy : true,
            listeners: {
                closeMultiLotteryResult : 'showBidResultDetailAtMulty'
            }
        });
    }

});

/*
 * File: app/view/openInfoData/ContractResultByItemViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.ContractResultByItemViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.openinfodatacontractresultbyitem'

});

/*
 * File: app/view/openInfoData/ContractResultByItemViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.ContractResultByItemViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.openinfodatacontractresultbyitem',

    showBidDetail: function(bidRecord) {
        var me = this;
        var detail;

        if(bidRecord.get('purchaseType') == 'Product'){		// 자재
            if(bidRecord.get('foreignBidType') == 'ProductBidForeignItem' || bidRecord.get('foreignBidType') == 'ProductBidSideEquipment'){	//외자
                detail = me.lookupReference('foreignBidAnnouncementProductDetail');
            }else{
                detail = me.lookupReference('bidAnnouncementProductDetail');
            }
        }else{
            if(bidRecord.get('foreignBidType') == 'ServiceBid'){	//외자
                detail = me.lookupReference('foreignBidAnnouncementServiceDetail');
            }else{
                detail = me.lookupReference('bidAnnouncementServiceDetail');
            }
        }

        detail.loadData(bidRecord.get('id'), 'Bid');
        me.getView().getLayout().setActiveItem(detail);
    },

    showList: function() {
        var me = this;
        var list = me.lookupReference('contractResultByItemList');
        list.search();
        me.getView().getLayout().setActiveItem(list);
    },

    onPanelShowBidDetail: function(record, eventOptions) {
        var me = this;
        me.showBidDetail(record);
    }

});

/*
 * File: app/view/openInfoData/list/ContractResultByItemListViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.ContractResultByItemListViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.openinfodatalistcontractresultbyitemlist',

               
                                
                               
                          
                          
                                
                                                       
                                       
      

    data: {
        searchValues: null
    },

    stores: {
        companyStore: {
            model: 'bid_sp.model.cmmn.CompanyCode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.basis.GroupCodeController.findCompanyCodeDatas',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            filters: {
                filterFn: function(item) {
                    var me = this;
                    var itemId = item.getData().id;
                    if(itemId=='ALL'||itemId=='COM01'||itemId=='COM02'||itemId=='COM03'||itemId=='COM04'||itemId=='COM05'||itemId=='COM06'||itemId=='COM08'||itemId=='COM10'||itemId=='COM16'||itemId=='COM19'){
                        return item;
                    }
                }
            }
        },
        bidTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        noticeTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.NoticeTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        competitionTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CompetitionTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractResultByItemStore: {
            model: 'bid_sp.model.openInfoData.ContractResultList',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.OpenInfoDataListController.findOpenInfoDataContractResultList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        }
    }

});

/*
 * File: app/view/openInfoData/list/ContractResultByItemListViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.ContractResultByItemListViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.openinfodatalistcontractresultbyitemlist',

    search: function() {
        var me = this, vm = this.getViewModel();
        var store = vm.getStore('contractResultByItemStore');
        var params = vm.get('searchValues');

        // if(!me.searchValidation()){
        //     return;
        // }

        me.getView().setLoading(true);
        store.loadPage(1, {
            params : params,
            callback : function(records, operation, success){
                me.getView().setLoading(false);
            }
        });
    },

    refresh: function() {
        var me = this, vm = this.getViewModel();

        vm.set('searchValues', {
            companyId : me.getViewModel().get('companyStore').first().get('id'),
            fromContractDate : Ext.Date.add(new Date(), Ext.Date.MONTH, -1),
            toContractDate : Ext.Date.add(new Date())
        });
    },

    init: function() {
        var me = this,
            vm = this.getViewModel();

        me.getView().search = Ext.Function.bind(me.search, me);
    },

    onBidGridCellclick: function(record) {
        var me = this;

        me.getView().fireEvent('showBidDetail',record);
    },

    onSearchButtonClick: function(button, e, eOpts) {
        var me = this;
        me.search();
    },

    onRefreshButtonClick: function(button, e, eOpts) {
        var me = this, vm = this.getViewModel();

        me.refresh();
    },

    onFormSpecialKey: function(form, e) {
        var me = this;

        if(e.ENTER == e.getKey()){
            me.search();
        }
    },

    onGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        var me = this;
        var dataIndex = tableview.getColumnManager().getHeaderAtIndex(cellIndex).dataIndex;

        if(dataIndex =='no'){ // 공고번호 클릭
            me.onBidGridCellclick(record);
        }
    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this, vm = this.getViewModel();

        me.getView().setLoading(true);
        Etna.onDone(function() {
            var companyCodeStore = vm.getStore('companyStore');
            companyCodeStore.load({
                callback: function(records, operation, success) {
                    me.refresh();
                    me.getView().setLoading(false);
                }
            });
        });
    }

});

/*
 * File: app/view/openInfoData/list/ContractResultByItemList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.ContractResultByItemList', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.openinfodatalistcontractresultbyitemlist',

               
                                                                          
                                                                               
                         
                                 
                           
                            
                                  
                                  
                              
                         
                                           
                         
                                 
                               
                                 
                        
                                    
                                  
                                 
                                   
                                   
      

    controller: 'openinfodatalistcontractresultbyitemlist',
    viewModel: {
        type: 'openinfodatalistcontractresultbyitemlist'
    },
    ui: 'main',
    title: '#{품목별 계약현황}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            ui: 'search',
            defaults: {
                bubbleEvents: [
                    'specialkey'
                ],
                defaults: {
                    bubbleEvents: [
                        'specialkey'
                    ],
                    defaults: {
                        bubbleEvents: [
                            'specialkey'
                        ]
                    }
                }
            },
            bodyPadding: 5,
            title: '',
            fieldDefaults: {
                labelWidth: 120
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'displayfield',
                            fieldLabel: '',
                            value: '#{업체별 계약현황을 조회합니다.}'
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-search',
                            text: '#{조회}',
                            listeners: {
                                click: 'onSearchButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-refresh',
                            text: '#{초기화}',
                            listeners: {
                                click: 'onRefreshButtonClick'
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'combobox',
                    width: 340,
                    fieldLabel: '#{회사이름}',
                    allowBlank: false,
                    editable: false,
                    displayField: 'name',
                    queryMode: 'local',
                    valueField: 'id',
                    bind: {
                        value: '{searchValues.companyId}',
                        store: '{companyStore}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    width: 340,
                    layout: 'table',
                    fieldLabel: '#{계약일자}',
                    labelWidth: 120,
                    items: [
                        {
                            xtype: 'datefield',
                            reference: 'fromContractDate',
                            width: 110,
                            fieldLabel: '',
                            name: 'fromContractDate',
                            allowBlank: false,
                            minValue: '01/01/2013',
                            bind: {
                                value: '{searchValues.fromContractDate}',
                                maxValue: '{searchValues.toContractDate}'
                            }
                        },
                        {
                            xtype: 'label',
                            text: '~'
                        },
                        {
                            xtype: 'datefield',
                            reference: 'toContractDate',
                            width: 110,
                            fieldLabel: '',
                            name: 'toContractDate',
                            allowBlank: false,
                            bind: {
                                value: '{searchValues.toContractDate}',
                                minValue: '{searchValues.fromContractDate}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    width: 340,
                    fieldLabel: '#{공고번호}',
                    enforceMaxLength: true,
                    maxLength: 30,
                    bind: {
                        value: '{searchValues.no}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{공고명}',
                    enforceMaxLength: true,
                    maxLength: 500,
                    bind: {
                        value: '{searchValues.name}'
                    }
                }
            ],
            listeners: {
                specialKey: 'onFormSpecialKey'
            },
            plugins: [
                {
                    ptype: 'autoClearButton'
                }
            ]
        },
        {
            xtype: 'displayfield',
            fieldLabel: '',
            value: '#{※ 한국전력기술, 원자력연료, 발전교육원, 전력거래소에서 등록한 공고는 공개하지 않습니다.}',
            fieldStyle: 'color:blue'
        },
        {
            xtype: 'displayfield',
            fieldLabel: '',
            value: '#{※ 2013.01.01 계약건부터 조회가 가능합니다.}'
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            autoScroll: true,
            ui: 'grid',
            title: '',
            bind: {
                store: '{contractResultByItemStore}'
            },
            columns: [
                {
                    xtype: 'etnastorecolumn',
                    width: 150,
                    align: 'center',
                    dataIndex: 'companyId',
                    text: '#{회사이름}',
                    valueField: 'id',
                    displayField: 'name',
                    bind: {
                        store: '{companyStore}'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    align: 'center',
                    dataIndex: 'no',
                    tdCls: 'link',
                    text: '#{공고번호}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'revision',
                    text: '#{공고차수}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'bidRevision',
                    text: '#{입찰차수}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 250,
                    dataIndex: 'name',
                    text: '#{공고명}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'placeName',
                    text: '#{공고부서}'
                },
                {
                    xtype: 'datecolumn',
                    width: 120,
                    align: 'center',
                    dataIndex: 'noticeDate',
                    text: '#{공고일자}'
                },
                {
                    xtype: 'etnastorecolumn',
                    align: 'center',
                    dataIndex: 'competitionType',
                    text: '#{계약방법}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{competitionTypeKind}'
                    }
                },
                {
                    xtype: 'etnastorecolumn',
                    align: 'center',
                    dataIndex: 'bidType',
                    text: '#{낙찰자선정}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{bidTypeKind}'
                    }
                },
                {
                    xtype: 'etnastorecolumn',
                    align: 'center',
                    dataIndex: 'noticeType',
                    text: '#{공고종류}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{noticeTypeKind}'
                    }
                },
                {
                    xtype: 'datecolumn',
                    width: 150,
                    align: 'center',
                    dataIndex: 'bidAttendRequestCloseDateTime',
                    text: '#{입찰참가 마감일시}'
                },
                {
                    xtype: 'datecolumn',
                    width: 150,
                    align: 'center',
                    dataIndex: 'beginDateTime',
                    text: '#{입찰서 제출 개시일시}'
                },
                {
                    xtype: 'datecolumn',
                    width: 150,
                    align: 'center',
                    dataIndex: 'endDateTime',
                    text: '#{입찰서 제출 마감일시}'
                },
                {
                    xtype: 'numbercolumn',
                    width: 200,
                    align: 'right',
                    dataIndex: 'contractAmount',
                    text: '#{계약금액(VAT제외)}',
                    format: '0,000.####'
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    align: 'center',
                    dataIndex: 'vendorName',
                    text: '#{계약업체}'
                }
            ],
            dockedItems: [
                {
                    xtype: 'etnascrollpagingtoolbar',
                    dock: 'bottom',
                    bind: {
                        store: '{contractResultByItemStore}'
                    }
                }
            ],
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                }
            ],
            listeners: {
                cellclick: 'onGridpanelCellClick'
            }
        }
    ],
    listeners: {
        afterrender: 'onPanelAfterRender'
    }

});

/*
 * File: app/view/openInfoData/ContractResultByItem.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.ContractResultByItem', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.openinfodatacontractresultbyitem',

               
                                                                 
                                                                      
                                                                 
                         
      

    controller: 'openinfodatacontractresultbyitem',
    viewModel: {
        type: 'openinfodatacontractresultbyitem'
    },

    layout: {
        type: 'card',
        deferredRender: true
    },
    items: [
        {
            xtype: 'openinfodatalistcontractresultbyitemlist',
            reference: 'contractResultByItemList',
            listeners: {
                showBidDetail: 'onPanelShowBidDetail'
            }
        }
    ],

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processOpenInfoDataContractResultByItem(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processOpenInfoDataContractResultByItem: function(config) {
        var me = this, items = me.items || config.items;

        items.push({
            xclass:'bid_bp.view.bidAnnouncement.detail.product.BidAnnouncementDetail',
            reference : 'bidAnnouncementProductDetail',
            lazy : true,
            autoShow: false,
            listeners: {
                closeDetail: 'showList'
            }
        },{
            xclass:'bid_bp.view.bidAnnouncement.detail.service.BidAnnouncementDetail',
            reference : 'bidAnnouncementServiceDetail',
            lazy : true,
            autoShow: false,
            listeners: {
                closeDetail: 'showList'
            }
        },{
            xclass:'bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetail',
            reference : 'foreignBidAnnouncementProductDetail',
            lazy : true,
            listeners: {
                closeDetail : 'showList'
            }
        },{
            xclass:'bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetail',
            reference : 'foreignBidAnnouncementServiceDetail',
            lazy : true,
            listeners: {
                closeDetail : 'showList'
            }
        });
    }

});

/*
 * File: app/view/openInfoData/ContractResultByVendorViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.ContractResultByVendorViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.openinfodatacontractresultbyvendor'

});

/*
 * File: app/view/openInfoData/ContractResultByVendorViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.ContractResultByVendorViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.openinfodatacontractresultbyvendor',

    showBidDetail: function(bidRecord) {
        var me = this;
        var detail;

        if(bidRecord.get('purchaseType') == 'Product'){		// 자재
            if(bidRecord.get('foreignBidType') == 'ProductBidForeignItem' || bidRecord.get('foreignBidType') == 'ProductBidSideEquipment'){	//외자
                detail = me.lookupReference('foreignBidAnnouncementProductDetail');
            }else{
                detail = me.lookupReference('bidAnnouncementProductDetail');
            }
        }else{
            if(bidRecord.get('foreignBidType') == 'ServiceBid'){	//외자
                detail = me.lookupReference('foreignBidAnnouncementServiceDetail');
            }else{
                detail = me.lookupReference('bidAnnouncementServiceDetail');
            }
        }

        detail.loadData(bidRecord.get('id'), 'Bid');
        me.getView().getLayout().setActiveItem(detail);
    },

    showList: function() {
        var me = this;
        var list = me.lookupReference('contractResultByVendorList');
        list.search();
        me.getView().getLayout().setActiveItem(list);
    },

    onPanelShowBidDetail: function(record, eventOptions) {
        var me = this;
        me.showBidDetail(record);
    }

});

/*
 * File: app/view/openInfoData/list/ContractResultByVendorListViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.ContractResultByVendorListViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.openinfodatalistcontractresultbyvendorlist',

               
                                
                               
                          
                          
                                
                                                       
                                       
      

    data: {
        searchValues: null
    },

    stores: {
        companyStore: {
            model: 'bid_sp.model.cmmn.CompanyCode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.basis.GroupCodeController.findCompanyCodeDatas',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            filters: {
                filterFn: function(item) {
                    var me = this;
                    var itemId = item.getData().id;
                    if(itemId=='ALL'||itemId=='COM01'||itemId=='COM02'||itemId=='COM03'||itemId=='COM04'||itemId=='COM05'||itemId=='COM06'||itemId=='COM08'||itemId=='COM10'||itemId=='COM16'||itemId=='COM19'){
                        return item;
                    }
                }
            }
        },
        bidTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        noticeTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.NoticeTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        competitionTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CompetitionTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractResultByVendorStore: {
            model: 'bid_sp.model.openInfoData.ContractResultList',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.OpenInfoDataListController.findOpenInfoDataContractResultList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        }
    }

});

/*
 * File: app/view/openInfoData/list/ContractResultByVendorListViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.ContractResultByVendorListViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.openinfodatalistcontractresultbyvendorlist',

    search: function() {
        var me = this, vm = this.getViewModel();
        var store = vm.getStore('contractResultByVendorStore');
        var params = vm.get('searchValues');

        // if(!me.searchValidation()){
        //     return;
        // }

        me.getView().setLoading(true);
        store.loadPage(1, {
            params : params,
            callback : function(records, operation, success){
                me.getView().setLoading(false);
            }
        });
    },

    refresh: function() {
        var me = this, vm = this.getViewModel();

        vm.set('searchValues', {
            companyId : me.getViewModel().get('companyStore').first().get('id'),
            fromContractDate : Ext.Date.add(new Date(), Ext.Date.MONTH, -1),
            toContractDate : Ext.Date.add(new Date())
        });
    },

    onBidGridCellclick: function(record) {
        var me = this;

        me.getView().fireEvent('showBidDetail',record);
    },

    init: function() {
        var me = this,
            vm = this.getViewModel();

        me.getView().search = Ext.Function.bind(me.search, me);
    },

    onSearchButtonClick: function(button, e, eOpts) {
        var me = this;
        me.search();
    },

    onRefreshButtonClick: function(button, e, eOpts) {
        var me = this, vm = this.getViewModel();

        me.refresh();
    },

    onFormSpecialKey: function(form, e) {
        var me = this;

        if(e.ENTER == e.getKey()){
            me.search();
        }
    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this, vm = this.getViewModel();

        me.getView().setLoading(true);
        Etna.onDone(function() {
            var companyCodeStore = vm.getStore('companyStore');
            companyCodeStore.load({
                callback: function(records, operation, success) {
                    me.refresh();
                    me.getView().setLoading(false);
                }
            });
        });
    },

    onGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        var me = this;
        var dataIndex = tableview.getColumnManager().getHeaderAtIndex(cellIndex).dataIndex;

        if(dataIndex =='no'){ // 공고번호 클릭
            me.onBidGridCellclick(record);
        }
    }

});

/*
 * File: app/view/openInfoData/list/ContractResultByVendorList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.ContractResultByVendorList', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.openinfodatalistcontractresultbyvendorlist',

               
                                                                            
                                                                                 
                         
                                 
                           
                            
                                  
                                  
                              
                         
                                           
                         
                                 
                               
                                 
                        
                                    
                                  
                                 
                                   
                                   
      

    controller: 'openinfodatalistcontractresultbyvendorlist',
    viewModel: {
        type: 'openinfodatalistcontractresultbyvendorlist'
    },
    ui: 'main',
    title: '#{업체별 계약현황}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            ui: 'search',
            defaults: {
                bubbleEvents: [
                    'specialkey'
                ],
                defaults: {
                    bubbleEvents: [
                        'specialkey'
                    ],
                    defaults: {
                        bubbleEvents: [
                            'specialkey'
                        ]
                    }
                }
            },
            bodyPadding: 5,
            title: '',
            fieldDefaults: {
                labelWidth: 120
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'displayfield',
                            fieldLabel: '',
                            value: '#{업체별 계약현황을 조회합니다.}'
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-search',
                            text: '#{조회}',
                            listeners: {
                                click: 'onSearchButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-refresh',
                            text: '#{초기화}',
                            listeners: {
                                click: 'onRefreshButtonClick'
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'combobox',
                    width: 340,
                    fieldLabel: '#{회사이름}',
                    allowBlank: false,
                    editable: false,
                    displayField: 'name',
                    queryMode: 'local',
                    valueField: 'id',
                    bind: {
                        value: '{searchValues.companyId}',
                        store: '{companyStore}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    width: 340,
                    layout: 'table',
                    fieldLabel: '#{계약일자}',
                    labelWidth: 120,
                    items: [
                        {
                            xtype: 'datefield',
                            reference: 'fromContractDate',
                            width: 110,
                            fieldLabel: '',
                            name: 'fromContractDate',
                            allowBlank: false,
                            minValue: '01/01/2013',
                            bind: {
                                value: '{searchValues.fromContractDate}',
                                maxValue: '{searchValues.toContractDate}'
                            }
                        },
                        {
                            xtype: 'label',
                            text: '~'
                        },
                        {
                            xtype: 'datefield',
                            reference: 'toContractDate',
                            width: 110,
                            fieldLabel: '',
                            name: 'toContractDate',
                            allowBlank: false,
                            bind: {
                                value: '{searchValues.toContractDate}',
                                minValue: '{searchValues.fromContractDate}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    width: 340,
                    fieldLabel: '#{공고번호}',
                    enforceMaxLength: true,
                    maxLength: 30,
                    bind: {
                        value: '{searchValues.no}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{공고명}',
                    enforceMaxLength: true,
                    maxLength: 500,
                    bind: {
                        value: '{searchValues.name}'
                    }
                }
            ],
            listeners: {
                specialKey: 'onFormSpecialKey'
            },
            plugins: [
                {
                    ptype: 'autoClearButton'
                }
            ]
        },
        {
            xtype: 'displayfield',
            fieldLabel: '',
            value: '#{※ 한국전력기술, 원자력연료, 발전교육원, 전력거래소에서 등록한 공고는 공개하지 않습니다.}',
            fieldStyle: 'color:blue'
        },
        {
            xtype: 'displayfield',
            fieldLabel: '',
            value: '#{※ 2013.01.01 계약건부터 조회가 가능합니다.}'
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            autoScroll: true,
            ui: 'grid',
            title: '',
            bind: {
                store: '{contractResultByVendorStore}'
            },
            columns: [
                {
                    xtype: 'etnastorecolumn',
                    width: 150,
                    align: 'center',
                    dataIndex: 'companyId',
                    text: '#{회사이름}',
                    valueField: 'id',
                    displayField: 'name',
                    bind: {
                        store: '{companyStore}'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    align: 'center',
                    dataIndex: 'no',
                    tdCls: 'link',
                    text: '#{공고번호}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'revision',
                    text: '#{공고차수}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'bidRevision',
                    text: '#{입찰차수}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 250,
                    dataIndex: 'name',
                    text: '#{공고명}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'placeName',
                    text: '#{공고부서}'
                },
                {
                    xtype: 'datecolumn',
                    width: 120,
                    align: 'center',
                    dataIndex: 'noticeDate',
                    text: '#{공고일자}'
                },
                {
                    xtype: 'etnastorecolumn',
                    align: 'center',
                    dataIndex: 'competitionType',
                    text: '#{계약방법}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{competitionTypeKind}'
                    }
                },
                {
                    xtype: 'etnastorecolumn',
                    align: 'center',
                    dataIndex: 'bidType',
                    text: '#{낙찰자선정}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{bidTypeKind}'
                    }
                },
                {
                    xtype: 'etnastorecolumn',
                    align: 'center',
                    dataIndex: 'noticeType',
                    text: '#{공고종류}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{noticeTypeKind}'
                    }
                },
                {
                    xtype: 'datecolumn',
                    width: 150,
                    align: 'center',
                    dataIndex: 'bidAttendRequestCloseDateTime',
                    text: '#{입찰참가 마감일시}'
                },
                {
                    xtype: 'datecolumn',
                    width: 150,
                    align: 'center',
                    dataIndex: 'beginDateTime',
                    text: '#{입찰서 제출 개시일시}'
                },
                {
                    xtype: 'datecolumn',
                    width: 150,
                    align: 'center',
                    dataIndex: 'endDateTime',
                    text: '#{입찰서 제출 마감일시}'
                },
                {
                    xtype: 'numbercolumn',
                    width: 200,
                    align: 'right',
                    dataIndex: 'contractAmount',
                    text: '#{계약금액(VAT제외)}',
                    format: '0,000.####'
                }
            ],
            dockedItems: [
                {
                    xtype: 'etnascrollpagingtoolbar',
                    dock: 'bottom',
                    bind: {
                        store: '{contractResultByVendorStore}'
                    }
                }
            ],
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                }
            ],
            listeners: {
                cellclick: 'onGridpanelCellClick'
            }
        }
    ],
    listeners: {
        afterrender: 'onPanelAfterRender'
    }

});

/*
 * File: app/view/openInfoData/ContractResultByVendor.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.ContractResultByVendor', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.openinfodatacontractresultbyvendor',

               
                                                                   
                                                                        
                                                                   
                         
      

    controller: 'openinfodatacontractresultbyvendor',
    viewModel: {
        type: 'openinfodatacontractresultbyvendor'
    },

    layout: {
        type: 'card',
        deferredRender: true
    },
    items: [
        {
            xtype: 'openinfodatalistcontractresultbyvendorlist',
            reference: 'contractResultByVendorList',
            listeners: {
                showBidDetail: 'onPanelShowBidDetail'
            }
        }
    ],

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processOpenInfoDataContractResultByVendor(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processOpenInfoDataContractResultByVendor: function(config) {
        var me = this, items = me.items || config.items;

        items.push({
            xclass:'bid_bp.view.bidAnnouncement.detail.product.BidAnnouncementDetail',
            reference : 'bidAnnouncementProductDetail',
            lazy : true,
            autoShow: false,
            listeners: {
                closeDetail: 'showList'
            }
        },{
            xclass:'bid_bp.view.bidAnnouncement.detail.service.BidAnnouncementDetail',
            reference : 'bidAnnouncementServiceDetail',
            lazy : true,
            autoShow: false,
            listeners: {
                closeDetail: 'showList'
            }
        },{
            xclass:'bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetail',
            reference : 'foreignBidAnnouncementProductDetail',
            lazy : true,
            listeners: {
                closeDetail : 'showList'
            }
        },{
            xclass:'bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetail',
            reference : 'foreignBidAnnouncementServiceDetail',
            lazy : true,
            listeners: {
                closeDetail : 'showList'
            }
        });
    }

});

/*
 * File: app/view/openInfoData/ContractResultStatsViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.ContractResultStatsViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.openinfodatacontractresultstats'

});

/*
 * File: app/view/openInfoData/list/ContractResultStatsListViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.ContractResultStatsListViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.openinfodatalistcontractresultstatslist',

               
                         
                                
                               
                          
                                                            
                                       
      

    data: {
        searchValues: null
    },

    stores: {
        contractStatsStore: {
            model: 'bid_sp.model.openInfoData.ContractResultStatsList',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.OpenInfoDataListController.findOpenInfoDataContractStatsList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        companyStore: {
            model: 'bid_sp.model.cmmn.CompanyCode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.basis.GroupCodeController.findCompanyCodeDatas',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            filters: {
                filterFn: function(item) {
                    var me = this;
                    var itemId = item.getData().id;
                    if(itemId=='ALL'||itemId=='COM01'||itemId=='COM02'||itemId=='COM03'||itemId=='COM04'||itemId=='COM05'||itemId=='COM06'||itemId=='COM08'||itemId=='COM10'||itemId=='COM16'||itemId=='COM19'){
                        return item;
                    }
                }
            }
        }
    }

});

/*
 * File: app/view/openInfoData/list/ContractResultStatsListViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.ContractResultStatsListViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.openinfodatalistcontractresultstatslist',

    refresh: function() {
        var me = this, vm = this.getViewModel();

        vm.set('searchValues', {
            companyId : me.getViewModel().get('companyStore').first().get('id'),
            fromContractDate : Ext.Date.add(new Date(), Ext.Date.MONTH, -1),
            toContractDate : Ext.Date.add(new Date())
        });
    },

    search: function() {
        var me = this, vm = this.getViewModel();
        var store = vm.getStore('contractStatsStore');
        var params = vm.get('searchValues');

        // if(!me.searchValidation()){
        //     return;
        // }

        me.getView().setLoading(true);
        store.loadPage(1, {
            params : params,
            callback : function(records, operation, success){
                me.getView().setLoading(false);
            }
        });
    },

    init: function() {
        var me = this,
            vm = this.getViewModel();

        me.getView().search = Ext.Function.bind(me.search, me);
    },

    onSearchButtonClick: function(button, e, eOpts) {
        var me = this;
        me.search();
    },

    onRefreshButtonClick: function(button, e, eOpts) {
        var me = this, vm = this.getViewModel();

        me.refresh();
    },

    onFormSpecialKey: function(form, e) {
        var me = this;

        if(e.ENTER == e.getKey()){
            me.search();
        }
    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this, vm = this.getViewModel();

        me.getView().setLoading(true);
        Etna.onDone(function() {
            var companyCodeStore = vm.getStore('companyStore');
            companyCodeStore.load({
                callback: function(records, operation, success) {
                    me.refresh();
                    me.getView().setLoading(false);
                }
            });
        });
    }

});

/*
 * File: app/view/openInfoData/list/ContractResultStatsList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.ContractResultStatsList', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.openinfodatalistcontractresultstatslist',

               
                                                                         
                                                                              
                         
                                 
                           
                            
                                  
                                  
                              
                         
                                           
                         
                                 
                        
                                    
                                  
                                 
                                   
                                    
                                    
      

    controller: 'openinfodatalistcontractresultstatslist',
    viewModel: {
        type: 'openinfodatalistcontractresultstatslist'
    },
    ui: 'main',
    title: '#{계약방법별 통계}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            ui: 'search',
            defaults: {
                bubbleEvents: [
                    'specialkey'
                ],
                defaults: {
                    bubbleEvents: [
                        'specialkey'
                    ],
                    defaults: {
                        bubbleEvents: [
                            'specialkey'
                        ]
                    }
                }
            },
            bodyPadding: 5,
            title: '',
            fieldDefaults: {
                labelWidth: 120
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'displayfield',
                            fieldLabel: '',
                            value: '#{업체별 계약현황을 조회합니다.}'
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-search',
                            text: '#{조회}',
                            listeners: {
                                click: 'onSearchButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-refresh',
                            text: '#{초기화}',
                            listeners: {
                                click: 'onRefreshButtonClick'
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'combobox',
                    width: 340,
                    fieldLabel: '#{회사이름}',
                    allowBlank: false,
                    editable: false,
                    displayField: 'name',
                    queryMode: 'local',
                    valueField: 'id',
                    bind: {
                        value: '{searchValues.companyId}',
                        store: '{companyStore}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    width: 340,
                    layout: 'table',
                    fieldLabel: '#{계약일자}',
                    labelWidth: 120,
                    items: [
                        {
                            xtype: 'datefield',
                            reference: 'fromContractDate',
                            width: 110,
                            fieldLabel: '',
                            name: 'fromContractDate',
                            allowBlank: false,
                            editable: false,
                            minValue: '01/01/2013',
                            bind: {
                                value: '{searchValues.fromContractDate}',
                                maxValue: '{searchValues.toContractDate}'
                            }
                        },
                        {
                            xtype: 'label',
                            text: '~'
                        },
                        {
                            xtype: 'datefield',
                            reference: 'toContractDate',
                            width: 110,
                            fieldLabel: '',
                            name: 'toContractDate',
                            allowBlank: false,
                            editable: false,
                            bind: {
                                value: '{searchValues.toContractDate}',
                                minValue: '{searchValues.fromContractDate}'
                            }
                        }
                    ]
                }
            ],
            listeners: {
                specialKey: 'onFormSpecialKey'
            },
            plugins: [
                {
                    ptype: 'autoClearButton'
                }
            ]
        },
        {
            xtype: 'displayfield',
            fieldLabel: '',
            value: '#{※ 한국전력기술, 원자력연료, 발전교육원, 전력거래소에서 등록한 공고는 공개하지 않습니다.}',
            fieldStyle: 'color:blue'
        },
        {
            xtype: 'displayfield',
            fieldLabel: '',
            value: '#{※ 2013.01.01 계약건부터 조회가 가능합니다.}'
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            ui: 'grid',
            title: '',
            bind: {
                store: '{contractStatsStore}'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    sortable: false,
                    menuDisabled: true,
                    text: '#{구분}',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var me = this;
                                if(value=='1'){
                                    return '경쟁입찰';
                                }else{
                                    if(record.get('nm')=='수의'){
                                        return '수의';
                                    }else if(record.get('nm')=='합계'){
                                        return '합계';
                                    }
                                }
                            },
                            merge: {
                                direction: 'vertical',
                                group: 'V',
                                order: 1
                            },
                            sortable: false,
                            align: 'center',
                            dataIndex: 'competitionGubun',
                            menuDisabled: true,
                            text: ''
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 120,
                            sortable: false,
                            align: 'center',
                            dataIndex: 'nm',
                            menuDisabled: true,
                            text: ''
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    sortable: false,
                    menuDisabled: true,
                    text: '#{총가금액}',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            sortable: false,
                            align: 'right',
                            dataIndex: 'generalCnt',
                            menuDisabled: true,
                            text: '#{건수}',
                            format: '0,000.####'
                        },
                        {
                            xtype: 'numbercolumn',
                            width: 150,
                            sortable: false,
                            align: 'right',
                            dataIndex: 'generalAmount',
                            menuDisabled: true,
                            text: '#{금액}',
                            format: '0,000.####'
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    sortable: false,
                    menuDisabled: true,
                    text: '#{단가금액}',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            sortable: false,
                            align: 'right',
                            dataIndex: 'priceCnt',
                            menuDisabled: true,
                            text: '#{건수}',
                            format: '0,000.####'
                        },
                        {
                            xtype: 'numbercolumn',
                            width: 150,
                            sortable: false,
                            align: 'right',
                            dataIndex: 'priceAmount',
                            menuDisabled: true,
                            text: '#{금액}',
                            format: '0,000.####'
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    sortable: false,
                    menuDisabled: true,
                    text: '#{합계}',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            sortable: false,
                            align: 'right',
                            dataIndex: 'totalCnt',
                            menuDisabled: true,
                            text: '#{건수}',
                            format: '0,000.####'
                        },
                        {
                            xtype: 'numbercolumn',
                            width: 150,
                            sortable: false,
                            align: 'right',
                            dataIndex: 'totalAmount',
                            menuDisabled: true,
                            text: '#{금액}',
                            format: '0,000.####'
                        }
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'etnascrollpagingtoolbar',
                    dock: 'bottom',
                    bind: {
                        store: '{contractStatsStore}'
                    }
                }
            ],
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                },
                {
                    ptype: 'etnacellmerge'
                }
            ]
        },
        {
            xtype: 'displayfield',
            fieldLabel: '',
            value: '#{※ 계약구분별 합계 금액과 합계(소계)금액의 차이가 발생할수 있습니다.}',
            fieldStyle: 'color:blue'
        }
    ],
    listeners: {
        afterrender: 'onPanelAfterRender'
    }

});

/*
 * File: app/view/openInfoData/ContractResultStats.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.ContractResultStats', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.openinfodatacontractresultstats',

               
                                                                
                                                                
                         
      

    viewModel: {
        type: 'openinfodatacontractresultstats'
    },

    layout: {
        type: 'card',
        deferredRender: true
    },
    items: [
        {
            xtype: 'openinfodatalistcontractresultstatslist'
        }
    ]

});

/*
 * File: app/view/openInfoData/ContractResultStatsViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.ContractResultStatsViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.openinfodatacontractresultstats'
});

/*
 * File: app/view/openInfoData/SuccessVendorInfoViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.SuccessVendorInfoViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.openinfodatasuccessvendorinfo'

});

/*
 * File: app/view/openInfoData/list/SuccessVendorInfoListViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.SuccessVendorInfoListViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.openinfodatalistsuccessvendorinfolist',

               
                                
                               
                          
                          
                                
                                                          
                                       
      

    data: {
        searchValues: null
    },

    stores: {
        companyStore: {
            model: 'bid_sp.model.cmmn.CompanyCode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.basis.GroupCodeController.findCompanyCodeDatas',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            filters: {
                filterFn: function(item) {
                    var itemId = item.getData().id;
                    if(itemId=='ALL'|| itemId=='COM01'||itemId=='COM03'||itemId=='COM16'||itemId=='COM19'){
                        return item;
                    }
                }
            }
        },
        bidTypeKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        successVendorInfoStore: {
            model: 'bid_sp.model.openInfoData.SuccessVendorInfoList',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.OpenInfoDataListController.findOpenInfoDataSuccessVendorList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        }
    }

});

/*
 * File: app/view/openInfoData/list/SuccessVendorInfoListViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.SuccessVendorInfoListViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.openinfodatalistsuccessvendorinfolist',

    search: function() {
        var me = this, vm = this.getViewModel();
        var store = vm.getStore('successVendorInfoStore');
        var params = vm.get('searchValues');

        if(!me.searchValidation()){
            return;
        }

        me.getView().setLoading(true);
        store.loadPage(1, {
            params : params,
            callback : function(records, operation, success){
                me.getView().setLoading(false);
            }
        });
    },

    refresh: function() {
        var me = this, vm = this.getViewModel();

        vm.set('searchValues', {
            companyId : me.getViewModel().get('companyStore').first().get('id'),
            fromNoticeDate : Ext.Date.add(new Date(), Ext.Date.MONTH, -1),
            toNoticeDate : Ext.Date.add(new Date())
        });
    },

    searchValidation: function() {
        var me = this , vm = this.getViewModel();
        var returnValue = true;
        var fromNoticeDate = me.lookupReference('fromNoticeDate').getValue();
        var toNoticeDate = me.lookupReference('toNoticeDate').getValue();

        if(!fromNoticeDate || !toNoticeDate){
            Etna.Message.alert('#{공고일자는 필수입력입니다.}');
            returnValue = false;
        }

        return returnValue;
    },

    init: function() {
        var me = this,
            vm = this.getViewModel();

        me.getView().search = Ext.Function.bind(me.search, me);
    },

    onSearchButtonClick: function(button, e, eOpts) {
        var me = this;
        me.search();
    },

    onRefreshButtonClick: function(button, e, eOpts) {
        var me = this, vm = this.getViewModel();

        me.refresh();
    },

    onFormSpecialKey: function(form, e) {
        var me = this;

        if(e.ENTER == e.getKey()){
            me.search();
        }
    },

    onGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        // var me = this;
        // var dataIndex = tableview.getColumnManager().getHeaderAtIndex(cellIndex).dataIndex;

        // if(dataIndex == 'bidResultStateInOpenInfoData'){	// 결과클릭
        //     me.onOpenDataGridCellclick(record);
        // }else if(dataIndex =='no'){ // 공고번호 클릭
        //     me.onBidGridCellclick(record);
        // }
    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this, vm = this.getViewModel();

        me.getView().setLoading(true);
        Etna.onDone(function() {
            var companyCodeStore = vm.getStore('companyStore');
            companyCodeStore.load({
                callback: function(records, operation, success) {
                    me.refresh();
                    me.getView().setLoading(false);
                }
            });
        });
    }

});

/*
 * File: app/view/openInfoData/list/SuccessVendorInfoList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.list.SuccessVendorInfoList', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.openinfodatalistsuccessvendorinfolist',

               
                                                                       
                                                                            
                         
                                 
                           
                            
                                  
                                  
                              
                         
                                           
                         
                                 
                               
                                 
                        
                                    
                                  
                                 
                                   
                                   
      

    controller: 'openinfodatalistsuccessvendorinfolist',
    viewModel: {
        type: 'openinfodatalistsuccessvendorinfolist'
    },
    ui: 'main',
    title: '#{낙찰자정보공개}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            ui: 'search',
            defaults: {
                bubbleEvents: [
                    'specialkey'
                ],
                defaults: {
                    bubbleEvents: [
                        'specialkey'
                    ],
                    defaults: {
                        bubbleEvents: [
                            'specialkey'
                        ]
                    }
                }
            },
            bodyPadding: 5,
            title: '',
            fieldDefaults: {
                labelWidth: 120
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'displayfield',
                            fieldLabel: '',
                            value: '#{입찰에 대한 개찰결과를 조회합니다.}'
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-search',
                            text: '#{조회}',
                            listeners: {
                                click: 'onSearchButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-refresh',
                            text: '#{초기화}',
                            listeners: {
                                click: 'onRefreshButtonClick'
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'combobox',
                    width: 340,
                    fieldLabel: '#{회사이름}',
                    allowBlank: false,
                    editable: false,
                    displayField: 'name',
                    queryMode: 'local',
                    valueField: 'id',
                    bind: {
                        value: '{searchValues.companyId}',
                        store: '{companyStore}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    width: 340,
                    layout: 'table',
                    fieldLabel: '#{공고일자}',
                    labelWidth: 120,
                    items: [
                        {
                            xtype: 'datefield',
                            reference: 'fromNoticeDate',
                            width: 110,
                            fieldLabel: '',
                            name: 'fromNoticeDate',
                            allowBlank: false,
                            bind: {
                                value: '{searchValues.fromNoticeDate}',
                                maxValue: '{searchValues.toNoticeDate}'
                            }
                        },
                        {
                            xtype: 'label',
                            text: '~'
                        },
                        {
                            xtype: 'datefield',
                            reference: 'toNoticeDate',
                            width: 110,
                            fieldLabel: '',
                            name: 'toNoticeDate',
                            allowBlank: false,
                            bind: {
                                value: '{searchValues.toNoticeDate}',
                                minValue: '{searchValues.fromNoticeDate}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    width: 340,
                    fieldLabel: '#{공고번호}',
                    enforceMaxLength: true,
                    maxLength: 30,
                    bind: {
                        value: '{searchValues.no}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{공고명}',
                    enforceMaxLength: true,
                    maxLength: 500,
                    bind: {
                        value: '{searchValues.name}'
                    }
                }
            ],
            listeners: {
                specialKey: 'onFormSpecialKey'
            },
            plugins: [
                {
                    ptype: 'autoClearButton'
                }
            ]
        },
        {
            xtype: 'displayfield',
            fieldLabel: '',
            value: '#{(한국전력공사, 한국전력국제원자력대학원대학교, 한국해상풍력(주), 켑코알스톰피이에스 주식회사 입찰건에 대한 낙찰정보입니다.)}',
            fieldStyle: 'color:red'
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            autoScroll: true,
            ui: 'grid',
            title: '',
            bind: {
                store: '{successVendorInfoStore}'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    align: 'center',
                    dataIndex: 'no',
                    text: '#{공고번호}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 250,
                    align: 'center',
                    dataIndex: 'name',
                    text: '#{공고명}'
                },
                {
                    xtype: 'gridcolumn',
                    menuDisabled: true,
                    text: '#{낙찰자}',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            align: 'center',
                            dataIndex: 'vendorName',
                            text: '#{업체명}'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 120,
                            align: 'center',
                            dataIndex: 'vendorPresidentName',
                            text: '#{대표자성명}'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 300,
                            align: 'center',
                            dataIndex: 'vendorAddress',
                            text: '#{주소}'
                        }
                    ]
                },
                {
                    xtype: 'numbercolumn',
                    width: 150,
                    align: 'right',
                    dataIndex: 'amount',
                    text: '#{낙찰금액(부가세포함)}',
                    format: '0,000.####'
                },
                {
                    xtype: 'datecolumn',
                    align: 'center',
                    dataIndex: 'selectedDateTime',
                    text: '#{낙찰일시}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 250,
                    dataIndex: 'name',
                    text: '#{입찰참가업체(구현예정)}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'deliveryDueDate',
                    text: '#{예정납기일}'
                },
                {
                    xtype: 'etnastorecolumn',
                    align: 'center',
                    dataIndex: 'bidType',
                    text: '#{낙찰자선정}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{bidTypeKind}'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    menuDisabled: true,
                    text: '#{담당자}',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            align: 'center',
                            dataIndex: 'representativeName',
                            text: '#{성명}'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var number = Site.util.Format.gridPhone(value, '({0}){1}-{2}');
                                return number;
                            },
                            width: 120,
                            align: 'center',
                            dataIndex: 'representativePhoneNo',
                            text: '#{전화번호}'
                        }
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'etnascrollpagingtoolbar',
                    dock: 'bottom',
                    bind: {
                        store: '{successVendorInfoStore}'
                    }
                }
            ],
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                }
            ],
            listeners: {
                cellclick: 'onGridpanelCellClick'
            }
        }
    ],
    listeners: {
        afterrender: 'onPanelAfterRender'
    }

});

/*
 * File: app/view/openInfoData/SuccessVendorInfo.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.SuccessVendorInfo', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.openinfodatasuccessvendorinfo',

               
                                                              
                                                              
                         
      

    viewModel: {
        type: 'openinfodatasuccessvendorinfo'
    },

    layout: {
        type: 'card',
        deferredRender: true
    },
    items: [
        {
            xtype: 'openinfodatalistsuccessvendorinfolist',
            reference: 'successVendorInfoList'
        }
    ]

});

/*
 * File: app/view/openInfoData/SuccessVendorInfoViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.openInfoData.SuccessVendorInfoViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.openinfodatasuccessvendorinfo'
});

/*
 * File: app/view/privateContract/detail/product/PrivateContractDetailSPViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.privatecontractdetailproductprivatecontractdetailsp',

               
                                   
                                
                               
                                
                          
                          
                          
                               
                                   
                                         
                                         
                                   
      

    data: // miscarriagePrivateYn 유찰수의인지 아닌지
    {
        newDate: new Date(),
        bidData: null,
        isVisibleTotEval: true,
        isVisibleProposal: true,
        isVisibleSaveBtn: true,
        isVisibleDelBtn: true,
        isVisibleNoticeBtn: true,
        isVisibleSettlementBtn: true,
        isDisableSpec: true,
        isDisableTwoPhase: true,
        isReadOnly: false
    },

    stores: {
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        purchaseTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.PurchaseTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        inOutTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.InOutTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        bidMethodStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        competitionTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CompetitionTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        bidTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        twoPhaseTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.TwoPhaseTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        currencyCodeStore: {
            groupCode: 'Currency',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        proposalTechnicalRateCodeStore: {
            groupCode: 'ProposalTechnicalRateCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        totalEvalMethodKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.TotalEvalMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            listeners: {
                load: 'onContractTypeKindStoreLoad'
            }
        },
        reasonCodeStore: {
            groupCode: 'PrivatereasonCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodesWithAdditional',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        jointSupplyDemandMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.JointSupplyDemandMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            filters: {
                filterFn: function(item) {
                    // 분담이행(Allotted), 공동이행(Joint)만 보인다.

                    if(item && item.get('value')){
                        return item.get('value') == 'Joint' || item.get('value') == 'Allotted';
                    }
                }
            }
        },
        unitStore: {
            groupCode: 'Unit',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        bidItemStore: {
            model: 'bid_sp.model.bid.BidItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidItems',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        fileItemStore: {
            model: 'bid_sp.model.bid.FileItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.getFileItemList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        privatereasonCodeStore: {
            model: 'bid_sp.model.bid.comboProperty',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.findCodesAndAdditionalProperty',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'additionalProperty1'
                }
            ]
        },
        submitYnStore: {
            data: [
                {
                    value: true,
                    text: '제출'
                },
                {
                    value: false,
                    text: '미제출'
                }
            ],
            fields: [
                {
                    name: 'value'
                },
                {
                    name: 'text'
                }
            ]
        },
        vendorYnStore: {
            data: [
                {
                    value: true,
                    text: 'Y'
                },
                {
                    value: false,
                    text: 'N'
                }
            ],
            fields: [
                {
                    name: 'value'
                },
                {
                    name: 'text'
                }
            ]
        },
        progressStore: {
            model: 'bid_sp.model.bid.ProgressState',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findProgressStateSPList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        }
    },
    formulas: {
        simulation: {
            get: function(data) {
                return data.simulationBidYn;
            },
            bind: {
                simulationBidYn: '{bidData.simulationBidYn}'
            }
        },
        isDisableTwoPhase: {
            get: function(data) {
                /*
                2단계 콤보, 희망수량 체크박스 변경
                */

                if(data == 'LowestPrice' || data == 'TotalEval'){
                    return false;
                }else{
                    return true;
                }
            },
            bind: '{bidData.bidType}'
        },
        privateSettlementDateText: {
            get: function(data) {
                var twoPhaseType = data.twoPhaseType;
                var bidType = data.bidType;

                if(bidType == 'Nego'){
                    return Ext.String.format('#{{0}}', '수의(제안)시담마감일시');
                }else if(twoPhaseType != 'Nothing' || !twoPhaseType){
                    return Ext.String.format('#{{0}}', '수의(규격)시담마감일시');
                }else{
                    return Ext.String.format('#{{0}}', '수의시담마감일시');
                }
            },
            bind: {
                twoPhaseType: '{bidData.twoPhaseType}',
                bidType: '{bidData.bidType}'
            }
        },
        hideSettlementBtnYn: {
            get: function(data) {
                // 수의시담 버튼 제어
                // 공고진행(PreAttendProgress) 일때만 가능
                if(data == 'PreAttendProgress'){
                    return false;
                }else{
                    return true;
                }
            },
            bind: '{bidData.progressState}'
        }
    },

    findBid: function(bidId, type) {
        var deferred = Ext.create('Deft.Deferred');

        smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidBasicInfo(bidId, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    }

});

/*
 * File: app/view/privateContract/detail/product/PrivateContractDetailSPViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.privatecontractdetailproductprivatecontractdetailsp',

    /* Init Function */
    init: function() {
        var me = this, view = me.getView();

        view.setDefaultFormData = Ext.Function.bind(me.setDefaultFormData, me);
        view.loadBidData        = Ext.Function.bind(me.loadBidData, me);
    },

    /* 데이터 초기화 */
    clearData: function() {
        var me = this, vm = this.getViewModel();

        me.lookupReference('bidTabPanel').setActiveTab(0);

        vm.set('bidData', Ext.create('bid_sp.model.bid.Bid',{}));
        vm.getStore('bidItemStore').removeAll();

        vm.set('newDate'               , new Date());
        vm.set('isVisibleTotEval'      , true);
        vm.set('isVisibleProposal'     , true);
        vm.set('isVisibleSaveBtn'      , true);
        vm.set('isVisibleDelBtn'       , true);
        vm.set('isVisibleNoticeBtn'    , true);
        vm.set('isDisableSpec'         , true);
        vm.set('isDisableTwoPhase'     , true);
        vm.set('isReadOnly'            , false);
    },

    /* 입찰공고 신규 작성 시 데이터 세팅 */
    setDefaultFormData: function() {
        var me = this, view = this.getView();

        me.getView().setLoading(true);

        me.getViewModel().set('pureYn', true); // 순수수의 여부

        Etna.onDone(function(){
            var loginUser = Cmmn.User.getData();
            var operatingUnitStore = me.getViewModel().getStore('operatingUnitStore');
            var operatingUnitId = operatingUnitStore&&operatingUnitStore.getRange().length>0?operatingUnitStore.first().get('id'):null;

            var model = me.getDateTime({
                operatingUnitId				 : operatingUnitId,
                purchaseType                 : 'Product',
                competitionType              : 'Private',
                progressState                : 'CreateProgress',
                inOutType                    : 'In',
                currencyCode                 : 'KRW',
                representativeDepartmentName : loginUser.departmentName,
                representativeName           : loginUser.name,
                representativeId             : loginUser.id,
                purchaseGroupId              : loginUser.purchaseGroupId,
                noticeDate                   : new Date(),
                purchasePlanDate             : new Date(),
                prDate                       : new Date(),
                beginDateTime				 : new Date(),
                endDateTime					 : new Date(),
                quotationSubmitCloseDateTime : new Date(),
                twoPhaseType				 : 'Nothing'					//2단계 해당없음
            });

            me.getViewModel().set('bidData', model);
            me.setBtnAction();
            me.getView().setLoading(false);
        });
    },

    /*
        작성된 입찰공고 조회
        type: 'Bid'
    */
    loadBidData: function(bidId, type) {
        var me = this, vm = this.getViewModel(), view = this.getView();

        Ext.suspendLayouts();

        me.getViewModel().set('pureYn', true); // 순수수의 여부

        view.setLoading(true);

        me.searchBid(bidId, type);



        var searchParam = {
            bidId 		: bidId,
            type  		: type
        };

        me.searchBidItems(searchParam);

        Etna.onDone(function() {
            Ext.resumeLayouts(true);
            view.setLoading(false);
        });
    },

    setDateTime: function() {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        // 수의시담 시작 일시
        if(bidData.get('beginDateTime')) {
            bidData.get('beginDateTime').setHours(bidData.get('beginDateHours'));
            bidData.get('beginDateTime').setMinutes(bidData.get('beginDateMinutes'));
        }

        // 수의시담 마감 일시
        if(bidData.get('endDateTime')) {
            bidData.get('endDateTime').setHours(bidData.get('endDateHours'));
            bidData.get('endDateTime').setMinutes(bidData.get('endDateMinutes'));
        }

        if(bidData.get('specProposalCloseDateTime')) {
            bidData.get('specProposalCloseDateTime').setHours(bidData.get('specProposalCloseDateHour'));
            bidData.get('specProposalCloseDateTime').setMinutes(bidData.get('specProposalCloseDateMinute'));
        }

        // 견적서 제출 마감일시
        if(bidData.get('quotationSubmitCloseDateTime')) {
            bidData.get('quotationSubmitCloseDateTime').setHours(bidData.get('quotationSubmitCloseDateHours'));
            bidData.get('quotationSubmitCloseDateTime').setMinutes(bidData.get('quotationSubmitCloseDateMinutes'));
        }
    },

    /* 날짜 및 시간 가공 */
    getDateTime: function(param) {
        var me = this;

        var bidData = Ext.create('bid_sp.model.bid.Bid', param);

        // 수의시담시작일시
        if(bidData.get('beginDateTime')) {
            bidData.set('beginDateHours', bidData.get('beginDateTime').getHours());
            bidData.set('beginDateMinutes', bidData.get('beginDateTime').getMinutes());
        }

        // 수의시담마감일시
        if(bidData.get('endDateTime')) {
            bidData.set('endDateHours', bidData.get('endDateTime').getHours());
            bidData.set('endDateMinutes', bidData.get('endDateTime').getMinutes());
        }


        if(bidData.get('specProposalCloseDateTime')) {
            bidData.set('specProposalCloseDateHour', bidData.get('specProposalCloseDateTime').getHours());
            bidData.set('specProposalCloseDateMinute', bidData.get('specProposalCloseDateTime').getMinutes());
        }

        //견적서제출마감일시
        if(bidData.get('quotationSubmitCloseDateTime')) {
            bidData.set('quotationSubmitCloseDateHours', bidData.get('quotationSubmitCloseDateTime').getHours());
            bidData.set('quotationSubmitCloseDateMinutes', bidData.get('quotationSubmitCloseDateTime').getMinutes());
        }

        return bidData;
    },

    /* 입찰 정보 조회 */
    searchBid: function(bidId, type) {
        var me = this, vm = this.getViewModel();
        var progressStore = vm.getStore('progressStore');

        progressStore.load({
            params:{
                bidId : bidId
            }
        });

        vm.findBid(bidId, type).then({
            success: function(result) {
                vm.set('bidData', me.getDateTime(result));
                me.lookupReference('defaultForm').getForm().clearInvalid();
                me.setBtnAction();
            }
        }).done();
    },

    /* 품목 정보 조회 */
    searchBidItems: function(searchParam) {
        var me = this, vm = this.getViewModel();

        var itemStore = vm.getStore('bidItemStore');

        itemStore.load({
            params: searchParam,
            callback: function(records, operation, success) {

            }
        });
    },

    close: function() {
        var me = this, view = this.getView();

        me.clearData();

        view.fireEvent('closeDetail');
    },

    /* 버튼 및 속성 제어 */
    setBtnAction: function() {
        var me = this, vm = this.getViewModel();
        var pureYn = vm.get('pureYn'); // 순수수의 여부
        var bidData = vm.get('bidData');

        if(bidData.get('progressState') === 'CreateProgress') {
            vm.set('isVisibleSaveBtn'  , false);
            vm.set('isVisibleDelBtn'   , false);
            vm.set('isVisibleNoticeBtn', false);
        } else if(bidData.get('progressState') === 'PreAttendProgress') {		// 공고진행
            vm.set('isVisibleSaveBtn'  , true);
            vm.set('isVisibleDelBtn'   , true);
            vm.set('isVisibleNoticeBtn', true);
            vm.set('isReadOnly'        , true);
        } else {
            vm.set('isVisibleSaveBtn'  , true);
            vm.set('isVisibleDelBtn'   , true);
            vm.set('isVisibleNoticeBtn', true);
            vm.set('isReadOnly'        , true);
        }

        var bidTypeKindStore = vm.getStore('bidTypeKindStore');

        bidTypeKindStore.clearFilter();

        if(pureYn){ 	// bidType 이 LowestPrice(최저가), TotalEval(종합낙찰제) 만 선택가능
            bidTypeKindStore.addFilter([
                function(item) {
                    if(item.get('value') == 'LowestPrice' || item.get('value') == 'TotalEval'){
                        return item;
                    }
                }
            ]);
        }else{		// bidType 이 LowestPrice(최저가), TotalEval(종합낙찰제), QualifiedEval(적격),  Nego(협상)만 선택가능
            bidTypeKindStore.addFilter([
                function(item) {
                    if(item.get('value') == 'LowestPrice' || item.get('value') == 'TotalEval' || item.get('value') == 'QualifiedEval' || item.get('value') == 'Nego'){
                        return item;
                    }
                }
            ]);
        }
    },

    /* 2단계 콤보박스 Change Event */
    setSpecComboChange: function() {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        var bidType      = bidData.get('bidType');
        var twoPhaseType = bidData.get('twoPhaseType');

        if(bidType === 'TwoPhase' && twoPhaseType === 'Separate') {
            vm.set('isDisableSpec', false);
        } else {
            vm.set('isDisableSpec', true);

            bidData.set('specProposalCloseDateTime'  , null);
            bidData.set('specProposalCloseDateHour'  , 0);
            bidData.set('specProposalCloseDateMinute', 0);
        }
    },

    showPrintPopup: function() {
        var me = this, vm = this.getViewModel();

        var type = 'PrivateContractDetailSPForm';

        window.open('about:blank', 'print', 'location=no,width=800,height=500,scrollbars=yes');

        var frm = Site.util.Format.makeForm('print.do', 'POST',  'print');

        frm.appendChild(Site.util.Format.makeInput('hidden', 'documentType', type));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'groupCode'   , 'PrintDocumentType'));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'id'          , vm.get('bidData.id')));
        frm.appendChild(Site.util.Format.makeInput('hidden', 'standardDate' , Ext.util.Format.date(vm.get('bidData.noticeDate'),'Y-m-d')));
        frm.appendChild(Site.util.Format.makeInput('hidden', Ext.query("meta[name='_csrf_parameter']")[0].content,Ext.query("meta[name='_csrf']")[0].content));

        document.body.appendChild(frm);
        frm.submit();
    },

    onPrintButtonClick: function(button, e, eOpts) {
        var me = this;

        me.showPrintPopup();
    },

    /* 닫기 버튼 클릭 시 */
    onCloseButtonClick: function(button, e, eOpts) {
        var me = this;

        me.close();
    },

    onContainerItemClick: function(item) {
        var me = this;
        if(item.urlLink !== 'none'){ //tabUrl이 있는 경우
            var classPath = item.urlLink;

            //modal로 뜨도록 수정 (통테이후 반영예정)
            var popup = Ext.create(classPath, {
                floating : true,
                modal:true,
                title : item.tabTitle,
                bidNo : item.paramNo,
                noticeDate : item.paramNoticeDate,
                companyId : item.companyId,
                width:1024,
                height:768,
                resizable:true,
                draggable:true
            });

            popup.show();
            popup.center();

            //------------------------------------------------------------------tab으로 뜨도록
            //     if (MdiManager.hasView(classPath)) { //기존에 tab이 띄워져있으면 닫음
            //         var view = MdiManager.mdiTab.down(Ext.String.format('>[classpath='+classPath+']'));
            //         MdiManager.mdiTab.remove(view,true);
            //     }
            //     MdiManager.addViewToTab(classPath, { //tab 띄움
            //         title: item.tabTitle,
            //         authKey:  item.menuCode,
            //         bidNo : item.paramNo,
            //         noticeDate : item.paramNoticeDate,
            //         companyId : item.companyId
            //     }, classPath);
        }else if(item.notiMsg !== 'none'){ //화면을 보여주는 것 보다 alert창을 띄워야 하는 경우
            Etna.Message.alert(item.notiMsg);
        }
    },

    onPrivateReasonComboboxChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        var reasonCode    = bidData.get('privateReasonCode');
        var privateReason = bidData.get('privateReason');

        var privateReasonCode = me.lookupReference('privateReasonCode');

        if(!Ext.isEmpty(newValue) || !Ext.isEmpty(reasonCode)) {
            if(!!privateReasonCode.findRecordByValue(newValue).data.additionalProperty1){

                var privateReason = privateReasonCode.findRecordByValue(newValue).data.additionalProperty1;

                if(!!privateReason){
                    privateReason = Ext.String.format('#{{0}}',privateReason.replace(/<br>+/g, ' '+String.fromCharCode(10)));
                    bidData.set('privateReason', Ext.String.format('#{{0}}',privateReason.replace(/\\n+/g, ' '+String.fromCharCode(10))));
                }
            }
        }
    },

    /* 낙찰자 결정 방법 Combo Box Change  */
    onBidTypeChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        if(newValue === 'TotalEval') {			// 종합낙찰제
            vm.set('isVisibleTotEval' , false);
            vm.set('isVisibleProposal', true);

        } else if(newValue === 'Nego') {			// 협상
            vm.set('isVisibleProposal', false);
            vm.set('isVisibleTotEval' , true);

            me.getViewModel().get('bidData').set('twoPhaseType', 'Nothing');
            me.lookupReference('twoPhaseTypeCombo').setValue('Nothing');
        } else if(newValue === 'TwoPhase') {			//2단계
            vm.set('isVisibleTotEval' , true);
            vm.set('isVisibleProposal', true);
            vm.set('isDisableSpec'    , true);
        }else if(newValue === 'LowestPrice'){		// 최저가
            bidData.set('proposalTechnicalRate', null);
            bidData.set('proposalPriceRate'    , null);
            bidData.set('totalEvalMethod'      , null);

            vm.set('isVisibleTotEval' , true);
            vm.set('isVisibleProposal', true);
            vm.set('isDisableSpec'    , true);

        }else {
            bidData.set('proposalTechnicalRate', null);
            bidData.set('proposalPriceRate'    , null);
            bidData.set('totalEvalMethod'      , null);

            vm.set('isVisibleTotEval' , true);
            vm.set('isVisibleProposal', true);
            vm.set('isDisableSpec'    , true);

            me.getViewModel().get('bidData').set('twoPhaseType', 'Nothing');
            me.lookupReference('twoPhaseTypeCombo').setValue('Nothing');
        }

        me.setSpecComboChange();
    },

    ontwoPhaseTypeChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        var bidType = me.getViewModel().get('bidData').get('bidType');

        // 낙찰자결정방법이 종합평가(TotalEval)인데 2단계를 동시(Concurrent)선택했을 경우
        if(bidType == 'TotalEval' && newValue == 'Concurrent'){
            Etna.Message.alert('#{"종합평가"낙찰방식일 경우 "동시"선택이 불가능합니다.}');
            me.getViewModel().get('bidData').set('twoPhaseType', 'Nothing');
            me.lookupReference('twoPhaseTypeCombo').setValue('Nothing');
        }else{
            me.setSpecComboChange();
        }
    },

    onProposalRateChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        bidData.set('proposalPriceRate' , newValue === 0 ? 0 : 100 - newValue);
    },

    /*
        공동수급여부 toggle 변경시
        true
        공동수급접수마감일시 오늘로 세팅

        false
        공동수급접수마감일시 값 지우기
    */
    onEtnatogglefieldChange11: function(field, newValue, oldValue, eOpts) {
        var me = this,
            vm = me.getViewModel();

        if(!newValue){
            vm.get('bidData').set('jointSupplyDemandVendorCount', 0);
            vm.get('bidData').set('jointSupplyDemandMethod', null);
        }else{
            vm.get('bidData').set('jointSupplyDemandVendorCount', !vm.get('bidData').get('jointSupplyDemandVendorCount')?2:vm.get('bidData').get('jointSupplyDemandVendorCount'));
        }
    },

    onItemCellEditingBeforeEdit: function(editor, context, eOpts) {
        var me = this, vm = this.getViewModel();

        return !vm.get('isReadOnly');
    },

    onItemCellEditingEdit: function(editor, context, eOpts) {
        var me = this, vm = this.getViewModel();
        var field  = context.field;
        var record = context.record;

        var itemStore = vm.getStore('bidItemStore');

        if(field === 'basisItemYn') {
            itemStore.each(function(item){
                if(item.get('id') !== record.get('id')) {
                    item.set('basisItemYn', null);
                }
            });
        }
    },

    onAfterRender: function(component, eOpts) {
        var me = this;

        me.getView().setLoading(true);
    },

    onContractTypeKindStoreLoad: function(store, records, successful, eOpts) {
        if(successful) {
            store.filter([
            {
                filterFn: function(record) {
                    return (record.get('value')!=='DistributorPrice' && record.get('value')!=='TransformatorPrice' &&
                    record.get('value')!=='GernalTransformator' && record.get('value')!=='DistributorPriceInspectionCompany'
                    );
                }
            }
            ]);
        }
    }

});

/*
 * File: app/view/privateContract/detail/product/PrivateContractDetailSP.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.privateContract.detail.product.PrivateContractDetailSP', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.privatecontractdetailproductprivatecontractdetailsp',

               
                                                                                      
                                                                                           
                              
                                 
                             
                        
                         
                                  
                              
                                   
                                  
                                  
                                 
                                  
                                
                         
                                     
                      
                         
                                 
                                 
                                
                        
                                      
                                   
                                  
                                 
                                  
      

    controller: 'privatecontractdetailproductprivatecontractdetailsp',
    viewModel: {
        type: 'privatecontractdetailproductprivatecontractdetailsp'
    },
    autoScroll: true,
    ui: 'main',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    bind: {
        title: '#{수의계약상세}'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'page',
            bind: {
                hidden: '{!hidePrivateSettlementToolbarYn}'
            },
            items: [
                {
                    xtype: 'displayfield',
                    value: '#{물품에 대한 수의계약 공고문을 조회합니다.}'
                },
                {
                    xtype: 'tbspacer',
                    flex: 1
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-print',
                    text: '#{인쇄}',
                    listeners: {
                        click: 'onPrintButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseButtonClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'kepcopanel',
            collapsible: true,
            reference: 'kepcopanel',
            height: 150,
            bind: {
                store: '{progressStore}'
            },
            listeners: {
                itemClick: 'onContainerItemClick'
            }
        },
        {
            xtype: 'tabpanel',
            flex: 1,
            reference: 'bidTabPanel',
            cls: 'nbr',
            activeTab: 0,
            deferredRender: false,
            plain: true,
            layout: {
                type: 'card',
                deferredRender: true
            },
            items: [
                {
                    xtype: 'form',
                    reference: 'defaultForm',
                    fixed: true,
                    autoScroll: true,
                    layout: 'column',
                    bodyPadding: 5,
                    header: false,
                    title: '#{기본정보}',
                    trackResetOnLoad: true,
                    items: [
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            defaults: {
                                labelWidth: 140
                            },
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{공고일반}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{공고번호/차수}',
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 125,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.no}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '/'
                                        },
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 60,
                                            fieldStyle: 'text-align: center;',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.revision}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'datefield',
                                    width: 270,
                                    fieldLabel: '#{공고일자}',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.noticeDate}'
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    reference: 'purchasePlanDate',
                                    width: 270,
                                    fieldLabel: '#{구매계획일자}',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.purchasePlanDate}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    reference: 'purchasePlanNo',
                                    width: 300,
                                    fieldLabel: '#{구매계획번호}',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.purchasePlanNo}',
                                        hideTrigger: '{isReadOnly}'
                                    },
                                    triggers: {
                                        mytrigger: {
                                            handler: function(field, trigger, e) {
                                                var controller = field.up('[controller]').controller;
                                                controller.showPurchasePlanPopup();
                                            },
                                            allowAlwaysOnClick: true,
                                            cls: 'trigger-search'
                                        }
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    reference: 'prDate',
                                    width: 270,
                                    fieldLabel: '#{구매요청일자}',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.prDate}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    width: 300,
                                    fieldLabel: '#{구매유형}',
                                    readOnly: true,
                                    editable: false,
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.itemType}',
                                        store: '{purchaseTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'inOutType',
                                    width: 300,
                                    fieldLabel: '#{국내외구분}',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.inOutType}',
                                        store: '{inOutTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    reference: 'name',
                                    width: '100%',
                                    fieldLabel: '#{공고명}',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 400,
                                    bind: {
                                        value: '{bidData.name}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 300,
                                    fieldLabel: '#{입찰담당부서}',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeDepartmentName}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 300,
                                    fieldLabel: '#{입찰담당자}',
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeName}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 2,
                                    reference: 'privateReasonCode',
                                    width: 300,
                                    fieldLabel: '#{수의사유}',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    valueField: 'id',
                                    bind: {
                                        value: '{bidData.privateReasonCode}',
                                        store: '{reasonCodeStore}'
                                    },
                                    listeners: {
                                        change: 'onPrivateReasonComboboxChange'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    colspan: 2,
                                    height: 100,
                                    width: '100%',
                                    fieldLabel: ' ',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 2000,
                                    bind: {
                                        value: '{bidData.privateReason}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            defaults: {
                                labelWidth: 140
                            },
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{계약입찰방식}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    width: 300,
                                    fieldLabel: '#{모의입찰여부}',
                                    layout: {
                                        type: 'table',
                                        columns: 2
                                    },
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{모의입찰}',
                                            offText: '#{실제입찰}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.simulationBidYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'contractType',
                                    width: 300,
                                    fieldLabel: '#{계약구분}',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.contractType}',
                                        store: '{contractTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'bidMethod',
                                    width: 300,
                                    fieldLabel: '#{입찰방식}',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.bidMethod}',
                                        store: '{bidMethodStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 2,
                                    width: 300,
                                    fieldLabel: '#{계약방법}',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.competitionType}',
                                        store: '{competitionTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'bidType',
                                    width: 300,
                                    fieldLabel: '#{낙찰자결정방법}',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.bidType}',
                                        store: '{bidTypeKindStore}'
                                    },
                                    listeners: {
                                        change: 'onBidTypeChange'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{2단계}',
                                    layout: {
                                        type: 'table',
                                        columns: 2
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            reference: 'twoPhaseTypeCombo',
                                            width: 100,
                                            readOnly: true,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.twoPhaseType}',
                                                store: '{twoPhaseTypeKindStore}'
                                            },
                                            listeners: {
                                                change: 'ontwoPhaseTypeChange'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            margin: '0 5',
                                            readOnly: true,
                                            boxLabel: '#{희망수량}',
                                            inputValue: 'true',
                                            uncheckedValue: 'false',
                                            bind: {
                                                disabled: '{pureYn}',
                                                value: '{bidData.wishQuantityYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '#{배점한도}',
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{isVisibleProposal}'
                                    },
                                    items: [
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            width: 30,
                                            value: '#{기술}'
                                        },
                                        {
                                            xtype: 'combobox',
                                            margin: '0 7 0 0',
                                            width: 50,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'id',
                                            bind: {
                                                value: '{bidData.proposalTechnicalRate}',
                                                store: '{proposalTechnicalRateCodeStore}'
                                            },
                                            listeners: {
                                                change: 'onProposalRateChange'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            width: 30,
                                            value: '#{가격}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            width: 50,
                                            readOnly: true,
                                            editable: false,
                                            bind: {
                                                value: '{bidData.proposalPriceRate}'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            margin: '0 6',
                                            width: '100%',
                                            labelWidth: 140,
                                            readOnly: true,
                                            boxLabel: '#{소프트웨어사업여부}',
                                            inputValue: 'true',
                                            uncheckedValue: 'false'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'textfield',
                                    reference: 'deliveryDueDate',
                                    width: 300,
                                    fieldLabel: '#{납기}',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.deliveryDueDate}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    reference: 'deliveryLocation',
                                    width: 300,
                                    fieldLabel: '#{납품장소}',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 500,
                                    bind: {
                                        value: '{bidData.deliveryLocation}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    fieldLabel: '#{종합낙찰방식}',
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    bind: {
                                        hidden: '{isVisibleTotEval}'
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            margin: 0,
                                            width: 150,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.totalEvalMethod}',
                                                store: '{totalEvalMethodKindStore}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5'
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            width: '100%',
                                            labelWidth: 140,
                                            readOnly: true,
                                            boxLabel: '#{종합평가}',
                                            inputValue: 'true',
                                            uncheckedValue: 'false'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'numberfield',
                                    validator: function(value) {
                                        if (/[^0-9][.][^0-9]/g.test(value)){
                                            value = value.replace(/[^0-9]/g, '');
                                        }
                                        this.setValue(Number(value));

                                        return true;
                                    },
                                    coverFormat: '0,000.##',
                                    reference: 'presumedPrice',
                                    width: 300,
                                    fieldLabel: '#{추정가격(VAT별도)}',
                                    fieldStyle: 'text-align: right',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    hideTrigger: true,
                                    maxLength: 18,
                                    bind: {
                                        value: '{bidData.presumedPrice}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'currencyCode',
                                    width: 300,
                                    fieldLabel: '#{통화}',
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'id',
                                    bind: {
                                        value: '{bidData.currencyCode}',
                                        store: '{currencyCodeStore}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{하자보증기간}',
                                    layout: {
                                        type: 'table',
                                        columns: 4
                                    },
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            validator: function(value) {
                                                if (/[^0-9]/g.test(value)){
                                                    value = value.replace(/[^0-9]/g, '');
                                                }
                                                this.setValue(Number(value));

                                                return true;
                                            },
                                            margin: 0,
                                            width: 70,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            enforceMaxLength: true,
                                            maxLength: 4,
                                            bind: {
                                                value: '{bidData.warrantyPeriodYears}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{년}'
                                        },
                                        {
                                            xtype: 'textfield',
                                            validator: function(value) {
                                                if (/[^0-9]/g.test(value)){
                                                    value = value.replace(/[^0-9]/g, '');
                                                }
                                                this.setValue(Number(value));

                                                if(Number(value)>11){
                                                    this.setValue(null);
                                                }

                                                return true;
                                            },
                                            margin: 0,
                                            width: 40,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            enforceMaxLength: true,
                                            maxLength: 2,
                                            bind: {
                                                value: '{bidData.warrantyPeriodMonths}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{개월}'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            defaults: {
                                labelWidth: 150
                            },
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{입찰진행}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    layout: {
                                        type: 'table',
                                        columns: 11
                                    },
                                    bind: {
                                        fieldLabel: '{privateSettlementDateText}'
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            reference: 'beginDateTime',
                                            hidden: true,
                                            margin: '0 5 0 0',
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.beginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'beginDateHours',
                                            hidden: true,
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 24,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateHours}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            hidden: true,
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'beginDateMinutes',
                                            hidden: true,
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateMinutes}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            hidden: true,
                                            margin: '0 5',
                                            value: '#{분}'
                                        },
                                        {
                                            xtype: 'displayfield',
                                            hidden: true,
                                            margin: '0 5',
                                            value: '~'
                                        },
                                        {
                                            xtype: 'datefield',
                                            reference: 'endDateTime',
                                            margin: '0 5 0 0',
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.endDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'endDateHours',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 24,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateHours}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'endDateMinutes',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateMinutes}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    fieldLabel: '#{공동수급여부}',
                                    layout: {
                                        type: 'table',
                                        columns: 4
                                    },
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            margin: '0 5 0 0 ',
                                            readOnly: true,
                                            onText: '#{예}',
                                            offText: '#{아니오}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.jointSupplyDemandYn}'
                                            },
                                            listeners: {
                                                change: 'onEtnatogglefieldChange11'
                                            }
                                        },
                                        {
                                            xtype: 'combobox',
                                            margin: '0 10 0 0',
                                            width: 120,
                                            fieldLabel: '#{공동수급방법}',
                                            hideLabel: true,
                                            labelWidth: 140,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{해당없음}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                hidden: '{!bidData.jointSupplyDemandYn}',
                                                value: '{bidData.jointSupplyDemandMethod}',
                                                store: '{jointSupplyDemandMethodKind}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{제한 업체수(2이상)}',
                                            bind: {
                                                hidden: '{!bidData.jointSupplyDemandYn}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 99) {
                                                    value = 99;
                                                } else if(value < 2) {
                                                    value = 2;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: 0,
                                            width: 50,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            emptyText: '2',
                                            decimalPrecision: 0,
                                            maxValue: 99,
                                            minValue: 2,
                                            bind: {
                                                hidden: '{!bidData.jointSupplyDemandYn}',
                                                value: '{bidData.jointSupplyDemandVendorCount}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 1,
                                    fieldLabel: '#{견적서제출마감일시}',
                                    layout: {
                                        type: 'table',
                                        columns: 6
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            reference: 'quotationSubmitCloseDateTime',
                                            margin: '0 5 0 0',
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.quotationSubmitCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'quotationSubmitCloseDateHour',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.quotationSubmitCloseDateHours}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'quotationSubmitCloseDateMinute',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.quotationSubmitCloseDateMinutes}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'checkboxfield',
                                    colspan: 1,
                                    reference: 'quotationEvalYn',
                                    hideLabel: true,
                                    readOnly: true,
                                    boxLabel: '#{제한}',
                                    bind: {
                                        value: '{bidData.quotationEvalYn}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    validator: function(value) {
                                        if (/[^0-9]/g.test(value)){
                                            value = value.replace(/[^0-9]/g, '');
                                        }
                                        this.setValue(Number(value));


                                        return true;
                                    },
                                    colspan: 2,
                                    width: 220,
                                    fieldLabel: '#{견적서제출부수}',
                                    fieldStyle: 'text-align: right',
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 22,
                                    bind: {
                                        value: '{bidData.quotationSubmitCount}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    hidden: true,
                                    fieldLabel: '#{규격서제출마감일시}',
                                    layout: {
                                        type: 'table',
                                        columns: 6
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            reference: 'specProposalCloseDateTime',
                                            margin: 0,
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                disabled: '{isDisableSpec}',
                                                value: '{bidData.specProposalCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'specProposalCloseDateHour',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                disabled: '{isDisableSpec}',
                                                value: '{bidData.specProposalCloseDateHour}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'specProposalCloseDateMinute',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                disabled: '{isDisableSpec}',
                                                value: '{bidData.specProposalCloseDateMinute}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{분}'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            layout: 'fit',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{첨부파일}',
                            items: [
                                {
                                    xtype: 'etnaattachmentfield',
                                    reference: 'attachmentField',
                                    width: '100%',
                                    fieldLabel: '#{파일첨부}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.attachFileGroupId}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    reference: 'attendCon'
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{입찰추가사항}',
                            layout: {
                                type: 'table',
                                columns: 1,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'textareafield',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{용도}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 500,
                                    bind: {
                                        value: '{bidData.usage}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{추가정보제공처}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 500,
                                    bind: {
                                        value: '{bidData.moreInformation}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{기타}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 1000,
                                    bind: {
                                        value: '{bidData.etc}'
                                    }
                                }
                            ]
                        }
                    ],
                    tabConfig: {
                        xtype: 'tab',
                        textAlign: 'left'
                    }
                },
                {
                    xtype: 'form',
                    autoScroll: true,
                    layout: 'column',
                    bodyPadding: 5,
                    title: '#{품목정보}',
                    items: [
                        {
                            xtype: 'gridpanel',
                            columnWidth: 1,
                            reference: 'gridPanel',
                            stateId: '1f4a38d3-d146-495b-e054-0017a4770c10',
                            stateful: true,
                            margin: '0 0 5 0',
                            minHeight: 200,
                            ui: 'grid',
                            title: '#{품목정보}',
                            bind: {
                                store: '{bidItemStore}'
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    align: 'center',
                                    dataIndex: 'itemCode',
                                    text: '#{자재식별번호}'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    width: 250,
                                    dataIndex: 'itemName',
                                    text: '#{품명}'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    required: true,
                                    width: 200,
                                    dataIndex: 'itemSpec',
                                    text: '#{규격}',
                                    editor: {
                                        xtype: 'textfield',
                                        enforceMaxLength: true,
                                        maxLength: 500
                                    }
                                },
                                {
                                    xtype: 'etnastorecolumn',
                                    required: true,
                                    align: 'center',
                                    dataIndex: 'itemUnit',
                                    text: '#{단위}',
                                    valueField: 'id',
                                    displayField: 'text',
                                    bind: {
                                        store: '{unitStore}'
                                    },
                                    editor: {
                                        xtype: 'combobox',
                                        editable: false,
                                        enforceMaxLength: true,
                                        maxLength: 36,
                                        queryMode: 'local',
                                        valueField: 'id',
                                        bind: {
                                            store: '{unitStore}'
                                        }
                                    }
                                },
                                {
                                    xtype: 'numbercolumn',
                                    required: true,
                                    align: 'right',
                                    dataIndex: 'quantity',
                                    text: '#{수량}',
                                    format: '0,000.###',
                                    editor: {
                                        xtype: 'numberfield',
                                        enforceMaxLength: true,
                                        maxLength: 18,
                                        minValue: 0
                                    }
                                },
                                {
                                    xtype: 'checkcolumn',
                                    reference: 'basisItemYn',
                                    width: 90,
                                    dataIndex: 'basisItemYn',
                                    text: '#{기준품목}',
                                    bind: {
                                        hidden: '{!bidData.wishQuantityYn}'
                                    },
                                    editor: {
                                        xtype: 'checkboxfield'
                                    }
                                },
                                {
                                    xtype: 'gridcolumn',
                                    align: 'center',
                                    dataIndex: 'prNo',
                                    text: '#{구매계획번호}'
                                }
                            ],
                            plugins: [
                                {
                                    ptype: 'cellediting',
                                    listeners: {
                                        beforeedit: 'onItemCellEditingBeforeEdit',
                                        edit: 'onItemCellEditingEdit'
                                    }
                                },
                                {
                                    ptype: 'etnacelltip',
                                    deferredRender: true
                                },
                                {
                                    ptype: 'etnaexport',
                                    useRenderer: true,
                                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                                },
                                {
                                    ptype: 'etnagridblock'
                                },
                                {
                                    ptype: 'etnagridcontext',
                                    contextMenu: true,
                                    advancedContextMenu: false
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{첨부파일}',
                            layout: {
                                type: 'table',
                                columns: 1,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'etnaattachmentfield',
                                    reference: 'purchaseSpecAttachFileGroup',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{구매규격서}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.purchaseSpecAttachFileGroupId}'
                                    }
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    reference: 'specialConditionAttachFileGroup',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{특수조건}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.specialConditionAttachFileGrpId}'
                                    }
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    reference: 'etcAttachFileGroup',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{기타첨부}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.etcAttachFileGroupId}'
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],
    listeners: {
        afterrender: 'onAfterRender'
    }

});

/*
 * File: app/view/privateContract/detail/service/PrivateContractDetailSPViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.privatecontractdetailserviceprivatecontractdetailsp',

               
                                   
                                
                               
                                
                          
                          
                          
                               
                                         
                                         
                                   
      

    data: {
        newDate: new Date(),
        bidData: null,
        isEditNumber: false,
        isVisibleSaveBtn: true,
        isVisibleDelBtn: true,
        isVisibleNoticeBtn: true,
        isReadOnly: false
    },

    stores: {
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        purchaseTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.PurchaseTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        inOutTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.InOutTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        bidMethodStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        competitionTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CompetitionTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        twoPhaseTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.TwoPhaseTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        currencyCodeStore: {
            groupCode: 'Currency',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        bidTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.BidTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        contractTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ContractTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        reasonCodeStore: {
            groupCode: 'PrivatereasonServiceCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodesWithProperty',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        proposalTechnicalRateCodeStore: {
            groupCode: 'ProposalTechnicalRateCode',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        jointSupplyDemandMethodKind: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.JointSupplyDemandMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            filters: {
                filterFn: function(item) {
                    // 분담이행(Allotted), 공동이행(Joint)만 보인다.

                    if(item && item.get('value')){
                        return item.get('value') == 'Joint' || item.get('value') == 'Allotted';
                    }
                }
            }
        },
        itemTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.ItemTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        decimalPointDigitNumberStore: {
            data: [
                {
                    value: 0,
                    text: 0
                },
                {
                    value: 1,
                    text: 1
                },
                {
                    value: 2,
                    text: 2
                },
                {
                    value: 3,
                    text: 3
                },
                {
                    value: 4,
                    text: 4
                }
            ],
            fields: [
                {
                    name: 'value'
                },
                {
                    name: 'text'
                }
            ]
        },
        submitYnStore: {
            data: [
                {
                    value: true,
                    text: '제출'
                },
                {
                    value: false,
                    text: '미제출'
                }
            ],
            fields: [
                {
                    name: 'value'
                },
                {
                    name: 'text'
                }
            ]
        },
        vendorYnStore: {
            data: [
                {
                    value: true,
                    text: 'Y'
                },
                {
                    value: false,
                    text: 'N'
                }
            ],
            fields: [
                {
                    name: 'value'
                },
                {
                    name: 'text'
                }
            ]
        },
        privatereasonCodeStore: {
            model: 'bid_sp.model.bid.comboProperty',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.findCodesAndAdditionalProperty',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'additionalProperty1'
                }
            ]
        },
        progressStore: {
            model: 'bid_sp.model.bid.ProgressState',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findProgressStateSPList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        fileItemStore: {
            model: 'bid_sp.model.bid.FileItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.getFileItemList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        }
    },
    formulas: {
        simulation: {
            get: function(data) {
                return data.simulationBidYn;
            },
            bind: {
                simulationBidYn: '{bidData.simulationBidYn}'
            }
        },
        jointSupplyDemand: {
            get: function(data) {
                return data.jointSupplyDemandYn;
            },
            bind: {
                jointSupplyDemandYn: '{bidData.jointSupplyDemandYn}'
            }
        },
        hideSettlementBtnYn: {
            get: function(data) {
                // 수의시담 버튼 제어
                // 공고진행(PreAttendProgress) 일때만 가능
                if(data == 'PreAttendProgress'){
                    return false;
                }else{
                    return true;
                }
            },
            bind: '{bidData.progressState}'
        }
    },

    findBid: function(bidId, type) {
        var deferred = Ext.create('Deft.Deferred');

        smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findBidBasicInfo(bidId, function(result,e){
            if(e.status){
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });

        return deferred.promise;
    }

});

/*
 * File: app/view/privateContract/detail/service/PrivateContractDetailSPViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.privatecontractdetailserviceprivatecontractdetailsp',

    /* Init Function */
    init: function() {
        var me = this, view = me.getView();

        view.setDefaultFormData = Ext.Function.bind(me.setDefaultFormData, me);
        view.loadBidData        = Ext.Function.bind(me.loadBidData, me);

    },

    /* 데이터 초기화 */
    clearData: function() {
        var me = this, vm = this.getViewModel();

        me.lookupReference('bidTabPanel').setActiveTab(0);

        vm.set('bidData', null);

        vm.set('newDate'               , new Date());
        vm.set('isVisibleSaveBtn'      , true);
        vm.set('isVisibleDelBtn'       , true);
        vm.set('isVisibleNoticeBtn'    , true);
        vm.set('isReadOnly'            , false);
    },

    /* 입찰공고 신규 작성 시 데이터 세팅 */
    setDefaultFormData: function() {
        var me = this, view = this.getView();

        me.getView().setLoading(true);

        Etna.onDone(function(){
            var loginUser = Cmmn.User.getData();
            var operatingUnitStore = me.getViewModel().getStore('operatingUnitStore');
            var operatingUnitId = operatingUnitStore&&operatingUnitStore.getRange().length>0?operatingUnitStore.first().get('id'):null;

            var model = me.getDateTime({
                operatingUnitId				 : operatingUnitId,
                competitionType              : 'Private',
                bidType                      : 'LowestPrice',
                progressState                : 'CreateProgress',
                inOutType                    : 'In',
                currencyCode                 : 'KRW',
                representativeDepartmentName : loginUser.departmentName,
                representativeName           : loginUser.name,
                representativeId             : loginUser.id,
                purchaseGroupId              : loginUser.purchaseGroupId,
                noticeDate                   : new Date(),
                purchasePlanDate             : new Date(),
                prDate                       : new Date(),
                autoAttachFileGroupId		 : 'CodeOfConduct',
                beginDateTime				 : new Date(),
                endDateTime					 : new Date(),
                quotationSubmitCloseDateTime : new Date(),
                twoPhaseType				 : 'Nothing'
            });


            me.getViewModel().set('bidData', model);
            me.setBtnAction();
            me.getView().setLoading(false);

        });
    },

    /* 작성된 입찰공고 조회 시 */
    loadBidData: function(bidId, type) {
        var me = this, vm = this.getViewModel(), view = this.getView();

        Ext.suspendLayouts();

        view.setLoading(true);

        me.searchBid(bidId, type);

        var fileGroupId = 'ConstructionBidFileGroup';
        if(vm.get('bidData.ItemTpye')=='Service'){
            fileGroupId = 'ServiceBidFileGroup';
        }

        var searchParam = {
            bidId 		: bidId,
            type  		: type,
            fileGroupId	: fileGroupId,
            bidFileType	: 'Private'
        };


        var fileItemStore = me.getViewModel().get('fileItemStore');

        fileItemStore.load({
            params: searchParam,
            callback: function(records, operation, success){

            }
        });

        Etna.onDone(function() {
            Ext.resumeLayouts(true);
            view.setLoading(false);
        });
    },

    setDateTime: function() {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        // 수의시담 시작 일시
        if(bidData.get('beginDateTime')) {
            bidData.get('beginDateTime').setHours(bidData.get('beginDateHours'));
            bidData.get('beginDateTime').setMinutes(bidData.get('beginDateMinutes'));
        }

        // 수의시담 마감 일시
        if(bidData.get('endDateTime')) {
            bidData.get('endDateTime').setHours(bidData.get('endDateHours'));
            bidData.get('endDateTime').setMinutes(bidData.get('endDateMinutes'));
        }

        if(bidData.get('specProposalCloseDateTime')) {
            bidData.get('specProposalCloseDateTime').setHours(bidData.get('specProposalCloseDateHour'));
            bidData.get('specProposalCloseDateTime').setMinutes(bidData.get('specProposalCloseDateMinute'));
        }

        // 견적서 제출 시작일시
        if(bidData.get('quotationSubmitStartDateTime')) {
            bidData.get('quotationSubmitStartDateTime').setHours(bidData.get('quotationSubmitStartDateHours'));
            bidData.get('quotationSubmitStartDateTime').setMinutes(bidData.get('quotationSubmitStartDateMinutes'));
        }

        // 견적서 제출 마감일시
        if(bidData.get('quotationSubmitCloseDateTime')) {
            bidData.get('quotationSubmitCloseDateTime').setHours(bidData.get('quotationSubmitCloseDateHours'));
            bidData.get('quotationSubmitCloseDateTime').setMinutes(bidData.get('quotationSubmitCloseDateMinutes'));
        }
    },

    /* 날짜 및 시간 가공 */
    getDateTime: function(param) {
        var me = this;

        var bidData = Ext.create('bid_sp.model.bid.Bid', param);

        // 수의시담시작일시
        if(bidData.get('beginDateTime')) {
            bidData.set('beginDateHours', bidData.get('beginDateTime').getHours());
            bidData.set('beginDateMinutes', bidData.get('beginDateTime').getMinutes());
        }

        // 수의시담마감일시
        if(bidData.get('endDateTime')) {
            bidData.set('endDateHours', bidData.get('endDateTime').getHours());
            bidData.set('endDateMinutes', bidData.get('endDateTime').getMinutes());
        }

        if(bidData.get('specProposalCloseDateTime')) {
            bidData.set('specProposalCloseDateHour', bidData.get('specProposalCloseDateTime').getHours());
            bidData.set('specProposalCloseDateMinute', bidData.get('specProposalCloseDateTime').getMinutes());
        }

        //견적서제출시작일시
        if(bidData.get('quotationSubmitStartDateTime')) {
            bidData.set('quotationSubmitStartDateHours', bidData.get('quotationSubmitStartDateTime').getHours());
            bidData.set('quotationSubmitStartDateMinutes', bidData.get('quotationSubmitStartDateTime').getMinutes());
        }

        //견적서제출마감일시
        if(bidData.get('quotationSubmitCloseDateTime')) {
            bidData.set('quotationSubmitCloseDateHours', bidData.get('quotationSubmitCloseDateTime').getHours());
            bidData.set('quotationSubmitCloseDateMinutes', bidData.get('quotationSubmitCloseDateTime').getMinutes());
        }

        return bidData;
    },

    /* 입찰공고 기본정보 조회 */
    searchBid: function(bidId, type) {
        var me = this, vm = this.getViewModel();
        var progressStore = vm.getStore('progressStore');

        progressStore.load({
            params:{
                bidId : bidId
            }
        });


        vm.findBid(bidId, type).then({
            success: function(result) {
                vm.set('bidData', me.getDateTime(result));
                me.lookupReference('defaultForm').getForm().clearInvalid();
                me.setBtnAction();
                me.setAmount();
            },
            failure: function() {

            }
        }).done();
    },

    /* 닫기 */
    close: function() {
        var me = this, view = this.getView();

        me.clearData();

        view.fireEvent('closeDetail');
    },

    /* 버튼 및 속성 제어 */
    setBtnAction: function() {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        if(bidData.get('progressState') === 'CreateProgress') {
            vm.set('isVisibleSaveBtn'  , false);
            vm.set('isVisibleDelBtn'   , false);
            vm.set('isVisibleNoticeBtn', false);
        } else if(bidData.get('progressState') === 'PreAttendProgress') {
            vm.set('isVisibleSaveBtn'  , true);
            vm.set('isVisibleDelBtn'   , true);
            vm.set('isVisibleNoticeBtn', true);
            vm.set('isReadOnly'        , true);
        } else {
            vm.set('isVisibleSaveBtn'  , true);
            vm.set('isVisibleDelBtn'   , true);
            vm.set('isVisibleNoticeBtn', true);
            vm.set('isReadOnly'        , true);
        }
    },

    /* 도급예산액 한글금액, 사정금액 한글금액 set 하는 부분 */
    setAmount: function() {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        var subcontractBudgetAmount = bidData.get('subcontractBudgetAmount');
        var approximateAmount       = bidData.get('approximateAmount');

        if(Number(subcontractBudgetAmount) > 0) {
            var subcontractBudgetAmountWon = Ext.String.format('{0}{1}',Ext.util.Format.numberWord(subcontractBudgetAmount),'#{원}');

            bidData.set('subcontractBudgetAmountWon', subcontractBudgetAmountWon);
        } else {
            bidData.set('subcontractBudgetAmountWon', null);
        }

        if(Number(approximateAmount) > 0) {
            var approximateAmountWon = Ext.String.format('{0}{1}',Ext.util.Format.numberWord(approximateAmount),'#{원}');

            bidData.set('approximateAmountWon' , approximateAmountWon);
        } else {
            bidData.set('approximateAmountWon' , null);
        }
    },

    /* 닫기 버튼 클릭 시 */
    onCloseButtonClick: function(button, e, eOpts) {
        var me = this, view = this.getView();

        me.close();
    },

    onContainerItemClick: function(item) {
        var me = this;
        if(item.urlLink !== 'none'){ //tabUrl이 있는 경우
            var classPath = item.urlLink;

            //modal로 뜨도록 수정 (통테이후 반영예정)
            var popup = Ext.create(classPath, {
                floating : true,
                modal:true,
                title : item.tabTitle,
                bidNo : item.paramNo,
                noticeDate : item.paramNoticeDate,
                companyId : item.companyId,
                width:1024,
                height:768,
                resizable:true,
                draggable:true
            });

            popup.show();
            popup.center();

            //------------------------------------------------------------------tab으로 뜨도록
            //     if (MdiManager.hasView(classPath)) { //기존에 tab이 띄워져있으면 닫음
            //         var view = MdiManager.mdiTab.down(Ext.String.format('>[classpath='+classPath+']'));
            //         MdiManager.mdiTab.remove(view,true);
            //     }
            //     MdiManager.addViewToTab(classPath, { //tab 띄움
            //         title: item.tabTitle,
            //         authKey:  item.menuCode,
            //         bidNo : item.paramNo,
            //         noticeDate : item.paramNoticeDate,
            //         companyId : item.companyId
            //     }, classPath);
        }else if(item.notiMsg !== 'none'){ //화면을 보여주는 것 보다 alert창을 띄워야 하는 경우
            Etna.Message.alert(item.notiMsg);
        }
    },

    onPrivateReasonComboboxChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        var reasonCode    = bidData.get('privateReasonCode');
        var privateReason = bidData.get('privateReason');

        var privateReasonCode = me.lookupReference('privateReasonCode');

        // if(!Ext.isEmpty(newValue) || !Ext.isEmpty(reasonCode)) {

        //     if(!!privateReasonCode.findRecordByValue(newValue).data.properties[0]){
        //         var privateReason = privateReasonCode.findRecordByValue(newValue).data.properties[0].value;

        //         bidData.set('privateReason', privateReason);
        //     }
        // }

        if(!Ext.isEmpty(newValue) || !Ext.isEmpty(reasonCode)) {

            if(!!privateReasonCode.findRecordByValue(newValue).data.additionalProperty1){
                var privateReason = privateReasonCode.findRecordByValue(newValue).data.additionalProperty1;

                if(!!privateReason){
                    privateReason = Ext.String.format('#{{0}}',privateReason.replace(/<br>+/g, ' '+String.fromCharCode(10)));
                    bidData.set('privateReason', Ext.String.format('#{{0}}',privateReason.replace(/\\n+/g, ' '+String.fromCharCode(10))));
                }
            }
        }

    },

    onComboboxChange1: function(field, newValue, oldValue, eOpts) {
        var me = this,
            vm = me.getViewModel();

        if(newValue=='Nego'){			// 협상
            vm.set('isVisibleProposal', false);
        }else{
            vm.set('isVisibleProposal', true);
        }
    },

    onDecimalNumberChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();
        var isReadOnly = vm.get('isReadOnly');

        if(!newValue){
            vm.get('bidData').set('decimalPointDigitNumber', 0);
        }
        vm.set('isEditNumber', newValue);
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        var subcontractBudgetAmount = me.lookupReference('subcontractBudgetAmount');
        var approximateAmount = me.lookupReference('approximateAmount');
        var coverFormat = "0,000.";

        for(var i = 1; i<=newValue; i++){
            coverFormat = coverFormat + '0';
        }

        subcontractBudgetAmount.setCoverFormat(coverFormat);
        me.getViewModel().set('bidData.subcontractBudgetAmount', me.getViewModel().get('bidData.subcontractBudgetAmount').toFixed(newValue));

        approximateAmount.setCoverFormat(coverFormat);
        me.getViewModel().set('bidData.approximateAmount', me.getViewModel().get('bidData.approximateAmount').toFixed(newValue));
    },

    onNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        var subcontractBudgetAmount = bidData.get('subcontractBudgetAmount');

        if(Number(newValue) > 0) {
            var subcontractBudgetAmountWon = Ext.String.format('{0}{1}',Ext.util.Format.numberWord(subcontractBudgetAmount),'#{원}');
            bidData.set('subcontractBudgetAmountWon', subcontractBudgetAmountWon);
        } else {
            bidData.set('subcontractBudgetAmountWon', null);
        }
    },

    onapproximateAmountChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        var approximateAmount = bidData.get('approximateAmount');

        if(Number(newValue) > 0) {
            var approximateAmountWon = Ext.String.format('{0}{1}',Ext.util.Format.numberWord(approximateAmount),'#{원}');
            bidData.set('approximateAmountWon', approximateAmountWon);
        } else {
            bidData.set('approximateAmountWon', null);
        }
    },

    onProposalRateChange1: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = this.getViewModel();

        var bidData = vm.get('bidData');

        bidData.set('proposalPriceRate' , newValue === 0 ? 0 : 100 - newValue);
    },

    onEtnatogglefieldChange111: function(field, newValue, oldValue, eOpts) {
        var me = this,
            vm = me.getViewModel();
        if(!newValue){
            vm.get('bidData').set('jointSupplyDemandVendorCount', 0);
            vm.get('bidData').set('jointSupplyDemandMethod', null);
        }else{
            vm.get('bidData').set('jointSupplyDemandVendorCount', !vm.get('bidData').get('jointSupplyDemandVendorCount')?2:vm.get('bidData').get('jointSupplyDemandVendorCount'));
        }
    },

    onGridpanelCellClick11: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        var me = this;
        var dataIndex = tableview.getColumnManager().getHeaderAtIndex(cellIndex).dataIndex;
        var attendCon = me.lookupReference('attendCon');

        if(dataIndex == 'name'){
            attendCon.setHtml('<iframe src="printDownloadAttachment.do?id='+record.get('id')+'" width="0", height="0"/>');
        }
    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this;

        me.getView().setLoading(true);
    }

});

/*
 * File: app/view/privateContract/detail/service/PrivateContractDetailSP.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.privateContract.detail.service.PrivateContractDetailSP', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.privatecontractdetailserviceprivatecontractdetailsp',

               
                                                                                      
                                                                                           
                              
                                 
                             
                        
                         
                                  
                              
                                   
                                  
                                  
                                 
                                  
                                
                         
                         
                                 
                        
                                     
                     
      

    controller: 'privatecontractdetailserviceprivatecontractdetailsp',
    viewModel: {
        type: 'privatecontractdetailserviceprivatecontractdetailsp'
    },
    ui: 'main',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    bind: {
        title: '#{수의계약상세}'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'page',
            bind: {
                hidden: '{!hidePrivateSettlementToolbarYn}'
            },
            items: [
                {
                    xtype: 'displayfield',
                    value: '#{공사/용역에 대한 수의계약 공고문을 조회합니다.}'
                },
                {
                    xtype: 'tbspacer',
                    flex: 1
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseButtonClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'kepcopanel',
            collapsible: true,
            reference: 'kepcopanel',
            height: 150,
            bind: {
                store: '{progressStore}'
            },
            listeners: {
                itemClick: 'onContainerItemClick'
            }
        },
        {
            xtype: 'tabpanel',
            flex: 1,
            reference: 'bidTabPanel',
            cls: 'nbr',
            activeTab: 0,
            deferredRender: false,
            items: [
                {
                    xtype: 'form',
                    reference: 'defaultForm',
                    fixed: true,
                    autoScroll: true,
                    layout: 'column',
                    bodyPadding: 5,
                    header: false,
                    title: '#{기본정보}',
                    trackResetOnLoad: true,
                    items: [
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{공고일반}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{공고번호/차수}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 3
                                    },
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 125,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.no}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '/'
                                        },
                                        {
                                            xtype: 'textfield',
                                            margin: 0,
                                            width: 60,
                                            fieldStyle: 'text-align: center;',
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.revision}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'datefield',
                                    width: 270,
                                    fieldLabel: '#{공고일자}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.noticeDate}'
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    reference: 'purchasePlanDate',
                                    width: 270,
                                    fieldLabel: '#{구매계획일자}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.purchasePlanDate}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    reference: 'purchasePlanNo',
                                    width: 300,
                                    fieldLabel: '#{구매계획번호}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.purchasePlanNo}',
                                        hideTrigger: '{isReadOnly}'
                                    },
                                    triggers: {
                                        mytrigger: {
                                            handler: function(field, trigger, e) {
                                                var controller = field.up('[controller]').controller;
                                                controller.showPurchasePlanPopup();
                                            },
                                            allowAlwaysOnClick: true,
                                            cls: 'trigger-search'
                                        }
                                    }
                                },
                                {
                                    xtype: 'datefield',
                                    reference: 'prDate',
                                    width: 270,
                                    fieldLabel: '#{구매요청일자}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.prDate}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    width: 300,
                                    fieldLabel: '#{구매유형}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.itemType}',
                                        store: '{itemTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'inOutType',
                                    width: 300,
                                    fieldLabel: '#{국내외구분}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.inOutType}',
                                        store: '{inOutTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    colspan: 2,
                                    reference: 'name',
                                    width: '100%',
                                    fieldLabel: '#{공고명}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 400,
                                    bind: {
                                        value: '{bidData.name}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 300,
                                    fieldLabel: '#{입찰담당부서}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeDepartmentName}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 300,
                                    fieldLabel: '#{입찰담당자}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.representativeName}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'privateReasonCode',
                                    width: '100%',
                                    fieldLabel: '#{수의사유}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    forceSelection: true,
                                    queryMode: 'local',
                                    valueField: 'id',
                                    bind: {
                                        value: '{bidData.privateReasonCode}',
                                        store: '{reasonCodeStore}'
                                    },
                                    listeners: {
                                        change: 'onPrivateReasonComboboxChange'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 300,
                                    fieldLabel: '#{계약의뢰부서}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.contractRequestDepartmentName}'
                                    }
                                },
                                {
                                    xtype: 'textareafield',
                                    colspan: 2,
                                    height: 100,
                                    width: '100%',
                                    fieldLabel: ' ',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 2000,
                                    bind: {
                                        value: '{bidData.privateReason}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{계약입찰방식}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    fieldLabel: '#{모의입찰여부}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 2
                                    },
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            readOnly: true,
                                            onText: '#{모의입찰}',
                                            offText: '#{실제입찰}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.simulationBidYn}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'contractType',
                                    width: 300,
                                    fieldLabel: '#{계약구분}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.contractType}',
                                        store: '{contractTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'bidMethod',
                                    width: 300,
                                    fieldLabel: '#{입찰방식}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.bidMethod}',
                                        store: '{bidMethodStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    colspan: 2,
                                    width: 300,
                                    fieldLabel: '#{계약방법}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.competitionType}',
                                        store: '{competitionTypeKindStore}'
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    reference: 'bidType',
                                    width: 300,
                                    fieldLabel: '#{낙찰자결정방법}',
                                    labelWidth: 140,
                                    editable: false,
                                    emptyText: '#{선택}',
                                    queryMode: 'local',
                                    valueField: 'value',
                                    bind: {
                                        value: '{bidData.bidType}',
                                        readOnly: 'true',
                                        store: '{bidTypeKindStore}'
                                    },
                                    listeners: {
                                        change: 'onComboboxChange1'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    width: 300,
                                    fieldLabel: '#{계약자선정방법}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.privateSelectMethod}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 1,
                                    fieldLabel: '#{통화/소수점사용}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            reference: 'currencyCode',
                                            width: 75,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'id',
                                            bind: {
                                                value: '{bidData.currencyCode}',
                                                store: '{currencyCodeStore}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5'
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            readOnly: true,
                                            inputValue: 'true',
                                            uncheckedValue: 'false',
                                            bind: {
                                                value: '{bidData.decimalPointUseYn}'
                                            },
                                            listeners: {
                                                change: 'onDecimalNumberChange'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 4'
                                        },
                                        {
                                            xtype: 'combobox',
                                            margin: 0,
                                            width: 45,
                                            name: 'decimalCombo',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            editable: false,
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                value: '{bidData.decimalPointDigitNumber}',
                                                store: '{decimalPointDigitNumberStore}'
                                            },
                                            listeners: {
                                                change: 'onComboboxChange'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'textfield',
                                    reference: 'constructionServicePeriodDays',
                                    width: 300,
                                    fieldLabel: '#{공사/용역기간}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maskRe: /[0-9]/,
                                    maxLength: 22,
                                    bind: {
                                        value: '{bidData.constructionServicePeriodDays}'
                                    }
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    fieldLabel: '#{도급예산액/한글금액}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 4
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfield',
                                            coverFormat: '0,000.####',
                                            reference: 'subcontractBudgetAmount',
                                            margin: 0,
                                            width: 155,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            enforceMaxLength: true,
                                            hideTrigger: true,
                                            maxLength: 18,
                                            decimalPrecision: 4,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.subcontractBudgetAmount}'
                                            },
                                            listeners: {
                                                change: 'onNumberfieldChange'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5'
                                        },
                                        {
                                            xtype: 'textfield',
                                            reference: 'subcontractBudgetAmountWon',
                                            margin: 0,
                                            width: 220,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.subcontractBudgetAmountWon}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{부가가치세포함}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    fieldLabel: '#{사정금액/한글금액}',
                                    labelWidth: 140,
                                    layout: {
                                        type: 'table',
                                        columns: 4
                                    },
                                    items: [
                                        {
                                            xtype: 'numberfield',
                                            coverFormat: '0,000.####',
                                            reference: 'approximateAmount',
                                            margin: 0,
                                            width: 155,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            hideTrigger: true,
                                            maxLength: 18,
                                            decimalPrecision: 4,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.approximateAmount}'
                                            },
                                            listeners: {
                                                change: 'onapproximateAmountChange'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5'
                                        },
                                        {
                                            xtype: 'textfield',
                                            reference: 'approximateAmountWon',
                                            margin: 0,
                                            width: 220,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.approximateAmountWon}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{부가가치세포함}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    width: '100%',
                                    fieldLabel: '#{배점한도}',
                                    layout: {
                                        type: 'table',
                                        columns: 5
                                    },
                                    bind: {
                                        hidden: '{isVisibleProposal}'
                                    },
                                    items: [
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            width: 30,
                                            value: '#{기술}'
                                        },
                                        {
                                            xtype: 'combobox',
                                            margin: '0 7 0 0',
                                            width: 50,
                                            readOnly: true,
                                            editable: false,
                                            emptyText: '#{선택}',
                                            queryMode: 'local',
                                            valueField: 'id',
                                            bind: {
                                                value: '{bidData.proposalTechnicalRate}',
                                                store: '{proposalTechnicalRateCodeStore}'
                                            },
                                            listeners: {
                                                change: 'onProposalRateChange1'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            width: 30,
                                            value: '#{가격}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            width: 50,
                                            readOnly: true,
                                            editable: false,
                                            bind: {
                                                value: '{bidData.proposalPriceRate}'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            margin: '0 6',
                                            width: '100%',
                                            labelWidth: 140,
                                            readOnly: true,
                                            boxLabel: '#{소프트웨어사업여부}',
                                            inputValue: 'true',
                                            uncheckedValue: 'false'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            defaults: {
                                labelWidth: 140
                            },
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{입찰진행}',
                            layout: {
                                type: 'table',
                                columns: 2,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    hidden: true,
                                    fieldLabel: '#{수의시담마감일시}',
                                    layout: {
                                        type: 'table',
                                        columns: 11
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            reference: 'beginDateTime',
                                            hidden: true,
                                            margin: '0 5 0 0',
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.beginDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'beginDateHours',
                                            hidden: true,
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 24,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateHours}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            hidden: true,
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'beginDateMinutes',
                                            hidden: true,
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.beginDateMinutes}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            hidden: true,
                                            margin: '0 5',
                                            value: '#{분}'
                                        },
                                        {
                                            xtype: 'displayfield',
                                            hidden: true,
                                            margin: '0 5',
                                            value: '~'
                                        },
                                        {
                                            xtype: 'datefield',
                                            reference: 'endDateTime',
                                            margin: '0 5 0 0',
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.endDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'endDateHours',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 24,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateHours}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'endDateMinutes',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.endDateMinutes}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 2,
                                    fieldLabel: '#{공동수급여부}',
                                    layout: {
                                        type: 'table',
                                        columns: 4
                                    },
                                    items: [
                                        {
                                            xtype: 'etnatogglefield',
                                            margin: '0 5 0 0 ',
                                            readOnly: true,
                                            onText: '#{예}',
                                            offText: '#{아니오}',
                                            onValue: true,
                                            offValue: false,
                                            scale: 'small',
                                            bind: {
                                                value: '{bidData.jointSupplyDemandYn}'
                                            },
                                            listeners: {
                                                change: 'onEtnatogglefieldChange111'
                                            }
                                        },
                                        {
                                            xtype: 'combobox',
                                            margin: '0 10 0 0',
                                            width: 120,
                                            fieldLabel: '#{공동수급방법}',
                                            hideLabel: true,
                                            labelWidth: 140,
                                            readOnly: true,
                                            emptyText: '#{해당없음}',
                                            queryMode: 'local',
                                            valueField: 'value',
                                            bind: {
                                                hidden: '{!bidData.jointSupplyDemandYn}',
                                                value: '{bidData.jointSupplyDemandMethod}',
                                                store: '{jointSupplyDemandMethodKind}'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            margin: '0 2 0 0',
                                            text: '#{제한 업체수(2이상)}',
                                            bind: {
                                                hidden: '{!bidData.jointSupplyDemandYn}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 99) {
                                                    value = 99;
                                                } else if(value < 2) {
                                                    value = 2;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            margin: 0,
                                            width: 50,
                                            fieldLabel: '',
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            emptyText: '2',
                                            decimalPrecision: 0,
                                            maxValue: 99,
                                            minValue: 0,
                                            bind: {
                                                hidden: '{!bidData.jointSupplyDemandYn}',
                                                value: '{bidData.jointSupplyDemandVendorCount}'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    colspan: 1,
                                    fieldLabel: '#{견적서제출일시}',
                                    layout: {
                                        type: 'table',
                                        columns: 11
                                    },
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            reference: 'quotationSubmitStartDateTime',
                                            margin: '0 5 0 0',
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.quotationSubmitStartDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'quotationSubmitStartDateHour',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 24,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.quotationSubmitStartDateHours}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'quotationSubmitStartDateMinute',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 24,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.quotationSubmitStartDateMinutes}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{분}'
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{~}'
                                        },
                                        {
                                            xtype: 'datefield',
                                            reference: 'quotationSubmitCloseDateTime',
                                            margin: '0 5 0 0',
                                            width: 110,
                                            readOnly: true,
                                            bind: {
                                                value: '{bidData.quotationSubmitCloseDateTime}'
                                            }
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 23) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'quotationSubmitCloseDateHour',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 23,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.quotationSubmitCloseDateHours}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{시}'
                                        },
                                        {
                                            xtype: 'numberfield',
                                            validator: function(value) {
                                                if(Number(value) > 59) {
                                                    value = 0;
                                                } else if(value < 0) {
                                                    value = 0;
                                                }

                                                this.setValue(value);

                                                return true;
                                            },
                                            reference: 'quotationSubmitCloseDateMinute',
                                            margin: 0,
                                            width: 50,
                                            fieldStyle: 'text-align: right',
                                            readOnly: true,
                                            decimalPrecision: 0,
                                            maxValue: 59,
                                            minValue: 0,
                                            bind: {
                                                value: '{bidData.quotationSubmitCloseDateMinutes}'
                                            }
                                        },
                                        {
                                            xtype: 'displayfield',
                                            margin: '0 5',
                                            value: '#{분}'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'checkboxfield',
                                    colspan: 1,
                                    reference: 'quotationEvalYn',
                                    hidden: true,
                                    hideLabel: true,
                                    readOnly: true,
                                    boxLabel: '#{견적서제출여부}',
                                    bind: {
                                        value: '{bidData.quotationEvalYn}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{첨부파일}',
                            layout: {
                                type: 'table',
                                columns: 1,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    ui: 'grid',
                                    width: '100%',
                                    manageHeight: false,
                                    title: '#{자동첨부파일}',
                                    bind: {
                                        store: '{fileItemStore}'
                                    },
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            width: '90%',
                                            dataIndex: 'name',
                                            text: '#{파일명}'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                return value/1024+'KB';
                                            },
                                            width: 100,
                                            align: 'right',
                                            dataIndex: 'size',
                                            text: '#{사이즈}'
                                        }
                                    ],
                                    viewConfig: {
                                        height: 100
                                    },
                                    listeners: {
                                        cellclick: 'onGridpanelCellClick11'
                                    }
                                },
                                {
                                    xtype: 'etnaattachmentfield',
                                    reference: 'attachmentField',
                                    width: '100%',
                                    fieldLabel: '#{파일첨부}',
                                    labelAlign: 'top',
                                    labelWidth: 140,
                                    readOnly: true,
                                    bind: {
                                        value: '{bidData.attachFileGroupId}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    reference: 'attendCon'
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            margin: '0 0 5 0',
                            ui: 'table',
                            bodyBorder: true,
                            collapsible: true,
                            title: '#{입찰추가사항}',
                            layout: {
                                type: 'table',
                                columns: 1,
                                tdAttrs: {
                                    style: {
                                        width: '50%'
                                    }
                                }
                            },
                            items: [
                                {
                                    xtype: 'textareafield',
                                    reference: 'contractSize',
                                    height: 120,
                                    width: '100%',
                                    fieldLabel: '#{계약물량 또는 규모}',
                                    labelWidth: 140,
                                    readOnly: true,
                                    enforceMaxLength: true,
                                    maxLength: 300,
                                    bind: {
                                        value: '{bidData.contractSize}'
                                    }
                                }
                            ]
                        }
                    ],
                    tabConfig: {
                        xtype: 'tab',
                        textAlign: 'left'
                    }
                }
            ]
        }
    ],
    listeners: {
        afterrender: 'onPanelAfterRender'
    }

});

/*
 * File: app/view/reverseauction/ReverseAuctionAttendViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.ReverseAuctionAttendViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.reverseauctionreverseauctionattend'

});

/*
 * File: app/view/reverseauction/ReverseAuctionAttendViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.ReverseAuctionAttendViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.reverseauctionreverseauctionattend',

    showReverseAuctionAttendList: function() {
        var me = this;
        var list = me.lookupReference('reverseAuctionAttendList');

        me.getView().getLayout().setActiveItem(list);
    },

    init: function() {
        var me =this, view = this.getView();
        var list = me.lookupReference('reverseAuctionAttendList');

        if(view.bidNo){
            var param = {
                bidNo : view.bidNo,
                noticeDate : view.noticeDate,
                companyId : view.companyId
            };

            list.param = param;
        }
    },

    showReverseAcutionChart: function(reverseAuctionId, vendorAttendId, eventOptions) {
        var me = this;
        var detail = me.lookupReference('reverseAuctionChart');

        detail.loadData(reverseAuctionId, vendorAttendId);
        me.getView().getLayout().setActiveItem(detail);
    },

    onPanelShowReverseAuction: function(reverseAuctionId, vendorAttendId, eventOptions) {
        var me = this;
        var detail = me.lookupReference('reverseAuctionDetail');

        detail.loadData(reverseAuctionId, vendorAttendId);
        me.getView().getLayout().setActiveItem(detail);
    },

    onPanelShowResult: function(reverseAuctionId, vendorAttendId, eventOptions) {
        var me = this;
        var detail = me.lookupReference('reverseAuctionResultDetail');

        detail.loadData(reverseAuctionId, vendorAttendId);
        me.getView().getLayout().setActiveItem(detail);
    },

    onPanelCloseList: function(eventOptions) {
        var me = this;
        me.getView().close();
    },

    closeReverseAuctionChart: function(eventOptions) {
        var me = this;
        me.showReverseAuctionAttendList();
    },

    reloadReverseAuctionProgressList: function(eventOptions) {
        var me = this;
        var list = me.lookupReference('reverseAuctionAttendList');

        list.onSearchButtonClick();
    },

    closeReverseAuctionDetail: function(eventOptions) {
        var me = this;
        me.showReverseAuctionAttendList();
    },

    onPanelCloseDetail: function(eventOptions) {
        var me = this;
        me.showReverseAuctionAttendList();
    },

    onPanelReload: function(eventOptions) {
        var me = this;
        var list = me.lookupReference('reverseAuctionAttendList');

        list.onSearchButtonClick();
    }

});

/*
 * File: app/view/reverseauction/attend/ReverseAuctionAttendListViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.attend.ReverseAuctionAttendListViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.reverseauctionattendreverseauctionattendlist',

               
                                         
                                
                               
                                
                          
                          
                          
                                   
                                                             
                                          
                                       
      

    data: {
        searchValues: null,
        isPopup: false
    },

    stores: {
        vendorOperatingUnitStore: {
            linkType: 'EOPO',
            type: 'cmmnvendoroperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getVendorOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        vendorAttendBaseProgressStateKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.VendorAttendBaseProgressStateKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            filters: {
                filterFn: function(item) {
                    var status = item.get('value');
                    var agreeStatus = ['Unsubmission', 'Submit', 'Final'];
                    if(Ext.Array.contains(agreeStatus, status) === true){
                        return item;
                    }
                }
            }
        },
        restrictAreaStore: {
            groupCode: 'AREA',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        competitionTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CompetitionTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        reverseAuctionStore: {
            model: 'bid_sp.model.rfx.ReverseAuction',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionProgressListController.findReverseAuctionAttendPage',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        rfxAttendResultStateKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.RfxAttendResultStateKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            filters: {
                filterFn: function(item) {
                    var status = item.get('value');
                    var removeStatus = ['ContractEstrablished', 'ContractFail', 'PartlySuccess','SelectedCancel','Abandon'];
                    if(Ext.Array.contains(removeStatus, status) === false){
                        return item;
                    }
                }
            }
        },
        companyStore: {
            model: 'bid_sp.model.cmmn.CompanyCode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.basis.GroupCodeController.findCompanyCodeDatas',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        areaLimitReverseStore: {
            groupCode: 'AreaLimitReverse',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        rfxProgressStateKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.RfxProgressStateKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        rfxResultStateKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.RfxResultStateKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        }
    }

});

/*
 * File: app/view/reverseauction/attend/ReverseAuctionAttendListViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.attend.ReverseAuctionAttendListViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.reverseauctionattendreverseauctionattendlist',

    /* init */
    init: function() {
        var me = this;

        me.getView().onSearchButtonClick = Ext.Function.bind(me.onSearchButtonClick, me);
    },

    /* search validation */
    searchValidation: function() {
        var me = this;
        var fields = me.lookupReference('searchForm').getForm().getFields().items;
        var message;
        var validYn = true;

        Ext.each(fields, function(field){
            if(!field.isValid()){
                var label = field.fieldLabel == null? field.up().fieldLabel : field.fieldLabel;
                message = Ext.String.format('#{"{0}" 필수값을 확인 해주십시오.}', label);
                validYn = false;
                return;
            }
        });

        if(!validYn){
            Etna.Message.alert(message);
        }

        return validYn;
    },

    /* grid cell click */
    gridCellClick: function(record) {
        var me = this;

        me.getView().fireEvent('showReverseAuction', record.get('id'), record.get('vendorAttendId'));
    },

    findProgressList: function() {
        var me = this;
        var reverseAuctionStore = me.getViewModel().get('reverseAuctionStore');

        me.getViewModel().set('searchValues.vendorId', Cmmn.User.get('vendorId'));
        var searchValues = me.getViewModel().get('searchValues');

        if(!me.searchValidation()) return;

        me.getView().setLoading(true);

        reverseAuctionStore.loadPage(1, {
            params : searchValues,
            callback : function() {
                me.getView().setLoading(false);
            }
        });
    },

    reset: function(param) {
        var me = this;
        var reverseAuctionStore = me.getViewModel().get('reverseAuctionStore');
        var companyStore = me.getViewModel().getStore('companyStore');
        var companyId = companyStore && companyStore.getRange().length > 0 ? companyStore.first().get('id'):null;
        var fromDate = Ext.Date.add(new Date(), Ext.Date.MONTH, -1);
        var toDate  = new Date();
        var bidNo = null;

        if(param){
            var date = new Date(param.noticeDate);
            bidNo = param.bidNo;
            companyId = param.companyId;
            fromDate = Ext.Date.add(date, Ext.Date.MONTH, -1);
            toDate = date;
        }

        var condition = {
            companyId : companyId,
            fromBeginDate : fromDate,
            toBeginDate : toDate,
            no : bidNo
        };

        me.getViewModel().set('searchValues', condition);

        if(param){
            condition.vendorId = Cmmn.User.get('vendorId');

            reverseAuctionStore.loadPage(1, {
                params : condition,
                callback : function() {
                    me.getView().setLoading(false);
                }
            });
        }else{
            me.getView().setLoading(false);
        }
    },

    /* 조회 버튼 click event */
    onSearchButtonClick: function(button, e, eOpts) {
        var me = this;

        me.findProgressList();
    },

    /* 초기화 버튼 click event */
    onRefreshButtonClick: function(button, e, eOpts) {
        var me = this;
        me.reset();
    },

    onCloseButtonClick: function(button, e, eOpts) {
        var me = this;
        me.getViewModel().set('isPopup', false);
        me.getView().fireEvent('closeList');
    },

    /* search form enter */
    onSearchFormSpecialKey: function(field, e) {
        var me = this;

        if(e.getKey() == e.ENTER) {
            if(me.searchValidation()){
                me.findProgressList();
            }
        }
    },

    /* 역경매투찰 버튼 click event */
    onSubmitButtonClick: function(button, e, eOpts) {
        var me = this;
        var selection = me.lookupReference('gridPanel').getSelectionModel().getSelection();

        if(selection.length > 0){
            var lastSelection = me.lookupReference('gridPanel').getSelectionModel().getLastSelected();
            if(lastSelection.get('progressState') === 'AttendProgress'){
                me.getView().fireEvent('showDetail', lastSelection.get('id'), lastSelection.get('vendorAttendId'));
            } else {
                Etna.Message.alert('#{역경매 진행상태가 "입찰진행"일때 투찰가능합니다.}');
            }

        }else{
            Etna.Message.alert('#{선택된 내용이 없습니다.}');
        }
    },

    onResultViewButtonClick: function(button, e, eOpts) {
        var me = this;
        var selection = me.lookupReference('gridPanel').getSelectionModel().getSelection();

        if(selection.length > 0){
            var lastSelection = me.lookupReference('gridPanel').getSelectionModel().getLastSelected();
            if(lastSelection.get('progressState') === 'Final' && lastSelection.get('resultState') === 'Success'){
                me.getView().fireEvent('showResult', lastSelection.get('id'), lastSelection.get('vendorAttendId'));
            } else {
                Etna.Message.alert('#{역경매 진행상태가 "종료"이고 역경매 결과상태가 "낙찰"일 때 확인가능합니다.}');
            }

        }else{
            Etna.Message.alert('#{선택된 내용이 없습니다.}');
        }
    },

    onGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        var me = this;
        var dataIndex = tableview.getColumnManager().getHeaderAtIndex(cellIndex).dataIndex;
        var isPopup = me.getViewModel().get('isPopup');

        if(dataIndex == 'no'){		// 공고번호 클릭
            if(!isPopup){
                me.gridCellClick(record);
            }
        }

    },

    /* after render */
    onAfterRender: function(component, eOpts) {
        var me = this;
        var view = me.getView();

        me.getView().setLoading(true);

        Etna.onDone(function() {
            var companyCodeStore = me.getViewModel().getStore('companyStore');

            companyCodeStore.load({
                callback: function(records, operation, success) {
                    if(view.param){
                        me.getViewModel().set('isPopup', true);
                        me.reset(view.param);
                    }else{
                        me.getView().setTitle('#{역경매투찰}');
                        me.getViewModel().set('isPopup', false);
                        me.reset();
                    }
                }
            });
        });
    }

});

/*
 * File: app/view/reverseauction/attend/ReverseAuctionAttendList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.attend.ReverseAuctionAttendList', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reverseauctionattendreverseauctionattendlist',

               
                                                                              
                                                                                   
                         
                         
                             
                            
                                  
                                  
                              
                                           
                         
                                 
                               
                        
                                      
                                  
                                 
                                   
                                    
                                   
      

    controller: 'reverseauctionattendreverseauctionattendlist',
    viewModel: {
        type: 'reverseauctionattendreverseauctionattendlist'
    },
    autoShow: true,
    ui: 'main',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            reference: 'searchForm',
            margin: '0 0 5 0',
            ui: 'search',
            defaults: {
                bubbleEvents: [
                    'specialkey'
                ],
                defaults: {
                    bubbleEvents: [
                        'specialkey'
                    ],
                    defaults: {
                        bubbleEvents: [
                            'specialkey'
                        ]
                    }
                }
            },
            fieldDefaults: {
                labelWidth: 110
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    ui: 'search',
                    items: [
                        {
                            xtype: 'label',
                            text: '#{역경매 투찰 및 결과를 조회한다.}'
                        },
                        {
                            xtype: 'tbspacer',
                            flex: 1
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-search',
                            text: '#{조회}',
                            listeners: {
                                click: 'onSearchButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-refresh',
                            text: '#{초기화}',
                            listeners: {
                                click: 'onRefreshButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-close',
                            text: '#{닫기}',
                            bind: {
                                hidden: '{!isPopup}'
                            },
                            listeners: {
                                click: 'onCloseButtonClick'
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'combobox',
                    width: 320,
                    fieldLabel: '#{회사이름}',
                    editable: false,
                    displayField: 'name',
                    queryMode: 'local',
                    valueField: 'id',
                    bind: {
                        value: '{searchValues.companyId}',
                        store: '{companyStore}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    fieldLabel: '#{공고시작일시}',
                    layout: {
                        type: 'table',
                        columns: 3
                    },
                    items: [
                        {
                            xtype: 'datefield',
                            margin: 0,
                            width: 120,
                            allowBlank: false,
                            bind: {
                                value: '{searchValues.fromBeginDate}',
                                maxValue: '{searchValues.toBeginDate}'
                            }
                        },
                        {
                            xtype: 'label',
                            height: 20,
                            margin: '0 5',
                            text: '~'
                        },
                        {
                            xtype: 'datefield',
                            margin: 0,
                            width: 120,
                            allowBlank: false,
                            bind: {
                                value: '{searchValues.toBeginDate}',
                                minValue: '{searchValues.fromBeginDate}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'combobox',
                    width: 320,
                    fieldLabel: '#{진행상태}',
                    editable: false,
                    emptyText: '#{전체}',
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{searchValues.attendProgressState}',
                        store: '{vendorAttendBaseProgressStateKindStore}'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{결과상태}',
                    editable: false,
                    emptyText: '#{전체}',
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{searchValues.attendResultState}',
                        store: '{rfxAttendResultStateKindStore}'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 320,
                    fieldLabel: '#{지역제한}',
                    editable: false,
                    emptyText: '#{전체}',
                    queryMode: 'local',
                    valueField: 'id',
                    bind: {
                        value: '{searchValues.restrictAreaCode}',
                        store: '{areaLimitReverseStore}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{공고번호}',
                    enforceMaxLength: true,
                    maxLength: 50,
                    bind: {
                        value: '{searchValues.no}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{공고명}',
                    enforceMaxLength: true,
                    maxLength: 50,
                    bind: {
                        value: '{searchValues.name}'
                    }
                }
            ],
            listeners: {
                specialKey: 'onSearchFormSpecialKey'
            },
            plugins: [
                {
                    ptype: 'autoClearButton'
                }
            ]
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            reference: 'gridPanel',
            ui: 'grid',
            bind: {
                store: '{reverseAuctionStore}'
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    ui: 'grid',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'btn-send',
                            text: '#{역경매투찰}',
                            listeners: {
                                click: 'onSubmitButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-view',
                            text: '#{결과조회}',
                            listeners: {
                                click: 'onResultViewButtonClick'
                            }
                        }
                    ]
                },
                {
                    xtype: 'etnascrollpagingtoolbar',
                    dock: 'bottom',
                    bind: {
                        store: '{reverseAuctionStore}'
                    }
                }
            ],
            columns: [
                {
                    xtype: 'etnastorecolumn',
                    align: 'center',
                    dataIndex: 'attendProgressState',
                    text: '#{진행상태}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{vendorAttendBaseProgressStateKindStore}'
                    }
                },
                {
                    xtype: 'etnastorecolumn',
                    align: 'center',
                    dataIndex: 'attendResultState',
                    text: '#{결과상태}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{rfxAttendResultStateKindStore}'
                    }
                },
                {
                    xtype: 'etnastorecolumn',
                    width: 135,
                    align: 'center',
                    dataIndex: 'progressState',
                    text: '#{역경매 진행상태}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{rfxProgressStateKindStore}'
                    }
                },
                {
                    xtype: 'etnastorecolumn',
                    width: 135,
                    align: 'center',
                    dataIndex: 'resultState',
                    text: '#{역경매 결과상태}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{rfxResultStateKindStore}'
                    }
                },
                {
                    xtype: 'etnastorecolumn',
                    width: 180,
                    align: 'center',
                    dataIndex: 'companyId',
                    text: '#{회사이름}',
                    valueField: 'id',
                    displayField: 'name',
                    bind: {
                        store: '{companyStore}'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    align: 'center',
                    dataIndex: 'no',
                    tdCls: 'link',
                    text: '#{공고번호}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 50,
                    align: 'center',
                    dataIndex: 'revision',
                    text: '#{차수}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'name',
                    text: '#{공고명}'
                },
                {
                    xtype: 'datecolumn',
                    width: 135,
                    align: 'center',
                    dataIndex: 'noticeBeginDateTime',
                    text: '#{공고시작일시}',
                    format: 'Y/m/d H:i'
                },
                {
                    xtype: 'gridcolumn',
                    width: 250,
                    align: 'center',
                    dataIndex: 'reverseAuctionPeriod',
                    text: '#{역경매기간}'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'restrictArea',
                    text: '#{지역제한}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'representativeDepartmentName',
                    text: '#{공고부서}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'representativeName',
                    text: '#{입찰담당자}'
                }
            ],
            selModel: {
                selType: 'checkboxmodel',
                allowDeselect: true,
                mode: 'SINGLE'
            },
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                }
            ],
            listeners: {
                cellclick: 'onGridpanelCellClick'
            }
        }
    ],
    listeners: {
        afterrender: 'onAfterRender'
    }

});

/*
 * File: app/view/reverseauction/progress/ReverseAuctionChartViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.progress.ReverseAuctionChartViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.vendorrfx.reverseauctionchart',

               
                                   
                                
                               
                                
                          
                               
                                         
                                                        
                                                      
                                  
      

    data: {
        reverseAuctionData: null,
        reverseAuctionAttendData: null,
        isSameAmount: false,
        timer: ''
    },

    stores: {
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        reverseAuctionRealtimeAttendStore: {
            model: 'bid_sp.model.rfx.ReverseAuctionRealtimeAttend',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionChartController.findReverseAuctionRealtimeAttendsByVendorAttendRequestId',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        reverseAuctionLowestAttendStore: {
            model: 'bid_sp.model.rfx.ReverseAuctionLowestAttend',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionChartController.findVendorReverseAuctionLowestAttendList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        minimumPriceUnitStore: {
            groupCode: 'MinimumPriceUnit',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        itemStore: {
            model: 'bid_sp.model.rfx.RfxItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionChartController.getReverseAuctionItems',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        contractIssueStore: {
            data: [
                {
                    text: '발행',
                    value: true
                },
                {
                    text: '발행안함',
                    value: false
                }
            ],
            fields: [
                {
                    name: 'text'
                },
                {
                    name: 'value'
                }
            ]
        },
        areaLimitReverseStore: {
            groupCode: 'AreaLimitReverse',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        }
    },
    formulas: {
        initPrice: function(get) {
            if(get('reverseAuctionData')){
                return Ext.util.Format.number(get('reverseAuctionData').get('initPrice'), '0,000');
            }
        },
        currentLowestAmount: function(get) {
            if(get('reverseAuctionData')){
                return Ext.util.Format.number(get('reverseAuctionData').get('currentLowestAmount'), '0,000');
            }
        },
        isAttendProgress: {
            get: function(data) {
                if(data == "AttendProgress"){
                    return true;
                }
                return false;
            },
            bind: '{reverseAuctionData.progressState}'
        },
        isPreAttendProgress: {
            get: function(data) {
                if(data === "PreAttendProgress"){
                    return true;
                }
                return false;
            },
            bind: '{reverseAuctionData.progressState}'
        },
        isRankingOpen: {
            get: function(data) {

                if(!data){
                    return true;
                }
                return false;
            },
            bind: '{reverseAuctionData.rankingOpenYn}'
        },
        autoExtensionText: {
            get: function(data) {
                if(data && data == 1){ 		// 자동연장
                    return Ext.String.format('#{{0}}', '이 공고는 마감 5분이내 응찰 시 경매마감시간이 5분이 더해져 자동으로 연장됩니다.');
                }else{		// 연장안함
                    return Ext.String.format('#{{0}}', '이 공고는 마감 5분이내 응찰해도 경매마감시간이 변하지 않습니다.');
                }
            },
            bind: '{reverseAuctionData.autoExtensionYn}'
        },
        isDirectInput: {
            get: function(data) {
                if(data === 'DirectInput'){
                    return false;
                }else if (data === 'FileAttach'){
                    return true;
                }
            },
            bind: '{reverseAuctionData.itemInfoInputType}'
        },
        isAreaLimit: {
            get: function(data) {
                if(data === '01') {
                    return true;
                } else {
                    return false;
                }
            },
            bind: '{reverseAuctionData.restrictAreaCode}'
        }
    },

    /* 가격제출 */
    submit: function(reverseAuctionId, reverseAuctionAttendData) {
        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionChartController.submit(reverseAuctionId, reverseAuctionAttendData, function(result,e) {
            if(e.status) {
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });
        return deferred.promise;
    },

    /* 역경매정보 조회 */
    findReverseAuctionData: function(id) {
        var me = this;
        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionChartController.findReverseAuctionData(id, function(result,e){
            if(e.status) {
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });
        return deferred.promise;
    },

    /* 역경매정보 조회 */
    findReverseAuctionAttendDataByReverseAuctionId: function(reverseAuctionId) {
        var me = this;
        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionChartController.findReverseAuctionAttendDataByReverseAuctionId(reverseAuctionId, function(result,e){
            if(e.status) {
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });
        return deferred.promise;
    },

    /* 역경매정보 조회 */
    findReverseAuctionAttendDataByVendorAttendRequestId: function(vendorAttendRequestId) {
        var me = this;
        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionChartController.findReverseAuctionAttendDataByVendorAttendRequestId(vendorAttendRequestId, function(result,e){
            if(e.status) {
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });
        return deferred.promise;
    },

    preConfirmSubmit: function(reverseAuctionId) {
        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionChartController.checkValidationForSubmit(reverseAuctionId, function(result,e) {
            if(e.status) {
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });
        return deferred.promise;
    }

});

/*
 * File: app/view/reverseauction/progress/ReverseAuctionChartViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.progress.ReverseAuctionChartViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.vendorrfx.reverseauctionchart',

    /* init */
    init: function() {
        var me = this;

        me.getView().loadData = Ext.Function.bind(me.loadData, me);

        // // TODO
        // Etna.onDone(function() {
        //     me.runner = new Ext.util.TaskRunner();
        //     me.task = me.runner.newTask({
        //         run : function () {
        //             me.refreshReverseAuction();
        //         },
        //         interval: 6000
        //     });
        // });
    },

    /* clear data */
    clearData: function() {
        var me = this;
        var vm = me.getViewModel();

        clearInterval(me.getViewModel().get('timer'));
        me.getViewModel().set('timer', '');
        vm.set('reverseAuctionData',       Ext.create('bid_sp.model.rfx.ReverseAuction'));
        vm.set('reverseAuctionAttendData', Ext.create('bid_sp.model.rfx.ReverseAuctionAttend'));
        vm.set('isSameAmount', false);

        vm.getStore('itemStore').removeAll();
        vm.getStore('reverseAuctionRealtimeAttendStore').removeAll();
        vm.getStore('reverseAuctionLowestAttendStore').removeAll();

        // me.task.destroy();
    },

    /* load data */
    loadData: function(reverseAuctionId, vendorAttendRequestId) {
        var me = this, vm = this.getViewModel();

        me.getView().setLoading(true);

        me.findReverseAuctionData(reverseAuctionId);          // 역경매 정보 조회
        me.findReverseAuctionItems(reverseAuctionId);         // 역경매 품목 조회
        me.findReverseAuctionLowestAttends(reverseAuctionId); // 역경매 최저가 현황 조회

        Etna.onDone(function(){
            me.setTimer();
            me.getView().setLoading(false);
        });
    },

    submitValidator: function() {
        var me = this, vm = this.getViewModel();

        var reverseAuctionAttendData = vm.get('reverseAuctionAttendData');
        var totalAmount              = reverseAuctionAttendData.get('amount');
        var minimumPriceUnit         = vm.get('reverseAuctionData').get('minimumPriceUnit');
        var currentLowestAmount      = vm.get('reverseAuctionData').get('currentLowestAmount');
        var initPrice                = vm.get('reverseAuctionData').get('initPrice');

        if((Number(totalAmount) % minimumPriceUnit) !== 0) {
            Etna.Message.alert('#{최소 입찰단위 금액에 맞추어 제출해야 합니다.}');
            return false;
        } else if(currentLowestAmount === 0) {
            if(totalAmount >= initPrice) {
                Etna.Message.alert('#{시작가격보다 낮은 금액을 제출해야 합니다.}');
                return false;
            } else {
                return true;
            }
        } else if(totalAmount >= currentLowestAmount) {
            Etna.Message.alert('#{현재 최저 입찰가보다 낮은 금액을 제출해야 합니다.}');
            return false;
        } else {
            return true;
        }
    },

    /* 투찰 가능한 상태를 확인하고(DB조회) 투찰이 가능할 경우 전자서명으로 넘어간다. */
    preConfirmSubmit: function(electricSignState, signInfo) {
        var me = this, vm = this.getViewModel();

        me.getView().setLoading(true);

        var reverseAuctionData       = vm.get('reverseAuctionData');

        vm.preConfirmSubmit(reverseAuctionData.get('id')).then({
            success : function(result) {						// 투찰이 가능할 경우 return : true, 불가능할 경우 return : false
                if(result) {
                    if(electricSignState === 'beforeElectricSign'){
                        me.showElectricSign();						// 전자서명 진행
                    }else if(electricSignState === 'afterElectricSign'){
                        me.submit(signInfo);
                    }
                } else {
                    Etna.Message.alert('#{투찰가능한 상태가 아닙니다.}');
                    me.getView().setLoading(false);
                    me.submitRefresh();
                }
            },
            failure : function(error) {
                me.submitRefresh();
                me.getView().setLoading(false);
            }
        });
    },

    submit: function(signInfo) {
        var me = this, vm = this.getViewModel();

        me.getView().setLoading(true);

        var reverseAuctionData = vm.get('reverseAuctionData');
        var reverseAuctionAttendData = vm.get('reverseAuctionAttendData');

        // 역경매는 투찰정보를 공개하여 실시간 최저가투찰을 진행하기에 암호화하는 데이터가 없다.
        // 추후 암호화해야할 정보가 생길 경우 암호화된 signInfo를 reverseAuctionAttendData에 set하여 넘겨준다.

        vm.submit(reverseAuctionData.get('id'), reverseAuctionAttendData.getData()).then({
            success : function(result) {
                if(result) {
                    Etna.Message.alert(Ext.String.format('#{{0}}', result.errorMsg));
                } else {
                    Etna.Message.alert('#{제출 하였습니다.}');
                }

                me.submitRefresh();
            },
            failure : function(error) {
                me.getView().setLoading(false);
            }
        });
    },

    submitRefresh: function() {
        var me = this, vm = this.getViewModel();

        me.getView().setLoading(true);
        me.getView().fireEvent('reload');

        var reverseAuctionId = vm.get('reverseAuctionData').get('id');

        me.findReverseAuctionData(reverseAuctionId);          // 역경매 정보 조회
        me.findReverseAuctionLowestAttends(reverseAuctionId); // 역경매 최저가 현황 조회

        Etna.onDone(function() {
            me.getView().setLoading(false);
        });
    },

    /* load data 역경매정보 조회 */
    findReverseAuctionData: function(id) {
        var me = this, vm = this.getViewModel();

        vm.findReverseAuctionData(id).then({
            success : function(result) {
                var reverseAuctionModel = Ext.create('bid_sp.model.rfx.ReverseAuction', result);

                reverseAuctionModel.set('beginDateHour',   reverseAuctionModel.get('beginDateTime').getHours());
                reverseAuctionModel.set('beginDateMinute', reverseAuctionModel.get('beginDateTime').getMinutes());
                reverseAuctionModel.set('endDateHour',     reverseAuctionModel.get('endDateTime').getHours());
                reverseAuctionModel.set('endDateMinute',   reverseAuctionModel.get('endDateTime').getMinutes());

                vm.set('reverseAuctionData', reverseAuctionModel);


                if(Ext.isEmpty(reverseAuctionModel.get('vendorAttendId'))) {

                    // 역경매 참여 정보 기본 설정 데이터 조회
                    me.findReverseAuctionAttendDataByReverseAuctionId(id);

                } else {
                    var vendorAttendRequestId = reverseAuctionModel.get('vendorAttendId');

                    // 역경매 참여 정보 조회
                    me.findReverseAuctionAttendDataByVendorAttendRequestId(vendorAttendRequestId);

                    // 역경매 제출 현황 조회
                    me.findReverseAuctionRealtimeAttends(vendorAttendRequestId);
                }


                //         if(result.progressState == "AttendProgress" && !me.task.taskRunCount) {
                //             me.task.start();
                //         } else if(result.progressState != "AttendProgress" && me.task.taskRunCount > 0) {
                //             Etna.Message.alert('#{역경매를 종료 하였습니다.}');
                //             me.task.destroy();
                //         }
            }
        }).done();
    },

    /* load data 역경매 참여 정보 조회 */
    findReverseAuctionAttendDataByReverseAuctionId: function(reverseAuctionId) {
        var me = this, vm = this.getViewModel();

        vm.findReverseAuctionAttendDataByReverseAuctionId(reverseAuctionId).then({
            success : function(result) {
                var reverseAuctionAttendModel = Ext.create('bid_sp.model.rfx.ReverseAuctionAttend', result);
                vm.set('reverseAuctionAttendData', reverseAuctionAttendModel);
            }
        }).done();
    },

    /* load data 역경매 참여 정보 조회 */
    findReverseAuctionAttendDataByVendorAttendRequestId: function(vendorAttendRequestId) {
        var me = this, vm = this.getViewModel();

        vm.findReverseAuctionAttendDataByVendorAttendRequestId(vendorAttendRequestId).then({
            success : function(result) {
                var reverseAuctionAttendModel = Ext.create('bid_sp.model.rfx.ReverseAuctionAttend', result);
                vm.set('reverseAuctionAttendData', reverseAuctionAttendModel);
            }
        }).done();
    },

    /* load data 역경매품목 조회 */
    findReverseAuctionItems: function(id) {
        var me = this, vm = this.getViewModel();

        var store = vm.getStore('itemStore');
        store.load({
            params : {
                id : id
            }
        });
    },

    /* load data 역경매현황 조회 */
    findReverseAuctionLowestAttends: function(id) {
        var me = this, vm = this.getViewModel();

        var store = vm.getStore('reverseAuctionLowestAttendStore');
        store.load({
            params : {
                id : id
            }
        });
    },

    findReverseAuctionRealtimeAttends: function(vendorAttendRequestId) {
        var me = this, vm = this.getViewModel();

        var store = vm.getStore('reverseAuctionRealtimeAttendStore');
        store.load({
            params : {
                vendorAttendRequestId : vendorAttendRequestId
            }
        });
    },

    /* 응찰가격 입력확인 */
    compareSubmitPrice: function() {
        var me = this, vm = this.getViewModel();

        var amount = vm.get('reverseAuctionAttendData').get('amount');						// 응찰가격(원)
        var confirmAmount = vm.get('reverseAuctionAttendData').get('confirmAmount');		// 응찰가격확인(원)
        var isSameAmount = vm.get('isSameAmount');											// 확인완료 값(기본값:false)

        if(amount === 0){
            vm.set('isSameAmount', false);
            Etna.Message.alert('#{응찰가격은 0보다 커야합니다.}');
            return;
        }
        if (amount === confirmAmount) {														// 확인완료
            vm.set('isSameAmount', true);
            vm.get('reverseAuctionAttendData').set('changedCheckSubmitPrice', Ext.util.Format.numberWord(amount));
            Etna.Message.alert('#{응찰가격과 응찰가격확인값이 일치합니다.}');
        } else {																			// 확인실패
            vm.set('isSameAmount', false);
            vm.get('reverseAuctionAttendData').set('changedCheckSubmitPrice', null);
            Etna.Message.alert('#{응찰가격과 응찰가격확인값이 일치하지 않습니다.<br>응찰가격과 응찰가격확인값을 확인하세요.}');
        }


    },

    setTimer: function() {
        var me = this;
        var reverseAuctionData = me.getViewModel().get('reverseAuctionData');

        me.lookupReference('currentTime').setValue(new Date());
        me.lookupReference('currentTimeHours').setValue(Ext.Date.format(new Date(), 'H'));
        me.lookupReference('currentTimeMinutes').setValue(Ext.Date.format(new Date(), 'i'));
        me.lookupReference('currentTimeSeconds').setValue(Ext.Date.format(new Date(), 's'));

        var timer = Ext.interval(function() {

            if(me.getView() && !me.getView().hidden){
                var serverTime = Etna.util.Time.getServerTime('Y/m/d H:i:s');
                var now = new Date(serverTime).getTime();
                var future = new Date(reverseAuctionData.get('endDateTime')).getTime();

                //         me.lookupReference('currentTime').setValue('현재시간: ' + serverTime);
                //         me.lookupReference('currentTime').setValue(serverTime);
                me.lookupReference('currentTime').setValue(Etna.util.Time.getServerTime());
                me.lookupReference('currentTimeHours').setValue(Etna.util.Time.getServerTime('H'));
                me.lookupReference('currentTimeMinutes').setValue(Etna.util.Time.getServerTime('i'));
                me.lookupReference('currentTimeSeconds').setValue(Etna.util.Time.getServerTime('s'));


                if(future - now <= 0 || reverseAuctionData.get('progressState') === 'Close' || reverseAuctionData.get('progressState') === 'Final'){
                    var r = '입찰이 마감되었습니다.';
                    me.lookupReference('remTime').setValue(r);
                }else{
                    me.getRemTime(serverTime);
                }
            }

        }, 1000);

        me.getViewModel().set('timer', timer);
    },

    getRemTime: function(nowTime) {
        var me = this;
        var reverseAuctionData = me.getViewModel().get('reverseAuctionData');
        var now = new Date(nowTime).getTime();
        var future = new Date(reverseAuctionData.get('endDateTime')).getTime();

        var far = future-now;

        if(far <= 0 || reverseAuctionData.get('progressState') === 'Close' || reverseAuctionData.get('progressState') === 'Final'){
            var r = '입찰이 마감되었습니다.';
            me.lookupReference('remTime').setValue(r);
        }else{
            var days = Math.floor(far/86400000);
            var mod = far%86400000;
            var hours = Math.floor(mod/3600000);
            mod = mod%3600000;
            var mins = Math.floor(mod/60000);
            mod = mod%60000;

            var sec = mod/1000;

            var r = '입찰이 '+days+'일 '+hours+'시간 '+mins+'분 '+sec+'초 남았습니다.';
            me.lookupReference('remTime').setValue(r);
        }
    },

    callbackKica: function(signInfo) {
        var me = this;
        var vm = me.getViewModel();

        if(signInfo === null ){
            Etna.Message.alert("전자서명에 실패하였습니다. ");
            me.getView().setLoading(false);
        }else{
            // 전자인증 전 투찰가능한 상태인지 확인(DB조회) param1 : 전자인증 후 상태, param2 : 전자인증 후 인증값 : 인증 프로세스로부터 리턴받은 값
            me.preConfirmSubmit('afterElectricSign', signInfo);
        }

    },

    showElectricSign: function() {
        var me = this,
            vm = me.getViewModel(),
            view = me.getView();
        var serverTime = Etna.util.Time.getServerTime('Y/m/d H:i:s');

        var popup 							= me.lookupReference('KicaCertPopRef');
        var reverseAuctionData 				= vm.get('reverseAuctionData');
        var reverseAuctionAttendData 		= vm.get('reverseAuctionAttendData');			// 서명 할 데이터 (업무별로  생성 하여 넣으세요 )
        var signTarget ={};
        signTarget.documentId 				= reverseAuctionData.get('id');    				// 업무 아이디
        signTarget.documentNo               = reverseAuctionData.get('no');					// 업무 번호
        signTarget.documentTypeCode         = 'Bid';  										// 업무구분 (계약:Contract , 입찰:Bid …. 그냥 텍스트임
        signTarget.signerType 				= '1111111119';									// 구매사 : companyId  ,  협력사 :  사업자번호

        // signTarget.ssn       				= Cmmn.User.getData().vendorRegistrationNo;		// 사업자 번호 ,   개인인증 인경우 주민번호를 넣으면 됩니다.
        signTarget.ssn                      = '1111111119';									// 테스트용 인증번호

        signTarget.signType 				= 'SIGN';      									// 일반 서명 : SIGN   암호화 서명 : SIGNANDENV
        signTarget.companyId 				= reverseAuctionData.get('companyId');			// 회사코드
        signTarget.data						= reverseAuctionData.get('id') + ',' 			// 역경매는 실시간 투찰정보조회가 가능하기에 암호화할 데이터가 없음
                                              + reverseAuctionData.get('no') + ','
                                              + reverseAuctionData.get('name') + ','
                                              + reverseAuctionAttendData.get('amount') +','
                                              + serverTime;
        popup.center();
        popup.show();
        popup.initCert(signTarget);

    },

    /* 갱신 버튼 click event */
    onRefreshButtonClick: function(button, e, eOpts) {
        var me = this, vm = this.getViewModel();

        me.getView().setLoading(true);

        var reverseAuctionId = vm.get('reverseAuctionData').get('id');

        me.findReverseAuctionData(reverseAuctionId);          // 역경매 정보 조회
        me.findReverseAuctionLowestAttends(reverseAuctionId); // 역경매 최저가 현황 조회

        Etna.onDone(function() {
            me.getView().setLoading(false);
        });
    },

    /* 닫기 버튼 click event */
    onCloseButtonClick: function(button, e, eOpts) {
        var me = this;

        me.clearData();
        me.getView().fireEvent('closeDetail');
    },

    onEtnatogglefieldChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        me.getViewModel().set('reverseAuctionData.addItionalTaxYn', newValue);
    },

    onSubmitButtonClick: function(button, e, eOpts) {
        var me = this, vm = this.getViewModel();
        var amount = vm.get('reverseAuctionAttendData').get('amount');						// 응찰가격(원)
        var confirmAmount = vm.get('reverseAuctionAttendData').get('confirmAmount');		// 응찰가격확인(원)
        var isSameAmount = vm.get('isSameAmount');											// 확인완료 값(기본값:false)

        // 응찰가격(원)과 응찰가격확인(원)을 비교하지 않았거나 다르게 입력하였을 경우
        if(!isSameAmount){
            Etna.Message.alert('#{응찰가격과 응찰가격확인값이 변경되었거나 입력 후 확인버튼을 누르지 않았습니다.<br>응찰가격과 응찰가격확인값을 입력후 확인버튼을 누르세요.}');
            vm.set('isSameAmount', false);
            return;
        }
        // 응찰가격(원)과 응찰가격확인(원)을 비교하여 확인 완료 후 값이 변경되었을 경우
        if(isSameAmount && amount !== confirmAmount ){
            Etna.Message.alert('#{응찰가격과 응찰가격확인값이 변경되었습니다.<br>응찰가격과 응찰가격확인값을 다시 입력 후 확인버튼을 누르세요.}');
            vm.set('isSameAmount', false);
            return;
        }

        if(me.submitValidator()) {
            Etna.Message.confirm('#{제출 하시겠습니까?}', function(confirm) {
            if(confirm == 'yes') {
                // 전자인증 전 투찰가능한 상태인지 확인(DB조회) param1 : 전자인증 전상태, param2 : 전자인증 후 인증값 : 현재는 인증 전이라 null 로 보냄
                me.preConfirmSubmit('beforeElectricSign', null);
            }
        });
    }
    },

    onNumberfieldChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = me.getViewModel();

        vm.set('isSameAmount', false);
    },

    onCheckAmountButtonClick: function(button, e, eOpts) {
        var me = this;

        me.compareSubmitPrice();
    },

    onWindowClose: function(panel, eOpts) {
        var me = this;

        me.task.destroy();
    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this;

        me.getView().setLoading(true);
    }

});

/*
 * File: app/view/reverseauction/progress/ReverseAuctionChart.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.progress.ReverseAuctionChart', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reverseauctionprogressreverseauctionchart',

               
                                                                           
                                                                                
                              
                               
                             
                            
                         
                                  
                                 
                                 
                                  
                                     
                            
                              
                                
                                   
                              
                                
                         
                                 
                               
                        
                                  
                                 
                                   
                                   
      

    controller: 'vendorrfx.reverseauctionchart',
    viewModel: {
        type: 'vendorrfx.reverseauctionchart'
    },
    autoScroll: true,
    ui: 'main',
    title: '#{역경매 투찰}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'page',
            items: [
                {
                    xtype: 'tbtext',
                    text: '#{역경매 내역을 조회한 후 가격을 제출합니다.}'
                },
                {
                    xtype: 'tbspacer',
                    flex: 1
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-refresh',
                    text: '#{갱신}',
                    bind: {
                        hidden: '{!isAttendProgress}'
                    },
                    listeners: {
                        click: 'onRefreshButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseButtonClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'form',
            margin: '0 0 5 0',
            ui: 'table',
            bodyPadding: 10,
            title: '#{역경매정보}',
            fieldDefaults: {
                labelWidth: 110
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            items: [
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{회사이름}',
                    readOnly: true,
                    editable: false,
                    bind: {
                        value: '{reverseAuctionData.operatingUnitName}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    width: 300,
                    fieldLabel: '#{공고번호/차수}',
                    layout: {
                        type: 'table',
                        columns: 3
                    },
                    items: [
                        {
                            xtype: 'textfield',
                            width: 130,
                            readOnly: true,
                            bind: {
                                value: '{reverseAuctionData.no}'
                            }
                        },
                        {
                            xtype: 'displayfield',
                            margin: '0 5',
                            value: '/'
                        },
                        {
                            xtype: 'textfield',
                            width: 40,
                            fieldStyle: 'text-align: center;',
                            readOnly: true,
                            bind: {
                                value: '{reverseAuctionData.noticeRevision}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{공고명}',
                    readOnly: true,
                    bind: {
                        value: '{reverseAuctionData.name}'
                    }
                },
                {
                    xtype: 'textfield',
                    hidden: true,
                    width: 300,
                    fieldLabel: '#{역경매구분}',
                    readOnly: true,
                    editable: false,
                    bind: {
                        value: '{reverseAuctionData.reverseauctionType}'
                    }
                },
                {
                    xtype: 'etnatogglefield',
                    fieldLabel: '#{부가세포함여부}',
                    readOnly: true,
                    onText: '#{포함}',
                    offText: '#{미포함}',
                    onValue: true,
                    offValue: false,
                    scale: 'small',
                    bind: {
                        value: '{reverseAuctionData.addItionalTaxYn}'
                    },
                    listeners: {
                        change: 'onEtnatogglefieldChange'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{계약서발행여부}',
                    readOnly: true,
                    editable: false,
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{reverseAuctionData.contractIssueYn}',
                        store: '{contractIssueStore}'
                    }
                },
                {
                    xtype: 'textfield',
                    colspan: 2,
                    width: 300,
                    fieldLabel: '#{보증금납부방식}',
                    readOnly: true,
                    editable: false
                },
                {
                    xtype: 'fieldcontainer',
                    colspan: 2,
                    width: '100%',
                    layout: {
                        type: 'table',
                        columns: 2,
                        tableAttrs: {
                            style: {
                                width: '100%'
                            }
                        },
                        tdAttrs: {
                            style: {
                                width: '50%'
                            }
                        }
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            width: 300,
                            fieldLabel: '#{지역제한}',
                            readOnly: true,
                            editable: false,
                            queryMode: 'local',
                            valueField: 'id',
                            bind: {
                                hidden: '{isAreaLimit}',
                                value: '{reverseAuctionData.restrictAreaCode}',
                                store: '{areaLimitReverseStore}'
                            }
                        },
                        {
                            xtype: 'textfield',
                            width: 300,
                            fieldLabel: '#{지역제한}',
                            readOnly: true,
                            editable: false,
                            bind: {
                                hidden: '{!isAreaLimit}',
                                value: '{reverseAuctionData.restrictArea}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'etnaattachmentfield',
                    colspan: 2,
                    width: '100%',
                    fieldLabel: '#{첨부파일}',
                    readOnly: true,
                    autoLoad: true,
                    bind: {
                        value: '{reverseAuctionData.attachFileGroupId}'
                    }
                },
                {
                    xtype: 'fieldset',
                    colspan: 2,
                    fieldDefaults: {
                        labelWidth: 100
                    },
                    title: '#{역경매기간}',
                    layout: {
                        type: 'table',
                        columns: 2,
                        tdAttrs: {
                            style: {
                                width: '50%'
                            }
                        }
                    },
                    items: [
                        {
                            xtype: 'fieldcontainer',
                            fieldLabel: '#{시작일시}',
                            layout: {
                                type: 'table',
                                columns: 5
                            },
                            items: [
                                {
                                    xtype: 'datefield',
                                    width: 100,
                                    fieldStyle: 'text-align: right;',
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.beginDateTime}'
                                    }
                                },
                                {
                                    xtype: 'numberfield',
                                    margin: '0 5',
                                    width: 40,
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.beginDateHour}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    value: '#{시}'
                                },
                                {
                                    xtype: 'numberfield',
                                    margin: '0 5',
                                    width: 40,
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.beginDateMinute}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    value: '#{분}'
                                }
                            ]
                        },
                        {
                            xtype: 'fieldcontainer',
                            fieldLabel: '#{종료일시}',
                            labelWidth: 115,
                            layout: {
                                type: 'table',
                                columns: 5
                            },
                            items: [
                                {
                                    xtype: 'datefield',
                                    width: 100,
                                    fieldStyle: 'text-align: right;',
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.endDateTime}'
                                    }
                                },
                                {
                                    xtype: 'numberfield',
                                    margin: '0 5',
                                    width: 40,
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.endDateHour}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    value: '#{시}'
                                },
                                {
                                    xtype: 'numberfield',
                                    margin: '0 5',
                                    width: 40,
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.endDateMinute}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    value: '#{분}'
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'fieldset',
                    colspan: 2,
                    fieldDefaults: {
                        labelWidth: 100
                    },
                    collapsible: true,
                    title: '#{목표가격정보}',
                    layout: {
                        type: 'table',
                        columns: 2,
                        tdAttrs: {
                            style: {
                                width: '50%'
                            }
                        }
                    },
                    items: [
                        {
                            xtype: 'numberfield',
                            coverFormat: '0,000',
                            width: 250,
                            fieldLabel: '#{시작가격}',
                            fieldStyle: 'text-align: right;',
                            readOnly: true,
                            bind: {
                                value: '{reverseAuctionData.initPrice}'
                            }
                        },
                        {
                            xtype: 'numberfield',
                            coverFormat: '0,000',
                            width: 265,
                            fieldLabel: '#{입찰단위금액}',
                            labelWidth: 115,
                            fieldStyle: 'text-align: right;',
                            readOnly: true,
                            editable: false,
                            bind: {
                                value: '{reverseAuctionData.minimumPriceUnit}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'fieldset',
                    colspan: 2,
                    collapsible: true,
                    title: '#{마감시간연장}',
                    layout: {
                        type: 'table',
                        tdAttrs: {
                            style: {
                                width: '50%'
                            }
                        }
                    },
                    bind: {
                        hidden: '{!isAutoExtension}'
                    },
                    items: [
                        {
                            xtype: 'displayfield',
                            bind: {
                                value: '{autoExtensionText}'
                            }
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'form',
            margin: '0 0 5 0',
            ui: 'table',
            title: '#{역경매입찰정보}',
            fieldDefaults: {
                labelWidth: 110
            },
            layout: {
                type: 'table',
                columns: 1,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            items: [
                {
                    xtype: 'numberfield',
                    coverFormat: '0,000',
                    width: 260,
                    fieldLabel: '#{현재최저입찰가}',
                    fieldStyle: 'text-align: right;',
                    readOnly: true,
                    bind: {
                        value: '{reverseAuctionData.currentLowestAmount}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    fieldLabel: '#{현재시간}',
                    labelWidth: 105,
                    layout: {
                        type: 'table',
                        columns: 7
                    },
                    items: [
                        {
                            xtype: 'datefield',
                            reference: 'currentTime',
                            margin: '0 0 0 5',
                            width: 100,
                            fieldStyle: 'text-align: right;',
                            readOnly: true
                        },
                        {
                            xtype: 'numberfield',
                            reference: 'currentTimeHours',
                            margin: '0 5',
                            width: 40,
                            readOnly: true
                        },
                        {
                            xtype: 'displayfield',
                            value: '#{시}'
                        },
                        {
                            xtype: 'numberfield',
                            reference: 'currentTimeMinutes',
                            margin: '0 5',
                            width: 40,
                            readOnly: true
                        },
                        {
                            xtype: 'displayfield',
                            value: '#{분}'
                        },
                        {
                            xtype: 'numberfield',
                            reference: 'currentTimeSeconds',
                            margin: '0 5',
                            width: 40,
                            readOnly: true
                        },
                        {
                            xtype: 'displayfield',
                            value: '#{초}'
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    reference: 'remTime',
                    width: '100%',
                    fieldLabel: '#{잔여시간}',
                    fieldStyle: 'color: red; font-weight: bold;',
                    readOnly: true
                }
            ]
        },
        {
            xtype: 'cartesian',
            reference: 'chartPanel',
            height: 300,
            margin: '0 0 5 0',
            ui: 'form',
            bodyBorder: true,
            collapsible: false,
            title: '#{역경매현황}',
            colors: [
                '#115fa6',
                '#94ae0a',
                '#a61120',
                '#ff8809',
                '#ffd13e',
                '#a61187',
                '#24ad9a',
                '#7c7474',
                '#a66111'
            ],
            insetPadding: {
                top: 20,
                left: 20,
                right: 20,
                bottom: 10
            },
            innerPadding: {
                top: 10,
                left: 30,
                right: 30,
                bottom: 10
            },
            bind: {
                store: '{reverseAuctionLowestAttendStore}'
            },
            axes: [
                {
                    type: 'time',
                    fields: [
                        'dateTime'
                    ],
                    label: {
                        rotate: {
                            degrees: -10
                        }
                    },
                    dateFormat: 'Y/m/d H:i',
                    position: 'bottom'
                },
                {
                    type: 'numeric',
                    renderer: function(label, layout, lastLabel) {
                        return Ext.util.Format.number(label, '0,000');
                    },
                    grid: {
                        odd: {
                            fill: '#e8e8e8'
                        }
                    },
                    position: 'left'
                }
            ],
            series: [
                {
                    type: 'line',
                    colors: [
                        '#115fa6',
                        '#94ae0a',
                        '#a61120',
                        '#ff8809',
                        '#ffd13e',
                        '#a61187',
                        '#24ad9a',
                        '#7c7474',
                        '#a66111'
                    ],
                    highlight: {
                        fillStyle: '#000',
                        radius: 5,
                        lineWidth: 2,
                        strokeStyle: '#fff'
                    },
                    marker: {
                        radius: 4
                    },
                    tooltip: {
                        trackMouse: true,
                        renderer: function(storeItem, item) {
                            var me = this;
                            me.setHtml(Ext.util.Format.number(storeItem.get('amount'), '0,000'));
                        }
                    },
                    xField: 'dateTime',
                    yField: [
                        'amount'
                    ]
                }
            ]
        },
        {
            xtype: 'form',
            margin: '0 0 5 0',
            ui: 'table',
            title: '#{응찰내역}',
            fieldDefaults: {
                labelWidth: 130
            },
            layout: {
                type: 'table',
                columns: 1
            },
            bind: {
                hidden: '{!isAttendProgress}'
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    ui: 'grid',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'btn-request',
                            text: '#{가격제출}',
                            listeners: {
                                click: 'onSubmitButtonClick'
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'fieldcontainer',
                    ui: 'table',
                    width: 480,
                    layout: {
                        type: 'table',
                        columns: 2
                    },
                    items: [
                        {
                            xtype: 'numberfield',
                            coverFormat: '0,000',
                            margin: '0 0 5 0',
                            width: 350,
                            fieldLabel: '#{응찰가격(원)}',
                            fieldStyle: 'text-align: right;',
                            enforceMaxLength: true,
                            hideTrigger: true,
                            maxLength: 12,
                            selectOnFocus: true,
                            autoStripChars: true,
                            maxValue: 999999999999,
                            bind: {
                                value: '{reverseAuctionAttendData.amount}'
                            },
                            listeners: {
                                change: 'onNumberfieldChange'
                            }
                        },
                        {
                            xtype: 'button',
                            rowspan: 2,
                            height: 50,
                            margin: '0 0 0 5',
                            width: 70,
                            text: '#{확인}',
                            listeners: {
                                click: 'onCheckAmountButtonClick'
                            }
                        },
                        {
                            xtype: 'numberfield',
                            coverFormat: '0,000',
                            width: 350,
                            fieldLabel: '#{응찰가격확인(원)}',
                            fieldStyle: 'text-align: right;',
                            enforceMaxLength: true,
                            hideTrigger: true,
                            maxLength: 12,
                            selectOnFocus: true,
                            autoStripChars: true,
                            maxValue: 999999999999,
                            bind: {
                                value: '{reverseAuctionAttendData.confirmAmount}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    colspan: 2,
                    width: 500,
                    fieldLabel: '#{응찰가격(원)}',
                    readOnly: true,
                    bind: {
                        value: '{reverseAuctionAttendData.changedCheckSubmitPrice}'
                    }
                }
            ]
        },
        {
            xtype: 'gridpanel',
            reference: 'rfxItemAttendGrid',
            stateId: '1f4a38d3-d142-495b-e054-0017a4770c10',
            stateful: true,
            height: 250,
            margin: '0 0 5 0',
            minHeight: 150,
            ui: 'grid',
            title: '#{품목정보}',
            bind: {
                hidden: '{isDirectInput}',
                store: '{itemStore}'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'itemName',
                    text: '#{품목명}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 160,
                    dataIndex: 'itemSpec',
                    text: '#{규격}'
                },
                {
                    xtype: 'numbercolumn',
                    width: 80,
                    align: 'right',
                    dataIndex: 'quantity',
                    text: '#{수량}',
                    format: '0,000'
                },
                {
                    xtype: 'gridcolumn',
                    width: 80,
                    align: 'center',
                    dataIndex: 'itemUnit',
                    text: '#{단위}'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'deliveryLocation',
                    text: '#{납품장소}'
                },
                {
                    xtype: 'datecolumn',
                    width: 130,
                    align: 'center',
                    dataIndex: 'deliveryDueDate',
                    text: '#{납품일자}',
                    format: 'Y/m/d H:i'
                }
            ],
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                }
            ]
        },
        {
            xtype: 'form',
            reference: 'itemAttachForm',
            margin: '0 0 5 0',
            ui: 'table',
            layout: 'table',
            bodyPadding: 10,
            title: '#{입찰품목 첨부파일}',
            bind: {
                hidden: '{!isDirectInput}'
            },
            items: [
                {
                    xtype: 'etnaattachmentfield',
                    width: '100%',
                    readOnly: true,
                    autoLoad: true,
                    multiSelection: false,
                    loadMask: false,
                    bind: {
                        value: '{reverseAuctionData.itemAttachFileGroupId}'
                    }
                }
            ]
        },
        {
            xtype: 'gridpanel',
            stateId: '1f4a38d3-d143-495b-e054-0017a4770c10',
            stateful: true,
            height: 250,
            minHeight: 150,
            ui: 'grid',
            title: '#{역경매가격제출이력}',
            bind: {
                store: '{reverseAuctionRealtimeAttendStore}'
            },
            columns: [
                {
                    xtype: 'numbercolumn',
                    width: 100,
                    align: 'center',
                    dataIndex: 'submitNo',
                    text: '#{번호}',
                    format: '0,000'
                },
                {
                    xtype: 'numbercolumn',
                    width: 150,
                    align: 'right',
                    dataIndex: 'amount',
                    text: '#{제출금액}',
                    format: '0,000'
                },
                {
                    xtype: 'datecolumn',
                    width: 200,
                    align: 'center',
                    dataIndex: 'dateTime',
                    text: '#{제출일시}',
                    format: 'Y/m/d H:i'
                }
            ],
            viewConfig: {
                autoScroll: false
            },
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                }
            ]
        }
    ],
    listeners: {
        close: 'onWindowClose',
        afterrender: 'onPanelAfterRender'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processReverseauctionprogressReverseAuctionChart(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processReverseauctionprogressReverseAuctionChart: function(config) {
        var me = this,
            items = me.items || config.items;

        items.push (
            {
                xclass : 'CmmnMdi.view.mdi.KicaSignPop',
                reference : 'KicaCertPopRef',
                lazy : true,
                modal : true,
                draggable : true,
                floating : true,
                closable : false,
                closeAction : 'hide',
                listeners: {
                    showLoginPopup : 'callbackKica'
                }
            }
        );

    }

});

/*
 * File: app/view/reverseauction/progress/ReverseAuctionDetailViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.progress.ReverseAuctionDetailViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.reverseauctionprogressreverseauctiondetail',

               
                                   
                                
                               
                                
                          
                               
                          
                                         
                                   
                                        
      

    data: {
        reverseAuctionData: null,
        isSameAmount: false,
        timer: ''
    },

    stores: {
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        minimumPriceUnitStore: {
            groupCode: 'MinimumPriceUnit',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        itemStore: {
            model: 'bid_sp.model.rfx.RfxItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionChartController.getReverseAuctionItems',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        contractIssueStore: {
            data: [
                {
                    text: '발행',
                    value: true
                },
                {
                    text: '발행안함',
                    value: false
                }
            ],
            fields: [
                {
                    name: 'text'
                },
                {
                    name: 'value'
                }
            ]
        },
        areaLimitReverseStore: {
            groupCode: 'AreaLimitReverse',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        warrantyPayMethodStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.WarrantyPayMethodKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        progressStore: {
            model: 'bid_sp.model.bid.ProgressState',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findProgressStateSPList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        }
    },
    formulas: {
        isDirectInput: {
            get: function(data) {
                if(data === 'DirectInput'){
                    return false;
                }else if (data === 'FileAttach'){
                    return true;
                }
            },
            bind: '{reverseAuctionData.itemInfoInputType}'
        },
        isAreaLimit: {
            get: function(data) {
                if(data === '01') {
                    return true;
                } else {
                    return false;
                }
            },
            bind: '{reverseAuctionData.restrictAreaCode}'
        }
    },

    /* 역경매정보 조회 */
    findReverseAuctionData: function(id) {
        var me = this;
        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionChartController.findReverseAuctionData(id, function(result,e){
            if(e.status) {
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });
        return deferred.promise;
    }

});

/*
 * File: app/view/reverseauction/progress/ReverseAuctionDetailViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.progress.ReverseAuctionDetailViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.reverseauctionprogressreverseauctiondetail',

    /* init */
    init: function() {
        var me = this;

        me.getView().loadData = Ext.Function.bind(me.loadData, me);
        me.getView().setHiddenKepcoPanel = Ext.Function.bind(me.setHiddenKepcoPanel, me);
        // // TODO
        // Etna.onDone(function() {
        //     me.runner = new Ext.util.TaskRunner();
        //     me.task = me.runner.newTask({
        //         run : function () {
        //             me.refreshReverseAuction();
        //         },
        //         interval: 6000
        //     });
        // });
    },

    /* clear data */
    clearData: function() {
        var me = this;
        var vm = me.getViewModel();

        clearInterval(me.getViewModel().get('timer'));
        me.getViewModel().set('timer', '');
        vm.set('reverseAuctionData',       Ext.create('bid_sp.model.rfx.ReverseAuction'));
        vm.set('isSameAmount', false);

        vm.getStore('itemStore').removeAll();

        // me.task.destroy();
    },

    /* load data */
    loadData: function(reverseAuctionId, vendorAttendRequestId) {
        var me = this, vm = this.getViewModel();

        me.getView().setLoading(true);

        me.findProgressState(reverseAuctionId);				  // 역경매 work flow 조회
        me.findReverseAuctionData(reverseAuctionId);          // 역경매 정보 조회
        me.findReverseAuctionItems(reverseAuctionId);         // 역경매 품목 조회

        Etna.onDone(function(){
            me.getView().setLoading(false);
        });
    },

    /* load data 역경매정보 조회 */
    findReverseAuctionData: function(id) {
        var me = this, vm = this.getViewModel();

        vm.findReverseAuctionData(id).then({
            success : function(result) {
                var reverseAuctionModel = Ext.create('bid_sp.model.rfx.ReverseAuction', result);

                reverseAuctionModel.set('beginDateHour',   reverseAuctionModel.get('beginDateTime').getHours());
                reverseAuctionModel.set('beginDateMinute', reverseAuctionModel.get('beginDateTime').getMinutes());
                reverseAuctionModel.set('endDateHour',     reverseAuctionModel.get('endDateTime').getHours());
                reverseAuctionModel.set('endDateMinute',   reverseAuctionModel.get('endDateTime').getMinutes());

                vm.set('reverseAuctionData', reverseAuctionModel);


                //         if(result.progressState == "AttendProgress" && !me.task.taskRunCount) {
                //             me.task.start();
                //         } else if(result.progressState != "AttendProgress" && me.task.taskRunCount > 0) {
                //             Etna.Message.alert('#{역경매를 종료 하였습니다.}');
                //             me.task.destroy();
                //         }
            }
        }).done();
    },

    /* load data 역경매품목 조회 */
    findReverseAuctionItems: function(id) {
        var me = this, vm = this.getViewModel();

        var store = vm.getStore('itemStore');
        store.load({
            params : {
                id : id
            }
        });
    },

    findProgressState: function(id) {
        var me = this, vm = me.getViewModel();
        var progressStore = vm.getStore('progressStore');

        progressStore.load({
            params:{
                bidId : id
            }
        });
    },

    setHiddenKepcoPanel: function(value) {
        var me = this;
        me.lookupReference('kepcopanel').setHidden(value);
    },

    /* 닫기 버튼 click event */
    onCloseButtonClick: function(button, e, eOpts) {
        var me = this;

        me.clearData();
        me.getView().fireEvent('closeDetail');
    },

    onContainerItemClick: function(item) {
        var me = this;
        if(item.urlLink !== 'none'){ //tabUrl이 있는 경우
            var classPath = item.urlLink;

            //modal로 뜨도록 수정 (통테이후 반영예정)
            var popup = Ext.create(classPath, {
                floating : true,
                modal:true,
                title : item.tabTitle,
                bidNo : item.paramNo,
                noticeDate : item.paramNoticeDate,
                companyId : item.companyId,
                width:1024,
                height:768,
                resizable:true,
                draggable:true
            });

            popup.show();
            popup.center();

            //------------------------------------------------------------------tab으로 뜨도록
            //     if (MdiManager.hasView(classPath)) { //기존에 tab이 띄워져있으면 닫음
            //         var view = MdiManager.mdiTab.down(Ext.String.format('>[classpath='+classPath+']'));
            //         MdiManager.mdiTab.remove(view,true);
            //     }
            //     MdiManager.addViewToTab(classPath, { //tab 띄움
            //         title: item.tabTitle,
            //         authKey:  item.menuCode,
            //         bidNo : item.paramNo,
            //         noticeDate : item.paramNoticeDate,
            //         companyId : item.companyId
            //     }, classPath);
        }else if(item.notiMsg !== 'none'){ //화면을 보여주는 것 보다 alert창을 띄워야 하는 경우
            Etna.Message.alert(item.notiMsg);
        }
    },

    onEtnatogglefieldChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        me.getViewModel().set('reverseAuctionData.additionalTaxYn', newValue);
    },

    onWindowClose: function(panel, eOpts) {
        var me = this;

        me.task.destroy();
    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this;

        me.getView().setLoading(true);
    }

});

/*
 * File: app/view/reverseauction/progress/ReverseAuctionDetail.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.progress.ReverseAuctionDetail', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reverseauctionprogressreverseauctiondetail',

               
                                                                            
                                                                                 
                              
                               
                             
                            
                         
                                  
                                 
                                 
                                  
                                     
                            
                              
                                
                         
                                 
                               
                        
                                  
                                 
                                   
                                   
      

    controller: 'reverseauctionprogressreverseauctiondetail',
    viewModel: {
        type: 'reverseauctionprogressreverseauctiondetail'
    },
    autoScroll: true,
    ui: 'main',
    title: '#{역경매 상세}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'page',
            items: [
                {
                    xtype: 'tbtext',
                    text: '#{역경매 내역을 조회합니다.}'
                },
                {
                    xtype: 'tbspacer',
                    flex: 1
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseButtonClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'kepcopanel',
            collapsible: true,
            reference: 'kepcopanel',
            height: 150,
            bind: {
                store: '{progressStore}'
            },
            listeners: {
                itemClick: 'onContainerItemClick'
            }
        },
        {
            xtype: 'form',
            margin: '0 0 5 0',
            ui: 'table',
            bodyPadding: 10,
            title: '#{역경매정보}',
            fieldDefaults: {
                labelWidth: 110
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            items: [
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{회사이름}',
                    readOnly: true,
                    editable: false,
                    bind: {
                        value: '{reverseAuctionData.operatingUnitName}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    width: 300,
                    fieldLabel: '#{공고번호/차수}',
                    layout: {
                        type: 'table',
                        columns: 3
                    },
                    items: [
                        {
                            xtype: 'textfield',
                            width: 130,
                            readOnly: true,
                            bind: {
                                value: '{reverseAuctionData.no}'
                            }
                        },
                        {
                            xtype: 'displayfield',
                            margin: '0 5',
                            value: '/'
                        },
                        {
                            xtype: 'textfield',
                            width: 40,
                            fieldStyle: 'text-align: center;',
                            readOnly: true,
                            bind: {
                                value: '{reverseAuctionData.noticeRevision}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{공고명}',
                    readOnly: true,
                    bind: {
                        value: '{reverseAuctionData.name}'
                    }
                },
                {
                    xtype: 'textfield',
                    hidden: true,
                    width: 300,
                    fieldLabel: '#{역경매구분}',
                    readOnly: true,
                    editable: false,
                    bind: {
                        value: '{reverseAuctionData.reverseauctionType}'
                    }
                },
                {
                    xtype: 'etnatogglefield',
                    fieldLabel: '#{부가세포함여부}',
                    readOnly: true,
                    onText: '#{포함}',
                    offText: '#{미포함}',
                    onValue: true,
                    offValue: false,
                    scale: 'small',
                    bind: {
                        value: '{reverseAuctionData.additionalTaxYn}'
                    },
                    listeners: {
                        change: 'onEtnatogglefieldChange'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{계약서발행여부}',
                    readOnly: true,
                    editable: false,
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{reverseAuctionData.contractIssueYn}',
                        store: '{contractIssueStore}'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{보증금납부방식}',
                    readOnly: true,
                    editable: false,
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{reverseAuctionData.warrantyPayMethod}',
                        store: '{warrantyPayMethodStore}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    colspan: 2,
                    width: '100%',
                    layout: {
                        type: 'table',
                        columns: 2,
                        tableAttrs: {
                            style: {
                                width: '100%'
                            }
                        },
                        tdAttrs: {
                            style: {
                                width: '50%'
                            }
                        }
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            width: 300,
                            fieldLabel: '#{지역제한}',
                            readOnly: true,
                            editable: false,
                            queryMode: 'local',
                            valueField: 'id',
                            bind: {
                                hidden: '{isAreaLimit}',
                                value: '{reverseAuctionData.restrictAreaCode}',
                                store: '{areaLimitReverseStore}'
                            }
                        },
                        {
                            xtype: 'textfield',
                            width: 300,
                            fieldLabel: '#{지역제한}',
                            readOnly: true,
                            editable: false,
                            bind: {
                                hidden: '{!isAreaLimit}',
                                value: '{reverseAuctionData.restrictArea}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'etnaattachmentfield',
                    colspan: 2,
                    width: '100%',
                    fieldLabel: '#{첨부파일}',
                    readOnly: true,
                    autoLoad: true,
                    bind: {
                        value: '{reverseAuctionData.attachFileGroupId}'
                    }
                },
                {
                    xtype: 'fieldset',
                    colspan: 2,
                    fieldDefaults: {
                        labelWidth: 100
                    },
                    title: '#{역경매기간}',
                    layout: {
                        type: 'table',
                        columns: 2,
                        tdAttrs: {
                            style: {
                                width: '50%'
                            }
                        }
                    },
                    items: [
                        {
                            xtype: 'fieldcontainer',
                            fieldLabel: '#{시작일시}',
                            layout: {
                                type: 'table',
                                columns: 5
                            },
                            items: [
                                {
                                    xtype: 'datefield',
                                    width: 100,
                                    fieldStyle: 'text-align: right;',
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.beginDateTime}'
                                    }
                                },
                                {
                                    xtype: 'numberfield',
                                    margin: '0 5',
                                    width: 40,
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.beginDateHour}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    value: '#{시}'
                                },
                                {
                                    xtype: 'numberfield',
                                    margin: '0 5',
                                    width: 40,
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.beginDateMinute}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    value: '#{분}'
                                }
                            ]
                        },
                        {
                            xtype: 'fieldcontainer',
                            fieldLabel: '#{종료일시}',
                            labelWidth: 115,
                            layout: {
                                type: 'table',
                                columns: 5
                            },
                            items: [
                                {
                                    xtype: 'datefield',
                                    width: 100,
                                    fieldStyle: 'text-align: right;',
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.endDateTime}'
                                    }
                                },
                                {
                                    xtype: 'numberfield',
                                    margin: '0 5',
                                    width: 40,
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.endDateHour}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    value: '#{시}'
                                },
                                {
                                    xtype: 'numberfield',
                                    margin: '0 5',
                                    width: 40,
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.endDateMinute}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    value: '#{분}'
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'fieldset',
                    colspan: 2,
                    fieldDefaults: {
                        labelWidth: 100
                    },
                    collapsible: true,
                    title: '#{목표가격정보}',
                    layout: {
                        type: 'table',
                        columns: 2,
                        tdAttrs: {
                            style: {
                                width: '50%'
                            }
                        }
                    },
                    items: [
                        {
                            xtype: 'numberfield',
                            coverFormat: '0,000',
                            width: 250,
                            fieldLabel: '#{시작가격}',
                            fieldStyle: 'text-align: right;',
                            readOnly: true,
                            bind: {
                                value: '{reverseAuctionData.initPrice}'
                            }
                        },
                        {
                            xtype: 'numberfield',
                            coverFormat: '0,000',
                            width: 265,
                            fieldLabel: '#{입찰단위금액}',
                            labelWidth: 115,
                            fieldStyle: 'text-align: right;',
                            readOnly: true,
                            editable: false,
                            bind: {
                                value: '{reverseAuctionData.minimumPriceUnit}'
                            }
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'gridpanel',
            reference: 'rfxItemAttendGrid',
            stateId: '1f4a38d3-d144-495b-e054-0017a4770c10',
            stateful: true,
            height: 250,
            margin: '0 0 5 0',
            minHeight: 150,
            ui: 'grid',
            title: '#{품목정보}',
            bind: {
                hidden: '{isDirectInput}',
                store: '{itemStore}'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'itemName',
                    text: '#{품목명}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 160,
                    dataIndex: 'itemSpec',
                    text: '#{규격}'
                },
                {
                    xtype: 'numbercolumn',
                    width: 80,
                    align: 'right',
                    dataIndex: 'quantity',
                    text: '#{수량}',
                    format: '0,000'
                },
                {
                    xtype: 'gridcolumn',
                    width: 80,
                    align: 'center',
                    dataIndex: 'itemUnit',
                    text: '#{단위}'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'deliveryLocation',
                    text: '#{납품장소}'
                },
                {
                    xtype: 'datecolumn',
                    width: 130,
                    align: 'center',
                    dataIndex: 'deliveryDueDate',
                    text: '#{납품일자}',
                    format: 'Y/m/d H:i'
                }
            ],
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                }
            ]
        },
        {
            xtype: 'form',
            reference: 'itemAttachForm',
            ui: 'table',
            layout: 'table',
            bodyPadding: 10,
            title: '#{입찰품목 첨부파일}',
            bind: {
                hidden: '{!isDirectInput}'
            },
            items: [
                {
                    xtype: 'etnaattachmentfield',
                    width: '100%',
                    readOnly: true,
                    autoLoad: true,
                    multiSelection: false,
                    loadMask: false,
                    bind: {
                        value: '{reverseAuctionData.itemAttachFileGroupId}'
                    }
                }
            ]
        }
    ],
    listeners: {
        close: 'onWindowClose',
        afterrender: 'onPanelAfterRender'
    }

});

/*
 * File: app/view/reverseauction/attend/ReverseAuctionResultDetailViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.attend.ReverseAuctionResultDetailViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.reverseauctionattendreverseauctionresultdetail',

               
                                   
                                
                               
                                
                          
                               
                                         
                                                        
                                                      
                                   
                                                
                                        
      

    data: {
        reverseAuctionData: null,
        reverseAuctionAttendData: null,
        isSameAmount: false,
        timer: ''
    },

    stores: {
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        reverseAuctionAttendResultStore: {
            model: 'bid_sp.model.rfx.ReverseAuctionAttend',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionResultListController.findSelectedReverseAuctionAttends',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        minimumPriceUnitStore: {
            groupCode: 'MinimumPriceUnit',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        itemStore: {
            model: 'bid_sp.model.rfx.RfxItem',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionChartController.getReverseAuctionItems',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        contractIssueStore: {
            data: [
                {
                    text: '발행',
                    value: true
                },
                {
                    text: '발행안함',
                    value: false
                }
            ],
            fields: [
                {
                    name: 'text'
                },
                {
                    name: 'value'
                }
            ]
        },
        areaLimitReverseStore: {
            groupCode: 'AreaLimitReverse',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        progressStore: {
            model: 'bid_sp.model.bid.ProgressState',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.BidDetailController.findProgressStateSPList',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        }
    },
    formulas: {
        autoExtensionText: {
            get: function(data) {
                if(data && data == 1){ 		// 자동연장
                    return Ext.String.format('#{{0}}', '이 공고는 마감 5분이내 응찰 시 경매마감시간이 5분이 더해져 자동으로 연장됩니다.');
                }else{		// 연장안함
                    return Ext.String.format('#{{0}}', '이 공고는 마감 5분이내 응찰해도 경매마감시간이 변하지 않습니다.');
                }
            },
            bind: '{reverseAuctionData.autoExtensionYn}'
        },
        isDirectInput: {
            get: function(data) {
                if(data === 'DirectInput'){
                    return false;
                }else if (data === 'FileAttach'){
                    return true;
                }
            },
            bind: '{reverseAuctionData.itemInfoInputType}'
        },
        isAreaLimit: {
            get: function(data) {
                if(data === '01') {
                    return true;
                } else {
                    return false;
                }
            },
            bind: '{reverseAuctionData.restrictAreaCode}'
        }
    },

    /* 역경매정보 조회 */
    findReverseAuctionData: function(id) {
        var me = this;
        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionChartController.findReverseAuctionData(id, function(result,e){
            if(e.status) {
                deferred.resolve(result);
            } else {
                deferred.reject(e);
            }
        });
        return deferred.promise;
    }

});

/*
 * File: app/view/reverseauction/attend/ReverseAuctionResultDetailViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.attend.ReverseAuctionResultDetailViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.reverseauctionattendreverseauctionresultdetail',

    /* init */
    init: function() {
        var me = this;

        me.getView().loadData = Ext.Function.bind(me.loadData, me);

    },

    /* clear data */
    clearData: function() {
        var me = this;
        var vm = me.getViewModel();

        vm.set('reverseAuctionData',       Ext.create('bid_sp.model.rfx.ReverseAuction'));
        vm.set('reverseAuctionAttendData', Ext.create('bid_sp.model.rfx.ReverseAuctionAttend'));
        vm.set('isSameAmount', false);

        vm.getStore('itemStore').removeAll();
        vm.getStore('reverseAuctionAttendResultStore').removeAll();

        // me.task.destroy();
    },

    /* load data */
    loadData: function(reverseAuctionId, vendorAttendRequestId) {
        var me = this, vm = this.getViewModel();

        me.getView().setLoading(true);

        me.findProgressState(reverseAuctionId);				  // 역경매 work flow 조회
        me.findReverseAuctionData(reverseAuctionId);          // 역경매 정보 조회
        me.findReverseAuctionItems(reverseAuctionId);         // 역경매 품목 조회
        me.findReverseAuctionAttendResult(reverseAuctionId);

        Etna.onDone(function(){
            me.getView().setLoading(false);
        });
    },

    /* load data 역경매정보 조회 */
    findReverseAuctionData: function(id) {
        var me = this, vm = this.getViewModel();

        vm.findReverseAuctionData(id).then({
            success : function(result) {
                var reverseAuctionModel = Ext.create('bid_sp.model.rfx.ReverseAuction', result);

                reverseAuctionModel.set('beginDateHour',   reverseAuctionModel.get('beginDateTime').getHours());
                reverseAuctionModel.set('beginDateMinute', reverseAuctionModel.get('beginDateTime').getMinutes());
                reverseAuctionModel.set('endDateHour',     reverseAuctionModel.get('endDateTime').getHours());
                reverseAuctionModel.set('endDateMinute',   reverseAuctionModel.get('endDateTime').getMinutes());

                vm.set('reverseAuctionData', reverseAuctionModel);

            }
        }).done();
    },

    /* load data 역경매품목 조회 */
    findReverseAuctionItems: function(id) {
        var me = this, vm = this.getViewModel();

        var store = vm.getStore('itemStore');
        store.load({
            params : {
                id : id
            }
        });
    },

    findReverseAuctionAttendResult: function(reverseAuctionId) {
        var me = this, vm = this.getViewModel();

        var store = vm.getStore('reverseAuctionAttendResultStore');
        store.load({
            params : {
                reverseAuctionId : reverseAuctionId
            }
        });
    },

    findProgressState: function(id) {
        var me = this, vm = me.getViewModel();
        var progressStore = vm.getStore('progressStore');

        progressStore.load({
            params:{
                bidId : id
            }
        });
    },

    /* 닫기 버튼 click event */
    onCloseButtonClick: function(button, e, eOpts) {
        var me = this;

        me.clearData();
        me.getView().fireEvent('closeDetail');
    },

    onContainerItemClick: function(item) {
        var me = this;
        if(item.urlLink !== 'none'){ //tabUrl이 있는 경우
            var classPath = item.urlLink;

            //modal로 뜨도록 수정 (통테이후 반영예정)
            var popup = Ext.create(classPath, {
                floating : true,
                modal:true,
                title : item.tabTitle,
                bidNo : item.paramNo,
                noticeDate : item.paramNoticeDate,
                companyId : item.companyId,
                width:1024,
                height:768,
                resizable:true,
                draggable:true
            });

            popup.show();
            popup.center();

            //------------------------------------------------------------------tab으로 뜨도록
            //     if (MdiManager.hasView(classPath)) { //기존에 tab이 띄워져있으면 닫음
            //         var view = MdiManager.mdiTab.down(Ext.String.format('>[classpath='+classPath+']'));
            //         MdiManager.mdiTab.remove(view,true);
            //     }
            //     MdiManager.addViewToTab(classPath, { //tab 띄움
            //         title: item.tabTitle,
            //         authKey:  item.menuCode,
            //         bidNo : item.paramNo,
            //         noticeDate : item.paramNoticeDate,
            //         companyId : item.companyId
            //     }, classPath);
        }else if(item.notiMsg !== 'none'){ //화면을 보여주는 것 보다 alert창을 띄워야 하는 경우
            Etna.Message.alert(item.notiMsg);
        }
    },

    onEtnatogglefieldChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        me.getViewModel().set('reverseAuctionData.addItionalTaxYn', newValue);
    },

    onWindowClose: function(panel, eOpts) {
        var me = this;

        me.task.destroy();
    },

    onPanelAfterRender: function(component, eOpts) {
        var me = this;

        me.getView().setLoading(true);
    }

});

/*
 * File: app/view/reverseauction/attend/ReverseAuctionResultDetail.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.attend.ReverseAuctionResultDetail', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reverseauctionattendreverseauctionresultdetail',

               
                                                                                
                                                                                     
                              
                               
                             
                            
                         
                                  
                                 
                                 
                                  
                                     
                            
                              
                                
                         
                                 
                               
                        
                                  
                                 
                                   
                                   
      

    controller: 'reverseauctionattendreverseauctionresultdetail',
    viewModel: {
        type: 'reverseauctionattendreverseauctionresultdetail'
    },
    autoScroll: true,
    ui: 'main',
    title: '#{역경매 결과조회}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'page',
            items: [
                {
                    xtype: 'tbtext',
                    text: '#{역경매 내역 결과를 조회합니다.}'
                },
                {
                    xtype: 'tbspacer',
                    flex: 1
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-close',
                    text: '#{닫기}',
                    listeners: {
                        click: 'onCloseButtonClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'kepcopanel',
            collapsible: true,
            reference: 'kepcopanel',
            height: 150,
            bind: {
                store: '{progressStore}'
            },
            listeners: {
                itemClick: 'onContainerItemClick'
            }
        },
        {
            xtype: 'form',
            margin: '0 0 5 0',
            ui: 'table',
            bodyPadding: 10,
            title: '#{역경매 정보}',
            fieldDefaults: {
                labelWidth: 110
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            items: [
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{회사이름}',
                    readOnly: true,
                    editable: false,
                    bind: {
                        value: '{reverseAuctionData.operatingUnitName}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    width: 300,
                    fieldLabel: '#{공고번호/차수}',
                    layout: {
                        type: 'table',
                        columns: 3
                    },
                    items: [
                        {
                            xtype: 'textfield',
                            width: 130,
                            readOnly: true,
                            bind: {
                                value: '{reverseAuctionData.no}'
                            }
                        },
                        {
                            xtype: 'displayfield',
                            margin: '0 5',
                            value: '/'
                        },
                        {
                            xtype: 'textfield',
                            width: 40,
                            fieldStyle: 'text-align: center;',
                            readOnly: true,
                            bind: {
                                value: '{reverseAuctionData.noticeRevision}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{공고명}',
                    readOnly: true,
                    bind: {
                        value: '{reverseAuctionData.name}'
                    }
                },
                {
                    xtype: 'textfield',
                    hidden: true,
                    width: 300,
                    fieldLabel: '#{역경매구분}',
                    readOnly: true,
                    editable: false,
                    bind: {
                        value: '{reverseAuctionData.reverseauctionType}'
                    }
                },
                {
                    xtype: 'etnatogglefield',
                    fieldLabel: '#{부가세포함여부}',
                    readOnly: true,
                    onText: '#{포함}',
                    offText: '#{미포함}',
                    onValue: true,
                    offValue: false,
                    scale: 'small',
                    bind: {
                        value: '{reverseAuctionData.addItionalTaxYn}'
                    },
                    listeners: {
                        change: 'onEtnatogglefieldChange'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{계약서발행여부}',
                    readOnly: true,
                    editable: false,
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{reverseAuctionData.contractIssueYn}',
                        store: '{contractIssueStore}'
                    }
                },
                {
                    xtype: 'textfield',
                    colspan: 2,
                    width: 300,
                    fieldLabel: '#{보증금납부방식}',
                    readOnly: true,
                    editable: false
                },
                {
                    xtype: 'fieldcontainer',
                    colspan: 2,
                    width: '100%',
                    layout: {
                        type: 'table',
                        columns: 2,
                        tableAttrs: {
                            style: {
                                width: '100%'
                            }
                        },
                        tdAttrs: {
                            style: {
                                width: '50%'
                            }
                        }
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            width: 300,
                            fieldLabel: '#{지역제한}',
                            readOnly: true,
                            editable: false,
                            queryMode: 'local',
                            valueField: 'id',
                            bind: {
                                hidden: '{isAreaLimit}',
                                value: '{reverseAuctionData.restrictAreaCode}',
                                store: '{areaLimitReverseStore}'
                            }
                        },
                        {
                            xtype: 'textfield',
                            width: 300,
                            fieldLabel: '#{지역제한}',
                            readOnly: true,
                            editable: false,
                            bind: {
                                hidden: '{!isAreaLimit}',
                                value: '{reverseAuctionData.restrictArea}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'etnaattachmentfield',
                    colspan: 2,
                    width: '100%',
                    fieldLabel: '#{첨부파일}',
                    readOnly: true,
                    autoLoad: true,
                    bind: {
                        value: '{reverseAuctionData.attachFileGroupId}'
                    }
                },
                {
                    xtype: 'fieldset',
                    colspan: 2,
                    fieldDefaults: {
                        labelWidth: 100
                    },
                    title: '#{역경매기간}',
                    layout: {
                        type: 'table',
                        columns: 2,
                        tdAttrs: {
                            style: {
                                width: '50%'
                            }
                        }
                    },
                    items: [
                        {
                            xtype: 'fieldcontainer',
                            fieldLabel: '#{시작일시}',
                            layout: {
                                type: 'table',
                                columns: 5
                            },
                            items: [
                                {
                                    xtype: 'datefield',
                                    width: 100,
                                    fieldStyle: 'text-align: right;',
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.beginDateTime}'
                                    }
                                },
                                {
                                    xtype: 'numberfield',
                                    margin: '0 5',
                                    width: 40,
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.beginDateHour}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    value: '#{시}'
                                },
                                {
                                    xtype: 'numberfield',
                                    margin: '0 5',
                                    width: 40,
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.beginDateMinute}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    value: '#{분}'
                                }
                            ]
                        },
                        {
                            xtype: 'fieldcontainer',
                            fieldLabel: '#{종료일시}',
                            labelWidth: 115,
                            layout: {
                                type: 'table',
                                columns: 5
                            },
                            items: [
                                {
                                    xtype: 'datefield',
                                    width: 100,
                                    fieldStyle: 'text-align: right;',
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.endDateTime}'
                                    }
                                },
                                {
                                    xtype: 'numberfield',
                                    margin: '0 5',
                                    width: 40,
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.endDateHour}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    value: '#{시}'
                                },
                                {
                                    xtype: 'numberfield',
                                    margin: '0 5',
                                    width: 40,
                                    readOnly: true,
                                    bind: {
                                        value: '{reverseAuctionData.endDateMinute}'
                                    }
                                },
                                {
                                    xtype: 'displayfield',
                                    value: '#{분}'
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'fieldset',
                    colspan: 2,
                    fieldDefaults: {
                        labelWidth: 100
                    },
                    collapsible: true,
                    title: '#{목표가격정보}',
                    layout: {
                        type: 'table',
                        columns: 2,
                        tdAttrs: {
                            style: {
                                width: '50%'
                            }
                        }
                    },
                    items: [
                        {
                            xtype: 'numberfield',
                            coverFormat: '0,000',
                            width: 250,
                            fieldLabel: '#{시작가격}',
                            fieldStyle: 'text-align: right;',
                            readOnly: true,
                            bind: {
                                value: '{reverseAuctionData.initPrice}'
                            }
                        },
                        {
                            xtype: 'numberfield',
                            coverFormat: '0,000',
                            width: 265,
                            fieldLabel: '#{입찰단위금액}',
                            labelWidth: 115,
                            fieldStyle: 'text-align: right;',
                            readOnly: true,
                            editable: false,
                            bind: {
                                value: '{reverseAuctionData.minimumPriceUnit}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'fieldset',
                    colspan: 2,
                    collapsible: true,
                    title: '#{마감시간연장}',
                    layout: {
                        type: 'table',
                        tdAttrs: {
                            style: {
                                width: '50%'
                            }
                        }
                    },
                    bind: {
                        hidden: '{!isAutoExtension}'
                    },
                    items: [
                        {
                            xtype: 'displayfield',
                            bind: {
                                value: '{autoExtensionText}'
                            }
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'gridpanel',
            reference: 'rfxItemAttendGrid',
            stateId: '1f4a38d3-d140-495b-e054-0017a4770c10',
            stateful: true,
            height: 250,
            margin: '0 0 5 0',
            minHeight: 150,
            ui: 'grid',
            title: '#{품목정보}',
            bind: {
                hidden: '{isDirectInput}',
                store: '{itemStore}'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'itemName',
                    text: '#{품목명}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 160,
                    dataIndex: 'itemSpec',
                    text: '#{규격}'
                },
                {
                    xtype: 'numbercolumn',
                    width: 80,
                    align: 'right',
                    dataIndex: 'quantity',
                    text: '#{수량}',
                    format: '0,000'
                },
                {
                    xtype: 'gridcolumn',
                    width: 80,
                    align: 'center',
                    dataIndex: 'itemUnit',
                    text: '#{단위}'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'deliveryLocation',
                    text: '#{납품장소}'
                },
                {
                    xtype: 'datecolumn',
                    width: 130,
                    align: 'center',
                    dataIndex: 'deliveryDueDate',
                    text: '#{납품일자}',
                    format: 'Y/m/d H:i'
                }
            ],
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                }
            ]
        },
        {
            xtype: 'form',
            reference: 'itemAttachForm',
            margin: '0 0 5 0',
            ui: 'table',
            width: 100,
            layout: 'table',
            bodyPadding: 10,
            title: '#{입찰품목 첨부파일}',
            bind: {
                hidden: '{!isDirectInput}'
            },
            items: [
                {
                    xtype: 'etnaattachmentfield',
                    width: '100%',
                    readOnly: true,
                    autoLoad: true,
                    multiSelection: false,
                    loadMask: false,
                    bind: {
                        value: '{reverseAuctionData.itemAttachFileGroupId}'
                    }
                }
            ]
        },
        {
            xtype: 'gridpanel',
            stateId: '1f4a38d3-d141-495b-e054-0017a4770c10',
            stateful: true,
            height: 250,
            minHeight: 150,
            ui: 'grid',
            title: '#{낙찰자 정보}',
            bind: {
                store: '{reverseAuctionAttendResultStore}'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 115,
                    align: 'center',
                    dataIndex: 'representativeUserName',
                    text: '#{응찰자 ID}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    align: 'center',
                    dataIndex: 'vendorName',
                    text: '#{응찰업체명}'
                },
                {
                    xtype: 'numbercolumn',
                    width: 200,
                    align: 'right',
                    dataIndex: 'amount',
                    text: '#{응찰가}',
                    format: '0,000'
                },
                {
                    xtype: 'datecolumn',
                    width: 160,
                    align: 'center',
                    dataIndex: 'selectedDateTime',
                    text: '#{낙찰일자}',
                    format: 'Y/m/d H:i'
                }
            ],
            viewConfig: {
                autoScroll: false
            },
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                }
            ]
        }
    ],
    listeners: {
        close: 'onWindowClose',
        afterrender: 'onPanelAfterRender'
    }

});

/*
 * File: app/view/reverseauction/ReverseAuctionAttend.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.ReverseAuctionAttend', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reverseauctionreverseauctionattend',

               
                                                                   
                                                                        
                                                                     
                                                                  
                                                                   
                                                                       
                         
      

    controller: 'reverseauctionreverseauctionattend',
    viewModel: {
        type: 'reverseauctionreverseauctionattend'
    },

    layout: {
        type: 'card',
        deferredRender: true
    },
    items: [
        {
            xtype: 'reverseauctionattendreverseauctionattendlist',
            reference: 'reverseAuctionAttendList',
            listeners: {
                showDetail: 'showReverseAcutionChart',
                showReverseAuction: 'onPanelShowReverseAuction',
                showResult: 'onPanelShowResult',
                closeList: 'onPanelCloseList'
            }
        },
        {
            xtype: 'reverseauctionprogressreverseauctionchart',
            lazy: true,
            reference: 'reverseAuctionChart',
            listeners: {
                closeDetail: 'closeReverseAuctionChart',
                reload: 'reloadReverseAuctionProgressList'
            }
        },
        {
            xtype: 'reverseauctionprogressreverseauctiondetail',
            lazy: true,
            reference: 'reverseAuctionDetail',
            listeners: {
                closeDetail: 'closeReverseAuctionDetail'
            }
        },
        {
            xtype: 'reverseauctionattendreverseauctionresultdetail',
            lazy: true,
            reference: 'reverseAuctionResultDetail',
            listeners: {
                closeDetail: 'onPanelCloseDetail',
                reload: 'onPanelReload'
            }
        }
    ]

});

/*
 * File: app/view/reverseauction/ReverseAuctionProgressViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.ReverseAuctionProgressViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.reverseauctionreverseauctionprogress'

});

/*
 * File: app/view/reverseauction/ReverseAuctionProgressViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.ReverseAuctionProgressViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.reverseauctionreverseauctionprogress',

    showReverseAuctionProgressList: function() {
        var me = this;
        var list = me.lookupReference('reverseAuctionProgressList');

        me.getView().getLayout().setActiveItem(list);
    },

    showReverseAuctionDetail: function(reverseAuctionId, vendorAttendId, eventOptions) {
        var me = this;
        var detail = me.lookupReference('reverseAuctionDetail');

        detail.loadData(reverseAuctionId, vendorAttendId);
        me.getView().getLayout().setActiveItem(detail);
    },

    closeReverseAuctionDetail: function(eventOptions) {
        var me = this;
        me.showReverseAuctionProgressList();
    }

});

/*
 * File: app/view/reverseauction/progress/ReverseAuctionProgressListViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.progress.ReverseAuctionProgressListViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.vendorrfx.reverseauctionprogresslist',

               
                                         
                                
                               
                                
                          
                          
                                   
                          
                                                             
                                          
                                       
      

    data: {
        searchValues: null
    },

    stores: {
        vendorOperatingUnitStore: {
            linkType: 'EOPO',
            type: 'cmmnvendoroperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getVendorOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        rfxResultStateKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.RfxResultStateKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            filters: {
                filterFn: function(item) {
                    var status = item.get('value');
                    var agreeStatus = ['NotDetermined', 'Success', 'Cancel', 'Fail'];
                    if(Ext.Array.contains(agreeStatus, status) === true){
                        return item;
                    }
                }
            }
        },
        competitionTypeKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.CompetitionTypeKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        operatingUnitStore: {
            unitType: 'PO',
            type: 'cmmnoperatingunit',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getOwnOperatingUnits',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                }
            ]
        },
        reverseAuctionStore: {
            model: 'bid_sp.model.rfx.ReverseAuction',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.pro.rfx.sp.ReverseAuctionProgressListController.findReverseAuctionProgressPage',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        rfxAttendResultStateKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.RfxAttendResultStateKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        },
        companyStore: {
            model: 'bid_sp.model.cmmn.CompanyCode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.basis.GroupCodeController.findCompanyCodeDatas',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        areaLimitReverseStore: {
            groupCode: 'AreaLimitReverse',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        },
        rfxProgressStateKindStore: {
            enumType: 'smartsuit.app.pro.shared.domain.enums.RfxProgressStateKind',
            type: 'cmmnenum',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getEnums',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    type: 'string',
                    name: 'text'
                }
            ],
            filters: {
                filterFn: function(item) {
                    var status = item.get('value');
                    var removeStatus = ['ApprovalReady', 'ApprovalProgress', 'ApprovalReject', 'CreateProgress','OpenTimed', 'NoticeReady'];
                    if(Ext.Array.contains(removeStatus, status) === false){
                        return item;
                    }
                }
            }
        },
        restrictAreaStore: {
            groupCode: 'AREA',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        }
    }

});

/*
 * File: app/view/reverseauction/progress/ReverseAuctionProgressListViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.progress.ReverseAuctionProgressListViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.vendorrfx.reverseauctionprogresslist',

    /* init */
    init: function() {
        var me = this;

        me.getView().onSearchButtonClick = Ext.Function.bind(me.onSearchButtonClick, me);
    },

    /* search validation */
    searchValidation: function() {
        var me = this;
        var fields = me.lookupReference('searchForm').getForm().getFields().items;
        var message;
        var validYn = true;

        Ext.each(fields, function(field){
            if(!field.isValid()){
                var label = field.fieldLabel == null? field.up().fieldLabel : field.fieldLabel;
                message = Ext.String.format('#{"{0}" 필수값을 확인 해주십시오.}', label);
                validYn = false;
                return;
            }
        });

        if(!validYn){
            Etna.Message.alert(message);
        }

        return validYn;
    },

    /* grid cell click */
    gridCellClick: function(record) {
        var me = this;

        me.getView().fireEvent('showReverseAuction', record.get('id'), record.get('vendorAttendId'));
    },

    findProgressList: function() {
        var me = this;
        var reverseAuctionStore = me.getViewModel().get('reverseAuctionStore');

        me.getViewModel().set('searchValues.vendorId', Cmmn.User.get('vendorId'));
        var searchValues = me.getViewModel().get('searchValues');

        if(!me.searchValidation()) return;

        me.getView().setLoading(true);

        reverseAuctionStore.loadPage(1, {
            params : searchValues,
            callback : function() {
                me.getView().setLoading(false);
            }
        });
    },

    /* 조회 버튼 click event */
    onSearchButtonClick: function(button, e, eOpts) {
        var me = this;

        me.findProgressList();
    },

    /* 초기화 버튼 click event */
    onRefreshButtonClick: function(button, e, eOpts) {
        var me = this;

        me.getViewModel().set('searchValues', {
            companyId : me.getViewModel().getStore('companyStore').first().get('id'),
            fromBeginDate : Ext.Date.add(new Date(), Ext.Date.MONTH, -1),
            toBeginDate : Ext.Date.add(new Date())
        });
    },

    /* search form enter */
    onSearchFormSpecialKey: function(field, e) {
        var me = this;

        if(e.getKey() == e.ENTER) {
            if(me.searchValidation()){
                me.findProgressList();
            }
        }
    },

    onGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        var me = this;
        var dataIndex = tableview.getColumnManager().getHeaderAtIndex(cellIndex).dataIndex;

        if(dataIndex == 'no'){		// 공고번호 클릭
            me.gridCellClick(record);
        }
    },

    /* after render */
    onAfterRender: function(component, eOpts) {
        var me = this;

        me.getView().setLoading(true);

        Etna.onDone(function() {
            var companyCodeStore = me.getViewModel().getStore('companyStore');

            companyCodeStore.load({
                callback: function(records, operation, success) {
                    me.onRefreshButtonClick();
                    me.getView().setLoading(false);
                }
            });
        });
    }

});

/*
 * File: app/view/reverseauction/progress/ReverseAuctionProgressList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.progress.ReverseAuctionProgressList', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.vendorrfxreverseauctionprogressList',

               
                                                                                  
                                                                                       
                         
                         
                             
                            
                                  
                                  
                              
                                           
                         
                                 
                               
                        
                                  
                                 
                                   
                                    
                                   
      

    controller: 'vendorrfx.reverseauctionprogresslist',
    viewModel: {
        type: 'vendorrfx.reverseauctionprogresslist'
    },
    autoShow: true,
    ui: 'main',
    title: '#{역경매공고 목록}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            reference: 'searchForm',
            margin: '0 0 5 0',
            ui: 'search',
            defaults: {
                bubbleEvents: [
                    'specialkey'
                ],
                defaults: {
                    bubbleEvents: [
                        'specialkey'
                    ],
                    defaults: {
                        bubbleEvents: [
                            'specialkey'
                        ]
                    }
                }
            },
            fieldDefaults: {
                labelWidth: 110
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    ui: 'search',
                    items: [
                        {
                            xtype: 'label',
                            text: '#{역경매로 진행된 현황을 조회한다.}'
                        },
                        {
                            xtype: 'tbspacer',
                            flex: 1
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-search',
                            text: '#{조회}',
                            listeners: {
                                click: 'onSearchButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-refresh',
                            text: '#{초기화}',
                            listeners: {
                                click: 'onRefreshButtonClick'
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'combobox',
                    width: 320,
                    fieldLabel: '#{회사이름}',
                    editable: false,
                    displayField: 'name',
                    queryMode: 'local',
                    valueField: 'id',
                    bind: {
                        value: '{searchValues.companyId}',
                        store: '{companyStore}'
                    }
                },
                {
                    xtype: 'fieldcontainer',
                    fieldLabel: '#{공고시작일시}',
                    layout: {
                        type: 'table',
                        columns: 3
                    },
                    items: [
                        {
                            xtype: 'datefield',
                            margin: 0,
                            width: 120,
                            allowBlank: false,
                            bind: {
                                value: '{searchValues.fromBeginDate}',
                                maxValue: '{searchValues.toBeginDate}'
                            }
                        },
                        {
                            xtype: 'label',
                            height: 20,
                            margin: '0 5',
                            text: '~'
                        },
                        {
                            xtype: 'datefield',
                            margin: 0,
                            width: 120,
                            allowBlank: false,
                            bind: {
                                value: '{searchValues.toBeginDate}',
                                minValue: '{searchValues.fromBeginDate}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'combobox',
                    width: 320,
                    fieldLabel: '#{진행상태}',
                    editable: false,
                    emptyText: '#{전체}',
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{searchValues.progressState}',
                        store: '{rfxProgressStateKindStore}'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 300,
                    fieldLabel: '#{결과상태}',
                    editable: false,
                    emptyText: '#{전체}',
                    queryMode: 'local',
                    valueField: 'value',
                    bind: {
                        value: '{searchValues.resultState}',
                        store: '{rfxResultStateKindStore}'
                    }
                },
                {
                    xtype: 'combobox',
                    width: 320,
                    fieldLabel: '#{지역제한}',
                    editable: false,
                    emptyText: '#{전체}',
                    queryMode: 'local',
                    valueField: 'id',
                    bind: {
                        value: '{searchValues.restrictAreaCode}',
                        store: '{areaLimitReverseStore}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: 300,
                    fieldLabel: '#{공고번호}',
                    enforceMaxLength: true,
                    maxLength: 50,
                    bind: {
                        value: '{searchValues.no}'
                    }
                },
                {
                    xtype: 'textfield',
                    width: '100%',
                    fieldLabel: '#{공고명}',
                    enforceMaxLength: true,
                    maxLength: 50,
                    bind: {
                        value: '{searchValues.name}'
                    }
                }
            ],
            listeners: {
                specialKey: 'onSearchFormSpecialKey'
            },
            plugins: [
                {
                    ptype: 'autoClearButton'
                }
            ]
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            reference: 'gridPanel',
            stateId: '1f4a38d3-d145-495b-e054-0017a4770c10',
            stateful: true,
            ui: 'grid',
            bind: {
                store: '{reverseAuctionStore}'
            },
            columns: [
                {
                    xtype: 'etnastorecolumn',
                    width: 135,
                    align: 'center',
                    dataIndex: 'progressState',
                    text: '#{진행상태}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{rfxProgressStateKindStore}'
                    }
                },
                {
                    xtype: 'etnastorecolumn',
                    width: 135,
                    align: 'center',
                    dataIndex: 'resultState',
                    text: '#{결과상태}',
                    valueField: 'value',
                    displayField: 'text',
                    bind: {
                        store: '{rfxResultStateKindStore}'
                    }
                },
                {
                    xtype: 'etnastorecolumn',
                    width: 180,
                    align: 'center',
                    dataIndex: 'companyId',
                    text: '#{회사이름}',
                    valueField: 'id',
                    displayField: 'name',
                    bind: {
                        store: '{companyStore}'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    align: 'center',
                    dataIndex: 'no',
                    tdCls: 'link',
                    text: '#{공고번호}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 50,
                    align: 'center',
                    dataIndex: 'revision',
                    text: '#{차수}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'name',
                    text: '#{공고명}'
                },
                {
                    xtype: 'datecolumn',
                    width: 135,
                    align: 'center',
                    dataIndex: 'noticeBeginDateTime',
                    text: '#{공고시작일시}',
                    format: 'Y/m/d H:i'
                },
                {
                    xtype: 'gridcolumn',
                    width: 250,
                    align: 'center',
                    dataIndex: 'reverseAuctionPeriod',
                    text: '#{역경매기간}'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'restrictArea',
                    text: '#{지역제한}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'representativeDepartmentName',
                    text: '#{공고부서}'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'representativeName',
                    text: '#{입찰담당자}'
                }
            ],
            plugins: [
                {
                    ptype: 'etnaexport',
                    useRenderer: true,
                    defaultFileNameDateFormat: 'Y.m.d_H.i.s'
                },
                {
                    ptype: 'etnagridblock'
                },
                {
                    ptype: 'etnagridcontext',
                    contextMenu: true,
                    advancedContextMenu: false
                },
                {
                    ptype: 'etnagridstateful'
                }
            ],
            dockedItems: [
                {
                    xtype: 'etnascrollpagingtoolbar',
                    dock: 'bottom',
                    bind: {
                        store: '{reverseAuctionStore}'
                    }
                }
            ],
            listeners: {
                cellclick: 'onGridpanelCellClick'
            }
        }
    ],
    listeners: {
        afterrender: 'onAfterRender'
    }

});

/*
 * File: app/view/reverseauction/ReverseAuctionProgress.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('bid_sp.view.reverseauction.ReverseAuctionProgress', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.reverseauctionreverseauctionprogress',

               
                                                                     
                                                                          
                                                                         
                                                                   
                         
      

    controller: 'reverseauctionreverseauctionprogress',
    viewModel: {
        type: 'reverseauctionreverseauctionprogress'
    },

    layout: {
        type: 'card',
        deferredRender: true
    },
    items: [
        {
            xtype: 'vendorrfxreverseauctionprogressList',
            reference: 'reverseAuctionProgressList',
            autoScroll: true,
            listeners: {
                showReverseAuction: 'showReverseAuctionDetail'
            }
        },
        {
            xtype: 'reverseauctionprogressreverseauctiondetail',
            reference: 'reverseAuctionDetail',
            listeners: {
                closeDetail: 'closeReverseAuctionDetail'
            }
        }
    ]

});

Ext.define("bid_sp.view.ExDetailTab.I18n", {override : "bid_sp.view.ExDetailTab", i18n : ["\ud14d\uc2a4\ud2b8","\ud14d\uc2a4\ud2b8","\ubc84\ud2bc","\ubc84\ud2bc","\ud14d\uc2a4\ud2b8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ud544\ub4dc\uc14b","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ud14d\uc2a4\ud2b8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ud544\ub4dc\uc14b","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ud14d\uc2a4\ud2b8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ub77c\ubca8","\ud14d\uc2a4\ud2b8","\ud14d\uc2a4\ud2b8","\ucca8\ubd80\ud30c\uc77c","\uadf8\ub9ac\ub4dc","\ubc84\ud2bc","\ubc84\ud2bc","\uadf8\ub9ac\ub4dc","\ubc84\ud2bc","\ubc84\ud2bc"]});Ext.define("bid_sp.view.ExList.I18n", {override : "bid_sp.view.ExList", i18n : ["\ud14d\uc2a4\ud2b8","\ud14d\uc2a4\ud2b8","\uc870\ud68c","\ucd08\uae30\ud654","\uc870\uac74","\uc870\uac74","\uc870\uac74","\uc870\uac74","\ub0a0\uc9dc","\uc870\uac74","\ub0a0\uc9dc","\uc870\uac74","\ubc84\ud2bc"]});Ext.define("bid_sp.view.bidAnnouncement.detail.product.BidAnnouncementDetailViewModel.I18n", {override : "bid_sp.view.bidAnnouncement.detail.product.BidAnnouncementDetailViewModel", i18n : ["\uc81c\uc548\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uc81c\uc548\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uaddc\uaca9\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uaddc\uaca9\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uc6d0","\uc6d0"]});Ext.define("bid_sp.view.bidAnnouncement.popup.PopupSearchItems.I18n", {override : "bid_sp.view.bidAnnouncement.popup.PopupSearchItems", i18n : ["\ud488\ubaa9\ubcc4 \uae30\ucd08\uae08\uc561\uc870\ud68c","\ub2eb\uae30","\uacf5\uace0\ubc88\ud638","\uc790\uc7ac\ucf54\ub4dc","\uc790\uc7ac\ud488\uba85","\uc608\ube44\uae30\ucd08\uae08\uc561"]});Ext.define("bid_sp.view.bidAnnouncement.detail.product.BidAnnouncementDetail.I18n", {override : "bid_sp.view.bidAnnouncement.detail.product.BidAnnouncementDetail", i18n : ["\uc790\uc7ac\uc785\ucc30\uacf5\uace0\uc0c1\uc138","\uc790\uc7ac\uc785\ucc30 \uacf5\uace0\ub0b4\uc5ed\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.","\uac31\uc2e0","\uc778\uc1c4","\ub2eb\uae30","\uc785\ucc30\uae30\ubcf8\uc815\ubcf4","\uacf5\uace0\uc77c\ubc18","\uacf5\uace0\uba85","\uacf5\uace0\ubc88\ud638/\ucc28\uc218","\uacf5\uace0\uc77c\uc790","\uacf5\uace0\uc885\ub958","\uc120\ud0dd","\uae34\uae09\uacf5\uace0","\uc0c1\uc2dc\ud22c\ucc30\uc801\uc6a9\uc5ec\ubd80","\uc801\uc6a9","\ubbf8\uc801\uc6a9","\uad6d\ub0b4\uc678\uad6c\ubd84","\uc120\ud0dd","\ud1b5\ud654","\uc120\ud0dd","\uc785\ucc30\ub2f4\ub2f9\ubd80\uc11c","\uc785\ucc30\ub2f4\ub2f9\uc790","\ub0a9\ud488\uc7a5\uc18c","\ub0a9\uae30","\uacc4\uc57d\uc785\ucc30\ubc29\uc2dd","\uacc4\uc57d\ubc29\ubc95","\uc120\ud0dd","\uc81c\ud55c\uacbd\uc7c1\uc0ac\uc720","\uc120\ud0dd","\uacc4\uc57d\uad6c\ubd84","\uc120\ud0dd","2\ub2e8\uacc4","\uc120\ud0dd","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95","\uc120\ud0dd","\ud76c\ub9dd\uc218\ub7c9","\uc911\uc18c\uae30\uc5c5","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95\uc0c1\uc138","\ub2e4\uc218\uacf5\uae09\uc790\uc785\ucc30","\uacf5\uae09\uad6c\ubd84","1\ud68c","1\ub144","\uc720\uc790\uaca9\ud488\ubaa9\uad6c\ubd84","\uc801\uc6a9","\ubbf8\uc801\uc6a9","\uacf5\ub3d9\uc218\uae09\uc5ec\ubd80","\uc608","\uc544\ub2c8\uc624","\uc120\ud0dd","\uc81c\ud55c \uc5c5\uccb4\uc218","\ubc30\uc810\ud55c\ub3c4","\uae30\uc220","\uac00\uaca9","\uc885\ud569\ub099\ucc30\uc81c\ud3c9\uac00\ubc29\ubc95","\uc120\ud0dd","\uc885\ud569\ud3c9\uac00","\uc785\ucc30\uc9c4\ud589","\uc785\ucc30\ucc38\uac00\uc2e0\uccad\ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uc785\ucc30\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uc2dc","\ubd84","\uc785\ucc30\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uaddc\uaca9\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uc2dc","\ubd84","\uaddc\uaca9\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uac00\uaca9\uc785\ucc30\uc11c \uac1c\ucc30\uc77c\uc2dc(\uc608\uc815)","\uc2dc","\ubd84","\uc815\uc815\uc0ac\uc720","\ucd94\uc815\uc815\ubcf4","\ucd94\uc815\uac00\uaca9(VAT\uc81c\uc678)","\uc6d0","\uc608\ube44\uac00\uaca9 \uae30\ucd08\uae08\uc561","\ud488\ubaa9\ubcc4 \uc0c1\uc138\uc870\ud68c","\uae30\ucd08\uae08\uc561","\uc6d0","\uae30\ucd08\uae08\uc561","\ubbf8\uc785\ub825","\uc6d0","\ube44\uace0","\uc801\uaca9\uc2ec\uc0ac\uc815\ubcf4","\uc801\uaca9\uc2ec\uc0ac\ud3c9\uac00\uae30\uc900","\u203b \uc801\uaca9\uc2ec\uc0ac \uc138\ubd80\uae30\uc900 \uc81c 4\uc870 \uc81c1\ud56d \uc81c1\ud638\ub97c \uc801\uc6a9(\ub0a9\ud488\uc2e4\uc801/\uae30\uc220\ub2a5\ub825\uc2ec\uc0ac)","\u203b \uc801\uaca9\uc2ec\uc0ac \uc138\ubd80\uae30\uc900 \uc81c 4\uc870 \uc81c1\ud56d \uc81c2\ud638\ub97c \uc801\uc6a9","\ucca8\ubd80\ud30c\uc77c","\uc790\ub3d9\ucca8\ubd80\ud30c\uc77c","\ud30c\uc77c\uba85","\uc0ac\uc774\uc988","\ubd99\uc784\uc11c\ub958","\uc785\ucc30\ucd94\uac00\uc0ac\ud56d","\uacc4\uc57d\uc870\uac74 \uacf5\uc2dc\uc7a5\uc18c","\uacc4\uc57d\ucc29\uc218\uc77c \ubc0f \uc644\ub8cc\uc77c","\uc785\ucc30\uc2dc \uc81c\ucd9c\uc11c\ub958","\uc785\ucc30\ucc38\uac00\uc790\uaca9","\uc785\ucc30\ubcf4\uc99d\uae08\ub0a9\ubd80 \ubc0f \uadc0\uc18d","\uc785\ucc30\ubb34\ud6a8\uc0ac\ud56d","\uc785\ucc30\ucc38\uac00\uc2e0\uccad\uc11c\ub958","\ucd94\uac00\uc815\ubcf4\uc81c\uacf5\ucc98","\uae30\ud0c0\uacf5\uace0\uc0ac\ud56d","\uc785\ucc30\uc2dc\uac04 \ubcc0\uacbd\uc774\ub825 \uc870\ud68c","\uacf5\uace0\ucc28\uc218","\ubcc0\uacbd\ud56d\ubaa9","\ubcc0\uacbd \uc804","\ubcc0\uacbd \ud6c4","\ubcc0\uacbd\uc0ac\uc720","\ud488\ubaa9\uc815\ubcf4","\ub300\uc0c1\ud488\ubaa9","\uc120\ud0dd","\ud488\ubaa9\uc815\ubcf4","\uc0c1\ud0dc","\uc0ad\uc81c","\uc790\uc7ac\uc2dd\ubcc4\ubc88\ud638","\ud488\uba85","\uaddc\uaca9","\ub2e8\uc704","\uc218\ub7c9","\ud558\ud55c~\uc0c1\ud55c \uc218\uc8fc\uc728","\uc774\uc0c1(%)","\uc774\ud558(%)","\uae30\uc900\ud488\ubaa9","\ucca8\ubd80\ud30c\uc77c","\uad6c\ub9e4\uaddc\uaca9\uc11c","\ud2b9\uc218\uc870\uac74","\uae30\ud0c0\ucca8\ubd80"]});Ext.define("bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetailViewModel.I18n", {override : "bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetailViewModel", i18n : ["\uc785\ucc30(\uc81c\uc548\uc11c) \uc2dc\uc791\uc77c\uc2dc","\uc785\ucc30(\uc81c\uc548\uc11c) \ub9c8\uac10\uc77c\uc2dc","\uaddc\uaca9\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uaddc\uaca9\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uc6d0","\uc6d0","\uc6d0"]});Ext.define("bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetailViewController.I18n", {override : "bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetailViewController", i18n : ["\uac00\uc0c1\uc124\uacc4\uae08\uc561(VAT\ubcc4\ub3c4)","\uac00\uc0c1\uc124\uacc4\uae08\uc561(VAT\ubcc4\ub3c4)","\ucd94\uc815\uae08\uc561(VAT\ud3ec\ud568)"]});Ext.define("bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetail.I18n", {override : "bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetail", i18n : ["\uacf5\uc0ac\uc6a9\uc5ed\uc785\ucc30\uc2e0\uaddc\ub4f1\ub85d","\uac31\uc2e0","\uc778\uc1c4","\ub2eb\uae30","\uc785\ucc30\uae30\ubcf8\uc815\ubcf4","\uacf5\uace0\uc77c\ubc18","\uacf5\uace0\uba85","\uacf5\uace0\ubc88\ud638/\ucc28\uc218","\uacf5\uace0\ubd80\uc11c","\uacf5\uace0\uc885\ub958","\uc120\ud0dd","\uc0c1\uc2dc\ud22c\ucc30\uc801\uc6a9\uc5ec\ubd80","\uc801\uc6a9","\ubbf8\uc801\uc6a9","\uad6d\ub0b4\uc678\uad6c\ubd84","\uc120\ud0dd","\ud1b5\ud654","\uc120\ud0dd","\uc785\ucc30\ub2f4\ub2f9\ubd80\uc11c","\uc785\ucc30\ub2f4\ub2f9\uc790","\uacc4\uc57d\uc785\ucc30\ubc29\uc2dd","\uacc4\uc57d\ubc29\ubc95","\uc120\ud0dd","\uacc4\uc57d\uad6c\ubd84","\uc120\ud0dd","\uc81c\ud55c\uc0ac\uc720","\uc120\ud0dd","2\ub2e8\uacc4","\uc120\ud0dd","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95","\uc120\ud0dd","\uc77c\uad04\uc785\ucc30\uc720\ud615","\uc120\ud0dd","\uacf5\ub3d9\uc218\uae09\uc5ec\ubd80","\uc608","\uc544\ub2c8\uc624","\uacf5\ub3d9\uc218\uae09\ubc29\ubc95","\uc120\ud0dd","\uc81c\ud55c\uc5c5\uccb4\uc218","\uacf5\ub3d9\uc218\uae09\uc5c5\uccb4\uc218","\uc81c\uc548\uc11c\uc81c\ucd9c\ubc29\ubc95","ON-LINE","OFF-LINE","\ubc30\uc810\ud55c\ub3c4","\uae30\uc220\ub2a5\ub825\ud3c9\uac00 \ubc30\uc810\ud55c\ub3c4","\uc785\ucc30\uac00\uaca9\ud3c9\uac00 \ubc30\uc810\ud55c\ub3c4","\uc815\uc815\uc0ac\uc720","\uc785\ucc30\uc9c4\ud589","PQ\uc2ec\uc0ac\uc5ec\ubd80","\uc608","\uc544\ub2c8\uc624","\uacf5\uace0\uc77c\uc790","\uc2dc","\ubd84","PQ\uc2ec\uc0ac\uc811\uc218\ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uc785\ucc30\ucc38\uac00\uc2e0\uccad\uc2dc\uc791\uc77c\uc2dc","\uc2dc","\ubd84","\uc785\ucc30\ucc38\uac00\uc2e0\uccad\ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uc785\ucc30\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uc2dc","\ubd84","\uc785\ucc30\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uaddc\uaca9\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uc2dc","\ubd84","\uaddc\uaca9\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uac00\uaca9\uc785\ucc30\uc11c \uac1c\ucc30\uc77c\uc2dc(\uc608\uc815)","\uc2dc","\ubd84","\u203b \uac1c\ucc30\uc77c\uc2dc : \uc804\uc790\uc785\ucc30\uc11c \uc81c\ucd9c\ub9c8\uac10 \uc77c\uc2dc\ubd80\ud130 1\uc2dc\uac04 \uc774\ud6c4\uc5d0 \uac1c\ucc30","\u300e\uc804\uc790\uc870\ub2ec\uc758 \uc774\uc6a9 \ubc0f \ucd09\uc9c4\uc5d0 \uad00\ud55c \ubc95\ub960 \uc2dc\ud589 \uaddc\uce59 \uc81c\x02\uc870 4\ud56d \uc801\uc6a9\u300f","\ud22c\ucc30\uc81c\ud55c","\uc801\uaca9\uc790\uaca9\uba85","m(\ubbf8\ud130)","\uba74\ud5c8\uc790\uaca9\uba85","\uc9c0\uc5ed\uba85","\uad00\ud560\uad6c\uc5ed","\ucd94\uc815\uac00\uaca9","\ucd94\uc815\uae08\uc561(VAT\ud3ec\ud568)","\uc6d0","\ucd94\uc815\uac00\uaca9(VAT\ubcc4\ub3c4)","\uc6d0","\uc608\ube44\uac00\uaca9 \uae30\ucd08\uae08\uc561","\uae30\ucd08\uae08\uc561","\uc6d0","\uae30\ucd08\uae08\uc561","\ubbf8\uc785\ub825","\uc6d0","\ube44\uace0","\ud604\uc7a5\uc124\uba85\ud68c","\ud604\uc7a5\uc124\uba85\ucc38\uc11d","\uc758\ubb34\uc0ac\ud56d","\uc758\ubb34\uc0ac\ud56d\uc544\ub2d8","\ud604\uc7a5\uc785\ucc30 \uc2e4\uc2dc\uc7a5\uc18c \ubc0f \uc2dc\uac04","\ud604\uc7a5\uc124\uba85\ud68c\uc77c\uc790","\ud604\uc7a5\uc124\uba85\ud68c\uc2dc\uac04","\uc2dc","\ubd84","\uc2dc","\ubd84","\uc785\ucc30\ucd94\uac00\uc0ac\ud56d","\uc790\ub3d9\ucca8\ubd80\ud30c\uc77c","\ud30c\uc77c\uba85","\uc0ac\uc774\uc988","\ucca8\ubd80\ud30c\uc77c","\uc785\ucc30\ucc38\uac00\uc790\uaca9","\uae30\ud0c0","\ucc38\uace0\uc0ac\ud56d","\uc785\ucc30\uc2dc\uac04 \ubcc0\uacbd\uc774\ub825 \uc870\ud68c","\uacf5\uace0\ucc28\uc218","\ubcc0\uacbd\ud56d\ubaa9","\ubcc0\uacbd \uc804","\ubcc0\uacbd \ud6c4","\ubcc0\uacbd\uc0ac\uc720"]});Ext.define("bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetailViewModel1.I18n", {override : "bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetailViewModel1", i18n : ["\uc81c\uc548\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uc81c\uc548\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uc785\ucc30\uc11c/\uaddc\uaca9\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uc785\ucc30\uc11c/\uaddc\uaca9\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uaddc\uaca9\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uaddc\uaca9\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uc6d0","\uc6d0"]});Ext.define("bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetail.I18n", {override : "bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetail", i18n : ["\uc790\uc7ac\uc785\ucc30\uacf5\uace0\uc0c1\uc138","\uc790\uc7ac\uc785\ucc30 \uacf5\uace0\ub0b4\uc5ed\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.","\uac31\uc2e0","\uc778\uc1c4","\ub2eb\uae30","\uc785\ucc30\uae30\ubcf8\uc815\ubcf4","\uacf5\uace0\uc77c\ubc18","\uacf5\uace0\uba85","\uacf5\uace0\ubc88\ud638/\ucc28\uc218","\uacf5\uace0\uc77c\uc790","\uacf5\uace0\uc885\ub958","\uc120\ud0dd","\uae34\uae09\uacf5\uace0","\uc0c1\uc2dc\ud22c\ucc30\uc801\uc6a9\uc5ec\ubd80","\uc801\uc6a9","\ubbf8\uc801\uc6a9","\uad6d\ub0b4\uc678\uad6c\ubd84","\uc120\ud0dd","\ud1b5\ud654","\uc120\ud0dd","\uc785\ucc30\ub2f4\ub2f9\ubd80\uc11c","\uc785\ucc30\ub2f4\ub2f9\uc790","\ub0a9\ud488\uc7a5\uc18c","\ucd5c\ucd08\ub0a9\uae30","HS\ucf54\ub4dc","\uc6b4\uc1a1\uc870\uac74","\uc120\ud0dd","\uacc4\uc57d\uc785\ucc30\ubc29\uc2dd","\uacc4\uc57d\ubc29\ubc95","\uc120\ud0dd","\uacc4\uc57d\uad6c\ubd84","\uc120\ud0dd","2\ub2e8\uacc4","\uc120\ud0dd","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95","\uc120\ud0dd","\ud76c\ub9dd\uc218\ub7c9","\uc911\uc18c\uae30\uc5c5","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95\uc0c1\uc138","\ub2e4\uc218\uacf5\uae09\uc790\uc785\ucc30","\uacf5\uae09\uad6c\ubd84","1\ud68c","1\ub144","\uc720\uc790\uaca9\ud488\ubaa9\uad6c\ubd84","\uc801\uc6a9","\ubbf8\uc801\uc6a9","\uacf5\ub3d9\uc218\uae09\uc5ec\ubd80","\uc608","\uc544\ub2c8\uc624","\uc120\ud0dd","\uc81c\ud55c \uc5c5\uccb4\uc218","\ubc30\uc810\ud55c\ub3c4","\uae30\uc220","\uac00\uaca9","\uc885\ud569\ub099\ucc30\uc81c\ud3c9\uac00\ubc29\ubc95","\uc120\ud0dd","\uc885\ud569\ud3c9\uac00","\uc785\ucc30\uc9c4\ud589","\uc785\ucc30\ucc38\uac00\uc2e0\uccad\uc2dc\uc791\uc77c\uc2dc","\uc2dc","\ubd84","\uc785\ucc30\ucc38\uac00\uc2e0\uccad\ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uc785\ucc30\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uc2dc","\ubd84","\uc785\ucc30\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uaddc\uaca9\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uc2dc","\ubd84","\uaddc\uaca9\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uac00\uaca9\uc785\ucc30\uc11c \uac1c\ucc30\uc77c\uc2dc(\uc608\uc815)","\uc2dc","\ubd84","\uc815\uc815\uc0ac\uc720","\ucd94\uc815\uc815\ubcf4","\ucd94\uc815\uac00\uaca9(VAT\uc81c\uc678)","\uc6d0","\uc608\ube44\uac00\uaca9 \uae30\ucd08\uae08\uc561","\ud488\ubaa9\ubcc4 \uc0c1\uc138\uc870\ud68c","\uae30\ucd08\uae08\uc561","\uc6d0","\uae30\ucd08\uae08\uc561","\ubbf8\uc785\ub825","\uc6d0","\ube44\uace0","\uc801\uaca9\uc2ec\uc0ac\uc815\ubcf4","\uc801\uaca9\uc2ec\uc0ac\ud3c9\uac00\uae30\uc900","\u203b \uc801\uaca9\uc2ec\uc0ac \uc138\ubd80\uae30\uc900 \uc81c 4\uc870 \uc81c1\ud56d \uc81c1\ud638\ub97c \uc801\uc6a9(\ub0a9\ud488\uc2e4\uc801/\uae30\uc220\ub2a5\ub825\uc2ec\uc0ac)","\u203b \uc801\uaca9\uc2ec\uc0ac \uc138\ubd80\uae30\uc900 \uc81c 4\uc870 \uc81c1\ud56d \uc81c2\ud638\ub97c \uc801\uc6a9","\ucca8\ubd80\ud30c\uc77c","\uc790\ub3d9\ucca8\ubd80","\ubd99\uc784\uc11c\ub958","\uc785\ucc30\ucd94\uac00\uc0ac\ud56d","\uacc4\uc57d\uc870\uac74 \uacf5\uc2dc\uc7a5\uc18c","\uacc4\uc57d\ucc29\uc218\uc77c \ubc0f \uc644\ub8cc\uc77c","\uc785\ucc30\uc2dc \uc81c\ucd9c\uc11c\ub958","\uc785\ucc30\ucc38\uac00\uc790\uaca9","\uc785\ucc30\ubcf4\uc99d\uae08\ub0a9\ubd80 \ubc0f \uadc0\uc18d","\uc785\ucc30\ubb34\ud6a8\uc0ac\ud56d","\uc785\ucc30\ucc38\uac00\uc2e0\uccad\uc11c\ub958","\ucd94\uac00\uc815\ubcf4\uc81c\uacf5\ucc98","\uae30\ud0c0\uacf5\uace0\uc0ac\ud56d","\uc785\ucc30\uc2dc\uac04 \ubcc0\uacbd\uc774\ub825 \uc870\ud68c","\uacf5\uace0\ucc28\uc218","\ubcc0\uacbd\ud56d\ubaa9","\ubcc0\uacbd \uc804","\ubcc0\uacbd \ud6c4","\ubcc0\uacbd\uc0ac\uc720","\ud488\ubaa9\uc815\ubcf4","\ub300\uc0c1\ud488\ubaa9","\uc120\ud0dd","\ud488\ubaa9\uc815\ubcf4","\uc0c1\ud0dc","\uc0ad\uc81c","\uc790\uc7ac\uc2dd\ubcc4\ubc88\ud638","\ud488\uba85","\uaddc\uaca9","\ub2e8\uc704","\uc218\ub7c9","HS CODE","HsCode","concessionType","\ud558\ud55c~\uc0c1\ud55c \uc218\uc8fc\uc728","\uc774\uc0c1(%)","\uc774\ud558(%)","\uae30\uc900\ud488\ubaa9","\ucca8\ubd80\ud30c\uc77c","\uad6c\ub9e4\uaddc\uaca9\uc11c","\ud2b9\uc218\uc870\uac74","\uae30\ud0c0\ucca8\ubd80"]});Ext.define("bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetailViewModel.I18n", {override : "bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetailViewModel", i18n : ["\uc785\ucc30(\uc81c\uc548\uc11c) \uc2dc\uc791\uc77c\uc2dc","\uc785\ucc30(\uc81c\uc548\uc11c) \ub9c8\uac10\uc77c\uc2dc","\uaddc\uaca9\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uaddc\uaca9\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uc6d0","\uc6d0","\uc6d0"]});Ext.define("bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetailViewController.I18n", {override : "bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetailViewController", i18n : ["\uac00\uc0c1\uc124\uacc4\uae08\uc561(VAT\ubcc4\ub3c4)","\uac00\uc0c1\uc124\uacc4\uae08\uc561(VAT\ubcc4\ub3c4)","\ucd94\uc815\uae08\uc561(VAT\ud3ec\ud568)"]});Ext.define("bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetail.I18n", {override : "bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetail", i18n : ["\uacf5\uc0ac\uc6a9\uc5ed\uc785\ucc30\uc2e0\uaddc\ub4f1\ub85d","\uac31\uc2e0","\uc778\uc1c4","\ub2eb\uae30","\uc785\ucc30\uae30\ubcf8\uc815\ubcf4","\uacf5\uace0\uc77c\ubc18","\uacf5\uace0\uba85","\uacf5\uace0\ubc88\ud638/\ucc28\uc218","\uacf5\uace0\ubd80\uc11c","\uacf5\uace0\uc885\ub958","\uc120\ud0dd","\uc0c1\uc2dc\ud22c\ucc30\uc801\uc6a9\uc5ec\ubd80","\uc801\uc6a9","\ubbf8\uc801\uc6a9","\uad6d\ub0b4\uc678\uad6c\ubd84","\uc120\ud0dd","\ud1b5\ud654","\uc120\ud0dd","\uc785\ucc30\ub2f4\ub2f9\ubd80\uc11c","\uc785\ucc30\ub2f4\ub2f9\uc790","\uacc4\uc57d\uc785\ucc30\ubc29\uc2dd","\uacc4\uc57d\ubc29\ubc95","\uc120\ud0dd","\uacc4\uc57d\uad6c\ubd84","\uc120\ud0dd","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95","\uc120\ud0dd","2\ub2e8\uacc4","\uc120\ud0dd","\uc77c\uad04\uc785\ucc30\uc720\ud615","\uc120\ud0dd","\uacf5\ub3d9\uc218\uae09\uc5ec\ubd80","\uc608","\uc544\ub2c8\uc624","\uacf5\ub3d9\uc218\uae09\ubc29\ubc95","\uc120\ud0dd","\uc81c\ud55c\uc5c5\uccb4\uc218","\uacf5\ub3d9\uc218\uae09\uc5c5\uccb4\uc218","\uc81c\uc548\uc11c\uc81c\ucd9c\ubc29\ubc95","ON-LINE","OFF-LINE","\ubc30\uc810\ud55c\ub3c4","\uae30\uc220\ub2a5\ub825\ud3c9\uac00 \ubc30\uc810\ud55c\ub3c4","\uc785\ucc30\uac00\uaca9\ud3c9\uac00 \ubc30\uc810\ud55c\ub3c4","\uc815\uc815\uc0ac\uc720","\uc785\ucc30\uc9c4\ud589","PQ\uc2ec\uc0ac\uc5ec\ubd80","\uc608","\uc544\ub2c8\uc624","\uacf5\uace0\uc77c\uc790","\uc2dc","\ubd84","PQ\uc2ec\uc0ac\uc811\uc218\ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uc785\ucc30\ucc38\uac00\uc2e0\uccad\uc2dc\uc791\uc77c\uc2dc","\uc2dc","\ubd84","\uc785\ucc30\ucc38\uac00\uc2e0\uccad\ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uc785\ucc30\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uc2dc","\ubd84","\uc785\ucc30\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uaddc\uaca9\uc11c\uc81c\ucd9c \uc2dc\uc791\uc77c\uc2dc","\uc2dc","\ubd84","\uaddc\uaca9\uc11c\uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uac00\uaca9\uc785\ucc30\uc11c \uac1c\ucc30\uc77c\uc2dc(\uc608\uc815)","\uc2dc","\ubd84","\u203b \uac1c\ucc30\uc77c\uc2dc : \uc804\uc790\uc785\ucc30\uc11c \uc81c\ucd9c\ub9c8\uac10 \uc77c\uc2dc\ubd80\ud130 1\uc2dc\uac04 \uc774\ud6c4\uc5d0 \uac1c\ucc30","\u300e\uc804\uc790\uc870\ub2ec\uc758 \uc774\uc6a9 \ubc0f \ucd09\uc9c4\uc5d0 \uad00\ud55c \ubc95\ub960 \uc2dc\ud589 \uaddc\uce59 \uc81c\x02\uc870 4\ud56d \uc801\uc6a9\u300f","\ud22c\ucc30\uc81c\ud55c","\uc801\uaca9\uc790\uaca9\uba85","m(\ubbf8\ud130)","\uba74\ud5c8\uc790\uaca9\uba85","\uc9c0\uc5ed\uba85","\uad00\ud560\uad6c\uc5ed","\ucd94\uc815\uac00\uaca9","\ucd94\uc815\uae08\uc561(VAT\ud3ec\ud568)","\uc6d0","\ucd94\uc815\uac00\uaca9(VAT\ubcc4\ub3c4)","\uc6d0","\uc608\ube44\uac00\uaca9 \uae30\ucd08\uae08\uc561","\uae30\ucd08\uae08\uc561","\uc6d0","\uae30\ucd08\uae08\uc561","\ubbf8\uc785\ub825","\uc6d0","\ube44\uace0","\ud604\uc7a5\uc124\uba85\ud68c","\ud604\uc7a5\uc124\uba85\ucc38\uc11d","\uc758\ubb34\uc0ac\ud56d","\uc758\ubb34\uc0ac\ud56d\uc544\ub2d8","\ud604\uc7a5\uc785\ucc30 \uc2e4\uc2dc\uc7a5\uc18c \ubc0f \uc2dc\uac04","\ud604\uc7a5\uc124\uba85\ud68c\uc77c\uc790","\ud604\uc7a5\uc124\uba85\ud68c\uc2dc\uac04","\uc2dc","\ubd84","\uc2dc","\ubd84","\uc785\ucc30\ucd94\uac00\uc0ac\ud56d","\uc790\ub3d9\ucca8\ubd80\ud30c\uc77c","\ud30c\uc77c\uba85","\uc0ac\uc774\uc988","\ucca8\ubd80\ud30c\uc77c","\uc785\ucc30\ucc38\uac00\uc790\uaca9","\uae30\ud0c0","\ucc38\uace0\uc0ac\ud56d","\uc785\ucc30\uc2dc\uac04 \ubcc0\uacbd\uc774\ub825 \uc870\ud68c","\uacf5\uace0\ucc28\uc218","\ubcc0\uacbd\ud56d\ubaa9","\ubcc0\uacbd \uc804","\ubcc0\uacbd \ud6c4","\ubcc0\uacbd\uc0ac\uc720"]});Ext.define("bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewModel1.I18n", {override : "bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewModel1", i18n : ["{0}","{0}","{0}"]});Ext.define("bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewController1.I18n", {override : "bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewController1", i18n : ["{0}","{0}",'"\uc885\ud569\ud3c9\uac00"\ub099\ucc30\ubc29\uc2dd\uc77c \uacbd\uc6b0 "\ub3d9\uc2dc"\uc120\ud0dd\uc774 \ubd88\uac00\ub2a5\ud569\ub2c8\ub2e4.']});Ext.define("bid_sp.view.foreignPrivateContract.detail.product.ForeignPrivateContractDetailSP.I18n", {override : "bid_sp.view.foreignPrivateContract.detail.product.ForeignPrivateContractDetailSP", i18n : ["\uc218\uc758\uacc4\uc57d\uc0c1\uc138","\ubb3c\ud488\uc5d0 \ub300\ud55c \uc218\uc758\uacc4\uc57d \uacf5\uace0\ubb38\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.","\uc778\uc1c4","\ub2eb\uae30","\uae30\ubcf8\uc815\ubcf4","\uacf5\uace0\uc77c\ubc18","\uacf5\uace0\ubc88\ud638/\ucc28\uc218","\uacf5\uace0\uc77c\uc790","\uad6c\ub9e4\uacc4\ud68d\uc77c\uc790","\uad6c\ub9e4\uacc4\ud68d\ubc88\ud638","\uad6c\ub9e4\uc694\uccad\uc77c\uc790","\uad6c\ub9e4\uc720\ud615","\uad6d\ub0b4\uc678\uad6c\ubd84","\uc120\ud0dd","\uacf5\uace0\uba85","\uc785\ucc30\ub2f4\ub2f9\ubd80\uc11c","\uc785\ucc30\ub2f4\ub2f9\uc790","\uc218\uc758\uc0ac\uc720","\uc120\ud0dd","\uacc4\uc57d\uc785\ucc30\ubc29\uc2dd","\ubaa8\uc758\uc785\ucc30\uc5ec\ubd80","\ubaa8\uc758\uc785\ucc30","\uc2e4\uc81c\uc785\ucc30","\uacc4\uc57d\uad6c\ubd84","\uc120\ud0dd","\uc785\ucc30\ubc29\uc2dd","\uc120\ud0dd","\uacc4\uc57d\ubc29\ubc95","\uc120\ud0dd","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95","\uc120\ud0dd","2\ub2e8\uacc4","\uc120\ud0dd","\ud76c\ub9dd\uc218\ub7c9","\ubc30\uc810\ud55c\ub3c4","\uae30\uc220","\uc120\ud0dd","\uac00\uaca9","\uc18c\ud504\ud2b8\uc6e8\uc5b4\uc0ac\uc5c5\uc5ec\ubd80","\ub0a9\uae30","\ub0a9\ud488\uc7a5\uc18c","\uc885\ud569\ub099\ucc30\ubc29\uc2dd","\uc120\ud0dd","\uc885\ud569\ud3c9\uac00","\ucd94\uc815\uac00\uaca9(VAT\ubcc4\ub3c4)","\ud1b5\ud654","\uc120\ud0dd","\ud558\uc790\ubcf4\uc99d\uae30\uac04","\ub144","\uac1c\uc6d4","\uc785\ucc30\uc9c4\ud589","\uc2dc","\ubd84","\uc2dc","\ubd84","\uacf5\ub3d9\uc218\uae09\uc5ec\ubd80","\uc608","\uc544\ub2c8\uc624","\uacf5\ub3d9\uc218\uae09\ubc29\ubc95","\ud574\ub2f9\uc5c6\uc74c","\uc81c\ud55c \uc5c5\uccb4\uc218(2\uc774\uc0c1)","\uacac\uc801\uc11c\uc81c\ucd9c\ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uc81c\ud55c","\uacac\uc801\uc11c\uc81c\ucd9c\ubd80\uc218","\uaddc\uaca9\uc11c\uc81c\ucd9c\ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\ucca8\ubd80\ud30c\uc77c","\ud30c\uc77c\ucca8\ubd80","\uc785\ucc30\ucd94\uac00\uc0ac\ud56d","\uc6a9\ub3c4","\ucd94\uac00\uc815\ubcf4\uc81c\uacf5\ucc98","\uae30\ud0c0","\ud488\ubaa9\uc815\ubcf4","\ud488\ubaa9\uc815\ubcf4","\uc790\uc7ac\uc2dd\ubcc4\ubc88\ud638","\ud488\uba85","\uaddc\uaca9","\ub2e8\uc704","\uc218\ub7c9","\uae30\uc900\ud488\ubaa9","\uad6c\ub9e4\uacc4\ud68d\ubc88\ud638","\ucca8\ubd80\ud30c\uc77c","\uad6c\ub9e4\uaddc\uaca9\uc11c","\ud2b9\uc218\uc870\uac74","\uae30\ud0c0\ucca8\ubd80"]});Ext.define("bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewController1.I18n", {override : "bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewController1", i18n : ["\uc6d0","\uc6d0","{0}","{0}","\uc6d0","\uc6d0"]});Ext.define("bid_sp.view.foreignPrivateContract.detail.service.ForeignPrivateContractDetailSP.I18n", {override : "bid_sp.view.foreignPrivateContract.detail.service.ForeignPrivateContractDetailSP", i18n : ["\uc218\uc758\uacc4\uc57d\uc0c1\uc138","\uacf5\uc0ac/\uc6a9\uc5ed\uc5d0 \ub300\ud55c \uc218\uc758\uacc4\uc57d \uacf5\uace0\ubb38\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.","\ub2eb\uae30","\uae30\ubcf8\uc815\ubcf4","\uacf5\uace0\uc77c\ubc18","\uacf5\uace0\ubc88\ud638/\ucc28\uc218","\uacf5\uace0\uc77c\uc790","\uad6c\ub9e4\uacc4\ud68d\uc77c\uc790","\uad6c\ub9e4\uacc4\ud68d\ubc88\ud638","\uad6c\ub9e4\uc694\uccad\uc77c\uc790","\uad6c\ub9e4\uc720\ud615","\uc120\ud0dd","\uad6d\ub0b4\uc678\uad6c\ubd84","\uc120\ud0dd","\uacf5\uace0\uba85","\uc785\ucc30\ub2f4\ub2f9\ubd80\uc11c","\uc785\ucc30\ub2f4\ub2f9\uc790","\uc218\uc758\uc0ac\uc720","\uc120\ud0dd","\uacc4\uc57d\uc758\ub8b0\ubd80\uc11c","\uacc4\uc57d\uc785\ucc30\ubc29\uc2dd","\ubaa8\uc758\uc785\ucc30\uc5ec\ubd80","\ubaa8\uc758\uc785\ucc30","\uc2e4\uc81c\uc785\ucc30","\uacc4\uc57d\uad6c\ubd84","\uc120\ud0dd","\uc785\ucc30\ubc29\uc2dd","\uc120\ud0dd","\uacc4\uc57d\ubc29\ubc95","\uc120\ud0dd","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95","\uc120\ud0dd","\uacc4\uc57d\uc790\uc120\uc815\ubc29\ubc95","\ud1b5\ud654/\uc18c\uc218\uc810\uc0ac\uc6a9","\uc120\ud0dd","\uacf5\uc0ac/\uc6a9\uc5ed\uae30\uac04","\ub3c4\uae09\uc608\uc0b0\uc561/\ud55c\uae00\uae08\uc561","\ubd80\uac00\uac00\uce58\uc138\ud3ec\ud568","\uc0ac\uc815\uae08\uc561/\ud55c\uae00\uae08\uc561","\ubd80\uac00\uac00\uce58\uc138\ud3ec\ud568","\ubc30\uc810\ud55c\ub3c4","\uae30\uc220","\uc120\ud0dd","\uac00\uaca9","\uc18c\ud504\ud2b8\uc6e8\uc5b4\uc0ac\uc5c5\uc5ec\ubd80","\uc785\ucc30\uc9c4\ud589","\uc218\uc758\uc2dc\ub2f4\ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uc2dc","\ubd84","\uacf5\ub3d9\uc218\uae09\uc5ec\ubd80","\uc608","\uc544\ub2c8\uc624","\uacf5\ub3d9\uc218\uae09\ubc29\ubc95","\ud574\ub2f9\uc5c6\uc74c","\uc81c\ud55c \uc5c5\uccb4\uc218(2\uc774\uc0c1)","\uacac\uc801\uc11c\uc81c\ucd9c\uc77c\uc2dc","\uc2dc","\ubd84","~","\uc2dc","\ubd84","\uacac\uc801\uc11c\uc81c\ucd9c\uc5ec\ubd80","\ucca8\ubd80\ud30c\uc77c","\uc790\ub3d9\ucca8\ubd80\ud30c\uc77c","\ud30c\uc77c\uba85","\uc0ac\uc774\uc988","\ud30c\uc77c\ucca8\ubd80","\uc785\ucc30\ucd94\uac00\uc0ac\ud56d","\uacc4\uc57d\ubb3c\ub7c9 \ub610\ub294 \uaddc\ubaa8"]});Ext.define("bid_sp.view.jointSupply.list.JointSupplyAndDemandList.I18n", {override : "bid_sp.view.jointSupply.list.JointSupplyAndDemandList", i18n : ["\uacf5\ub3d9\uc218\uae09\ubaa9\ub85d","\uad6c\ub9e4\uc0ac\uc5d0\uac8c \uacf5\ub3d9\uc218\uae09\ud611\uc815\uc11c\ub97c \uc791\uc131/\uc81c\ucd9c\ud569\ub2c8\ub2e4.","\uc870\ud68c","\ucd08\uae30\ud654","\uacf5\uace0\uc77c\uc790","\uacf5\uace0\ubc88\ud638","\uc785\ucc30\uac74\uba85","\uacf5\ub3d9\uc218\uae09\uc0c1\ud0dc","\uc804\uccb4","\uacf5\ub3d9\uc218\uae09\ud611\uc815\uc11c\uc791\uc131","\uc81c\ucd9c/\uc2b9\uc778","\uacf5\ub3d9\uc218\uae09\ubc29\ubc95","\uacf5\ub3d9\uc218\uae09\ucc38\uc5ec\ud615\ud0dc","\uacf5\ub3d9\uc218\uae09\uc0c1\ud0dc","\uc6b4\uc601\ub2e8\uc704","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\ucc28\uc218","\uc785\ucc30\uac74\uba85","\uacf5\uace0\ubd80\uc11c","\uacf5\uace0\uc77c\uc790","\uc785\ucc30\ucc38\uac00\ub9c8\uac10\uc77c","\uacc4\uc57d\ubc29\ubc95","\ub099\ucc30\uc790\uc120\uc815","\uacf5\uace0\uad6c\ubd84","\uc785\ucc30\uac1c\uc2dc\uc77c\uc2dc","\uc785\ucc30\ub9c8\uac10\uc77c\uc2dc"]});Ext.define("bid_sp.view.jointSupply.detail.JointSupplyAndDemandDetail.I18n", {override : "bid_sp.view.jointSupply.detail.JointSupplyAndDemandDetail", i18n : ["\uacf5\ub3d9\uc218\uae09 \ud611\uc815\uc11c \uc791\uc131","\uacf5\ub3d9/\ubd84\ub2f4\uc774\ud589\ud611\uc815\uc11c \uc791\uc131\uc744 \ud569\ub2c8\ub2e4.","\uc784\uc2dc\uc800\uc7a5","\uc791\uc131\uc644\ub8cc","\uc791\uc131","\ub2eb\uae30","\uae30\ubcf8\uc815\ubcf4","\uacf5\uace0\ubc88\ud638","\uc785\ucc30\uac74\uba85","\uacf5\ub3d9\uc218\uae09\ubc29\uc2dd","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95","\uacf5\ub3d9\uc218\uae09\uac00\ub2a5\uc5c5\uccb4\uc218","\u203b\uacc4\uc88c\uc815\ubcf4\ub294 SRM \u2192 \ud68c\uc6d0\uc13c\ud130 \u2192 \uacc4\uc88c\uc815\ubcf4\uc5d0 \ub4f1\ub85d\ub41c \uacc4\uc88c\uc815\ubcf4\ub85c \ub300\uae08\uc774 \uc9c0\uae09\ub429\ub2c8\ub2e4.(\uacc4\uc88c\uc815\ubcf4\uc5d0\uc11c \uc870\ud68c \ubc0f \ub4f1\ub85d\uac00\ub2a5)","\uc5c5\uccb4\ucd94\uac00","\uc0ad\uc81c","\uc120\ud0dd","\ud68c\uc0ac\uba85","\uc0ac\uc5c5\uc790\ubc88\ud638","\ub300\ud45c\uc790","\uc9c0\ubd84\uc728","\uc740\ud589\uba85","\uc608\uae08\uc8fc","\uacc4\uc88c\ubc88\ud638","\ube44\uace0"]});Ext.define("bid_sp.view.openInfoData.list.BidResultListViewController.I18n", {override : "bid_sp.view.openInfoData.list.BidResultListViewController", i18n : ["\uacf5\uace0\uc77c\uc790\ub294 \ud544\uc218\uc785\ub825\uc785\ub2c8\ub2e4.","\ud574\ub2f9 \uacf5\uace0\ub294 \uacf5\uac1c \ub300\uc0c1\uc774 \uc544\ub2d9\ub2c8\ub2e4."]});Ext.define("bid_sp.view.openInfoData.list.BidResultList.I18n", {override : "bid_sp.view.openInfoData.list.BidResultList", i18n : ["\uac1c\ucc30\uacb0\uacfc\uc870\ud68c","\uc785\ucc30\uc5d0 \ub300\ud55c \uac1c\ucc30\uacb0\uacfc\ub97c \uc870\ud68c\ud569\ub2c8\ub2e4.","\uc870\ud68c","\ucd08\uae30\ud654","\ud68c\uc0ac\uc774\ub984","\uacf5\uace0\uc77c\uc790","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\uba85","\u203b \uc790\uc7ac\uc785\ucc30 : \ud55c\uad6d\uc804\ub825\uae30\uc220, \uc6d0\uc790\ub825\uc5f0\ub8cc, \ubc1c\uc804\uad50\uc721\uc6d0\uc5d0\uc11c \ub4f1\ub85d\ud55c \uacf5\uace0\ub294 \uacf5\uac1c\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","\u203b \uacf5\uc0ac/\uc6a9\uc5ed\uc785\ucc30 : \ud55c\uad6d\uc804\ub825\uacf5\uc0ac/\uc804\ub825\uac70\ub798\uc18c/\ubc1c\uc8045\uc0ac \uacf5\uace0\ub300\uc0c1 \uacf5\uc0ac/\uc6a9\uc5ed \uc785\ucc30\uc758 \uac1c\ucc30\uacb0\uacfc\uc5d0 \ub300\ud55c \ubaa9\ub85d\uc785\ub2c8\ub2e4. (2011/01/01 \uacf5\uace0\ubd80\ud130 \uacf5\uac1c)","\uc785\ucc30\uacb0\uacfc","\ud68c\uc0ac\uc774\ub984","\uad6c\ub9e4\uc720\ud615","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\ucc28\uc218","\uc785\ucc30\ucc28\uc218","\uacf5\uace0\uba85","\uacf5\uace0\ubd80\uc11c","\uacf5\uace0\uc77c\uc790","\uacc4\uc57d\ubc29\ubc95","\ub099\ucc30\uc790\uc120\uc815","\uacf5\uace0\uc885\ub958","\uc785\ucc30\ucc38\uac00 \ub9c8\uac10\uc77c\uc2dc","\uc785\ucc30\uc11c \uc81c\ucd9c \uac1c\uc2dc\uc77c\uc2dc","\uc785\ucc30\uc11c \uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc"]});Ext.define("bid_sp.view.openInfoData.detail.product.BidResultDetailProductViewModel.I18n", {override : "bid_sp.view.openInfoData.detail.product.BidResultDetailProductViewModel", i18n : ["\uc6d0","\ub2ec\ub7ec"]});Ext.define("bid_sp.view.openInfoData.detail.product.BidResultDetailProduct.I18n", {override : "bid_sp.view.openInfoData.detail.product.BidResultDetailProduct", i18n : ["\uac1c\ucc30\uacb0\uacfc \uc0c1\uc138\uc870\ud68c","\uc785\ucc30\uac1c\ucc30\uacb0\uacfc \uc0c1\uc138\ub0b4\uc5ed\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.","\ubcf5\uc218\ucd94\ucca8\uacb0\uacfc\ud655\uc778","\ub2eb\uae30","\uc785\ucc30 \uae30\ubcf8\uc815\ubcf4","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\uba85","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95","\uc785\ucc30\ub2f4\ub2f9\uc790","\ub099\ucc30\ucc28\uc218","\uacc4\uc57d\uad6c\ubd84","\ud1b5\ud654","\uc81c\uc548\uc11c \ud3c9\uac00\uacb0\uacfc","\uc608\uc815\uac00\uaca9","\uae30\ucd08\uae08\uc561","\ud22c\ucc30\ub0b4\uc5ed\uc870\ud68c","\u203b \uc885\ud569\ub099\ucc30\uc81c\uc758 \uacbd\uc6b0 \ud22c\ucc30\uae08\uc561\uacfc \uc5d0\ub108\uc9c0\uc18c\ubaa8\ube44\uc6a9\uc744 \ud569\uc0b0\ud558\uc5ec \ucd5c\uc885 \ub099\ucc30\uc790\ub97c \uc120\uc815\ud568. \uc885\ud569\ub099\ucc30\uc81c\uc758 \uacbd\uc6b0 \ud22c\ucc30\ub960\uc774 \uacf5\uac1c\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","\ud22c\ucc30\uc21c\uc704","\uc5c5\uccb4\uba85","\uc0ac\uc5c5\uc790\ub4f1\ub85d\ubc88\ud638","\ub300\ud45c\uc790","\uc81c\uc548\uc810\uc218","\uac00\uaca9\uc810\uc218","\ucd1d\uc810","\uc81c\uc548\uc11c\ud3c9\uac00\uacb0\uacfc","\ud22c\ucc30\uae08\uc561","\ud22c\ucc30\uc218\ub7c9[\ub099\ucc30\uc218\ub7c9]","\ud22c\ucc30\uc728(%)","\ud22c\ucc30\uc77c\uc2dc","\ucd94\ucca8\ubc88\ud638","\ube44\uace0","\uc81c\uc548\uc11c\ud3c9\uac00\uacb0\uacfc","\uc5c5\uccb4\uba85","\uc81c\uc548\uc810\uc218","\uc81c\uc548\uc11c\ud3c9\uac00\uacb0\uacfc"]});Ext.define("bid_sp.view.openInfoData.detail.service.BidResultDetailService.I18n", {override : "bid_sp.view.openInfoData.detail.service.BidResultDetailService", i18n : ["\uc785\ucc30\uacf5\uace0 \uac1c\ucc30\uacb0\uacfc","\uc785\ucc30\uac1c\ucc30\uacb0\uacfc \uc0c1\uc138\ub0b4\uc5ed\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.","\ubcf5\uc218\ucd94\ucca8\uacb0\uacfc\ud655\uc778","\ub2eb\uae30","\uc785\ucc30 \uae30\ubcf8\uc815\ubcf4","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\uba85","\uacf5\uace0\uc0ac\uc5c5\uc18c","\uacf5\uace0\uc885\ub958","\uacc4\uc57d\uad6c\ubd84","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95","\uc608\uc815\uac00\uaca9","\uc6d0","\uc801\uaca9\ub960(%)","\ud22c\ucc30\ub0b4\uc5ed\uc870\ud68c","\u203b \uc801\uaca9\uc2ec\uc0ac \ub300\uc0c1\uc790 \ubaa9\ub85d","\uc2ec\uc0ac\uc21c\uc704","\uc5c5\uccb4\uba85","\uc0ac\uc5c5\uc790\ub4f1\ub85d\ubc88\ud638","\ub300\ud45c\uc790","\uc81c\uc548\uc810\uc218","\uac00\uaca9\uc810\uc218","\ucd1d\uc810","\uc81c\uc548\uc11c\ud3c9\uac00\uacb0\uacfc","\ud22c\ucc30\uae08\uc561","\ud22c\ucc30\uc728(%)","\ud22c\ucc30\uc77c\uc2dc","\ube44\uace0","\u203b \uc801\uaca9\ub960 \ud0c8\ub77d(\ubbf8\ub9cc, \ucd08\uacfc) \ub300\uc0c1\uc790 \ubaa9\ub85d","\uc5c5\uccb4\uba85","\uc0ac\uc5c5\uc790\ub4f1\ub85d\ubc88\ud638","\ub300\ud45c\uc790","\ucd1d\uc810","\uc81c\uc548\uc11c\ud3c9\uac00\uacb0\uacfc","\ud22c\ucc30\uae08\uc561","\ud22c\ucc30\uc728(%)","\ud22c\ucc30\uc77c\uc2dc","\ube44\uace0"]});Ext.define("bid_sp.view.openInfoData.detail.service.BidResultDetailServiceFail.I18n", {override : "bid_sp.view.openInfoData.detail.service.BidResultDetailServiceFail", i18n : ["\uc785\ucc30\uacf5\uace0 \uac1c\ucc30\uacb0\uacfc","\uc785\ucc30\uac1c\ucc30\uacb0\uacfc \uc0c1\uc138\ub0b4\uc5ed\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.","\ubcf5\uc218\ucd94\ucca8\uacb0\uacfc\ud655\uc778","\ub2eb\uae30","\uc785\ucc30 \uae30\ubcf8\uc815\ubcf4","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\uba85","\uacf5\uace0\uc0ac\uc5c5\uc18c","\uacf5\uace0\uc885\ub958","\uacc4\uc57d\uad6c\ubd84","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95","\uc608\uc815\uac00\uaca9","\uc6d0","\uc801\uaca9\ub960(%)","\ud22c\ucc30\ub0b4\uc5ed\uc870\ud68c","\uac1c\ucc30\uacb0\uacfc\ub97c \ud655\uc778\ud560 \uc218 \uc5c6\ub294 \uc0c1\ud0dc\uc785\ub2c8\ub2e4.","\uc0c1\ud0dc","\uc0ac\uc720"]});Ext.define("bid_sp.view.openInfoData.detail.product.BidResultDetailProductFail.I18n", {override : "bid_sp.view.openInfoData.detail.product.BidResultDetailProductFail", i18n : ["\uac1c\ucc30\uacb0\uacfc \uc0c1\uc138\uc870\ud68c","\uc785\ucc30\uac1c\ucc30\uacb0\uacfc \uc0c1\uc138\ub0b4\uc5ed\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.","\ub2eb\uae30","\uc785\ucc30 \uae30\ubcf8\uc815\ubcf4","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\uba85","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95","\uc785\ucc30\ub2f4\ub2f9\uc790","\ub099\ucc30\ucc28\uc218","\uc720\ucc30\uc0ac\uc720","\uc9c4\ud589\uc0c1\ud0dc","\uc720\ucc30\uc0ac\uc720","\ube44\uace0"]});Ext.define("bid_sp.view.openInfoData.list.ContractResultByItemList.I18n", {override : "bid_sp.view.openInfoData.list.ContractResultByItemList", i18n : ["\ud488\ubaa9\ubcc4 \uacc4\uc57d\ud604\ud669","\uc5c5\uccb4\ubcc4 \uacc4\uc57d\ud604\ud669\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.","\uc870\ud68c","\ucd08\uae30\ud654","\ud68c\uc0ac\uc774\ub984","\uacc4\uc57d\uc77c\uc790","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\uba85","\u203b \ud55c\uad6d\uc804\ub825\uae30\uc220, \uc6d0\uc790\ub825\uc5f0\ub8cc, \ubc1c\uc804\uad50\uc721\uc6d0, \uc804\ub825\uac70\ub798\uc18c\uc5d0\uc11c \ub4f1\ub85d\ud55c \uacf5\uace0\ub294 \uacf5\uac1c\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","\u203b 2013.01.01 \uacc4\uc57d\uac74\ubd80\ud130 \uc870\ud68c\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4.","\ud68c\uc0ac\uc774\ub984","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\ucc28\uc218","\uc785\ucc30\ucc28\uc218","\uacf5\uace0\uba85","\uacf5\uace0\ubd80\uc11c","\uacf5\uace0\uc77c\uc790","\uacc4\uc57d\ubc29\ubc95","\ub099\ucc30\uc790\uc120\uc815","\uacf5\uace0\uc885\ub958","\uc785\ucc30\ucc38\uac00 \ub9c8\uac10\uc77c\uc2dc","\uc785\ucc30\uc11c \uc81c\ucd9c \uac1c\uc2dc\uc77c\uc2dc","\uc785\ucc30\uc11c \uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uacc4\uc57d\uae08\uc561(VAT\uc81c\uc678)","\uacc4\uc57d\uc5c5\uccb4"]});Ext.define("bid_sp.view.openInfoData.list.ContractResultByVendorList.I18n", {override : "bid_sp.view.openInfoData.list.ContractResultByVendorList", i18n : ["\uc5c5\uccb4\ubcc4 \uacc4\uc57d\ud604\ud669","\uc5c5\uccb4\ubcc4 \uacc4\uc57d\ud604\ud669\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.","\uc870\ud68c","\ucd08\uae30\ud654","\ud68c\uc0ac\uc774\ub984","\uacc4\uc57d\uc77c\uc790","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\uba85","\u203b \ud55c\uad6d\uc804\ub825\uae30\uc220, \uc6d0\uc790\ub825\uc5f0\ub8cc, \ubc1c\uc804\uad50\uc721\uc6d0, \uc804\ub825\uac70\ub798\uc18c\uc5d0\uc11c \ub4f1\ub85d\ud55c \uacf5\uace0\ub294 \uacf5\uac1c\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","\u203b 2013.01.01 \uacc4\uc57d\uac74\ubd80\ud130 \uc870\ud68c\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4.","\ud68c\uc0ac\uc774\ub984","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\ucc28\uc218","\uc785\ucc30\ucc28\uc218","\uacf5\uace0\uba85","\uacf5\uace0\ubd80\uc11c","\uacf5\uace0\uc77c\uc790","\uacc4\uc57d\ubc29\ubc95","\ub099\ucc30\uc790\uc120\uc815","\uacf5\uace0\uc885\ub958","\uc785\ucc30\ucc38\uac00 \ub9c8\uac10\uc77c\uc2dc","\uc785\ucc30\uc11c \uc81c\ucd9c \uac1c\uc2dc\uc77c\uc2dc","\uc785\ucc30\uc11c \uc81c\ucd9c \ub9c8\uac10\uc77c\uc2dc","\uacc4\uc57d\uae08\uc561(VAT\uc81c\uc678)"]});Ext.define("bid_sp.view.openInfoData.list.ContractResultStatsList.I18n", {override : "bid_sp.view.openInfoData.list.ContractResultStatsList", i18n : ["\uacc4\uc57d\ubc29\ubc95\ubcc4 \ud1b5\uacc4","\uc5c5\uccb4\ubcc4 \uacc4\uc57d\ud604\ud669\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.","\uc870\ud68c","\ucd08\uae30\ud654","\ud68c\uc0ac\uc774\ub984","\uacc4\uc57d\uc77c\uc790","\u203b \ud55c\uad6d\uc804\ub825\uae30\uc220, \uc6d0\uc790\ub825\uc5f0\ub8cc, \ubc1c\uc804\uad50\uc721\uc6d0, \uc804\ub825\uac70\ub798\uc18c\uc5d0\uc11c \ub4f1\ub85d\ud55c \uacf5\uace0\ub294 \uacf5\uac1c\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","\u203b 2013.01.01 \uacc4\uc57d\uac74\ubd80\ud130 \uc870\ud68c\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4.","\uad6c\ubd84","\ucd1d\uac00\uae08\uc561","\uac74\uc218","\uae08\uc561","\ub2e8\uac00\uae08\uc561","\uac74\uc218","\uae08\uc561","\ud569\uacc4","\uac74\uc218","\uae08\uc561","\u203b \uacc4\uc57d\uad6c\ubd84\ubcc4 \ud569\uacc4 \uae08\uc561\uacfc \ud569\uacc4(\uc18c\uacc4)\uae08\uc561\uc758 \ucc28\uc774\uac00 \ubc1c\uc0dd\ud560\uc218 \uc788\uc2b5\ub2c8\ub2e4."]});Ext.define("bid_sp.view.openInfoData.list.SuccessVendorInfoListViewController.I18n", {override : "bid_sp.view.openInfoData.list.SuccessVendorInfoListViewController", i18n : ["\uacf5\uace0\uc77c\uc790\ub294 \ud544\uc218\uc785\ub825\uc785\ub2c8\ub2e4."]});Ext.define("bid_sp.view.openInfoData.list.SuccessVendorInfoList.I18n", {override : "bid_sp.view.openInfoData.list.SuccessVendorInfoList", i18n : ["\ub099\ucc30\uc790\uc815\ubcf4\uacf5\uac1c","\uc785\ucc30\uc5d0 \ub300\ud55c \uac1c\ucc30\uacb0\uacfc\ub97c \uc870\ud68c\ud569\ub2c8\ub2e4.","\uc870\ud68c","\ucd08\uae30\ud654","\ud68c\uc0ac\uc774\ub984","\uacf5\uace0\uc77c\uc790","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\uba85","(\ud55c\uad6d\uc804\ub825\uacf5\uc0ac, \ud55c\uad6d\uc804\ub825\uad6d\uc81c\uc6d0\uc790\ub825\ub300\ud559\uc6d0\ub300\ud559\uad50, \ud55c\uad6d\ud574\uc0c1\ud48d\ub825(\uc8fc), \ucf11\ucf54\uc54c\uc2a4\ud1b0\ud53c\uc774\uc5d0\uc2a4 \uc8fc\uc2dd\ud68c\uc0ac \uc785\ucc30\uac74\uc5d0 \ub300\ud55c \ub099\ucc30\uc815\ubcf4\uc785\ub2c8\ub2e4.)","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\uba85","\ub099\ucc30\uc790","\uc5c5\uccb4\uba85","\ub300\ud45c\uc790\uc131\uba85","\uc8fc\uc18c","\ub099\ucc30\uae08\uc561(\ubd80\uac00\uc138\ud3ec\ud568)","\ub099\ucc30\uc77c\uc2dc","\uc785\ucc30\ucc38\uac00\uc5c5\uccb4(\uad6c\ud604\uc608\uc815)","\uc608\uc815\ub0a9\uae30\uc77c","\ub099\ucc30\uc790\uc120\uc815","\ub2f4\ub2f9\uc790","\uc131\uba85","\uc804\ud654\ubc88\ud638"]});Ext.define("bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewModel.I18n", {override : "bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewModel", i18n : ["{0}","{0}","{0}"]});Ext.define("bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewController.I18n", {override : "bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewController", i18n : ["{0}","{0}",'"\uc885\ud569\ud3c9\uac00"\ub099\ucc30\ubc29\uc2dd\uc77c \uacbd\uc6b0 "\ub3d9\uc2dc"\uc120\ud0dd\uc774 \ubd88\uac00\ub2a5\ud569\ub2c8\ub2e4.']});Ext.define("bid_sp.view.privateContract.detail.product.PrivateContractDetailSP.I18n", {override : "bid_sp.view.privateContract.detail.product.PrivateContractDetailSP", i18n : ["\uc218\uc758\uacc4\uc57d\uc0c1\uc138","\ubb3c\ud488\uc5d0 \ub300\ud55c \uc218\uc758\uacc4\uc57d \uacf5\uace0\ubb38\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.","\uc778\uc1c4","\ub2eb\uae30","\uae30\ubcf8\uc815\ubcf4","\uacf5\uace0\uc77c\ubc18","\uacf5\uace0\ubc88\ud638/\ucc28\uc218","\uacf5\uace0\uc77c\uc790","\uad6c\ub9e4\uacc4\ud68d\uc77c\uc790","\uad6c\ub9e4\uacc4\ud68d\ubc88\ud638","\uad6c\ub9e4\uc694\uccad\uc77c\uc790","\uad6c\ub9e4\uc720\ud615","\uad6d\ub0b4\uc678\uad6c\ubd84","\uc120\ud0dd","\uacf5\uace0\uba85","\uc785\ucc30\ub2f4\ub2f9\ubd80\uc11c","\uc785\ucc30\ub2f4\ub2f9\uc790","\uc218\uc758\uc0ac\uc720","\uc120\ud0dd","\uacc4\uc57d\uc785\ucc30\ubc29\uc2dd","\ubaa8\uc758\uc785\ucc30\uc5ec\ubd80","\ubaa8\uc758\uc785\ucc30","\uc2e4\uc81c\uc785\ucc30","\uacc4\uc57d\uad6c\ubd84","\uc120\ud0dd","\uc785\ucc30\ubc29\uc2dd","\uc120\ud0dd","\uacc4\uc57d\ubc29\ubc95","\uc120\ud0dd","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95","\uc120\ud0dd","2\ub2e8\uacc4","\uc120\ud0dd","\ud76c\ub9dd\uc218\ub7c9","\ubc30\uc810\ud55c\ub3c4","\uae30\uc220","\uc120\ud0dd","\uac00\uaca9","\uc18c\ud504\ud2b8\uc6e8\uc5b4\uc0ac\uc5c5\uc5ec\ubd80","\ub0a9\uae30","\ub0a9\ud488\uc7a5\uc18c","\uc885\ud569\ub099\ucc30\ubc29\uc2dd","\uc120\ud0dd","\uc885\ud569\ud3c9\uac00","\ucd94\uc815\uac00\uaca9(VAT\ubcc4\ub3c4)","\ud1b5\ud654","\uc120\ud0dd","\ud558\uc790\ubcf4\uc99d\uae30\uac04","\ub144","\uac1c\uc6d4","\uc785\ucc30\uc9c4\ud589","\uc2dc","\ubd84","\uc2dc","\ubd84","\uacf5\ub3d9\uc218\uae09\uc5ec\ubd80","\uc608","\uc544\ub2c8\uc624","\uacf5\ub3d9\uc218\uae09\ubc29\ubc95","\ud574\ub2f9\uc5c6\uc74c","\uc81c\ud55c \uc5c5\uccb4\uc218(2\uc774\uc0c1)","\uacac\uc801\uc11c\uc81c\ucd9c\ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uc81c\ud55c","\uacac\uc801\uc11c\uc81c\ucd9c\ubd80\uc218","\uaddc\uaca9\uc11c\uc81c\ucd9c\ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\ucca8\ubd80\ud30c\uc77c","\ud30c\uc77c\ucca8\ubd80","\uc785\ucc30\ucd94\uac00\uc0ac\ud56d","\uc6a9\ub3c4","\ucd94\uac00\uc815\ubcf4\uc81c\uacf5\ucc98","\uae30\ud0c0","\ud488\ubaa9\uc815\ubcf4","\ud488\ubaa9\uc815\ubcf4","\uc790\uc7ac\uc2dd\ubcc4\ubc88\ud638","\ud488\uba85","\uaddc\uaca9","\ub2e8\uc704","\uc218\ub7c9","\uae30\uc900\ud488\ubaa9","\uad6c\ub9e4\uacc4\ud68d\ubc88\ud638","\ucca8\ubd80\ud30c\uc77c","\uad6c\ub9e4\uaddc\uaca9\uc11c","\ud2b9\uc218\uc870\uac74","\uae30\ud0c0\ucca8\ubd80"]});Ext.define("bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewController.I18n", {override : "bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewController", i18n : ["\uc6d0","\uc6d0","{0}","{0}","\uc6d0","\uc6d0"]});Ext.define("bid_sp.view.privateContract.detail.service.PrivateContractDetailSP.I18n", {override : "bid_sp.view.privateContract.detail.service.PrivateContractDetailSP", i18n : ["\uc218\uc758\uacc4\uc57d\uc0c1\uc138","\uacf5\uc0ac/\uc6a9\uc5ed\uc5d0 \ub300\ud55c \uc218\uc758\uacc4\uc57d \uacf5\uace0\ubb38\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.","\ub2eb\uae30","\uae30\ubcf8\uc815\ubcf4","\uacf5\uace0\uc77c\ubc18","\uacf5\uace0\ubc88\ud638/\ucc28\uc218","\uacf5\uace0\uc77c\uc790","\uad6c\ub9e4\uacc4\ud68d\uc77c\uc790","\uad6c\ub9e4\uacc4\ud68d\ubc88\ud638","\uad6c\ub9e4\uc694\uccad\uc77c\uc790","\uad6c\ub9e4\uc720\ud615","\uc120\ud0dd","\uad6d\ub0b4\uc678\uad6c\ubd84","\uc120\ud0dd","\uacf5\uace0\uba85","\uc785\ucc30\ub2f4\ub2f9\ubd80\uc11c","\uc785\ucc30\ub2f4\ub2f9\uc790","\uc218\uc758\uc0ac\uc720","\uc120\ud0dd","\uacc4\uc57d\uc758\ub8b0\ubd80\uc11c","\uacc4\uc57d\uc785\ucc30\ubc29\uc2dd","\ubaa8\uc758\uc785\ucc30\uc5ec\ubd80","\ubaa8\uc758\uc785\ucc30","\uc2e4\uc81c\uc785\ucc30","\uacc4\uc57d\uad6c\ubd84","\uc120\ud0dd","\uc785\ucc30\ubc29\uc2dd","\uc120\ud0dd","\uacc4\uc57d\ubc29\ubc95","\uc120\ud0dd","\ub099\ucc30\uc790\uacb0\uc815\ubc29\ubc95","\uc120\ud0dd","\uacc4\uc57d\uc790\uc120\uc815\ubc29\ubc95","\ud1b5\ud654/\uc18c\uc218\uc810\uc0ac\uc6a9","\uc120\ud0dd","\uacf5\uc0ac/\uc6a9\uc5ed\uae30\uac04","\ub3c4\uae09\uc608\uc0b0\uc561/\ud55c\uae00\uae08\uc561","\ubd80\uac00\uac00\uce58\uc138\ud3ec\ud568","\uc0ac\uc815\uae08\uc561/\ud55c\uae00\uae08\uc561","\ubd80\uac00\uac00\uce58\uc138\ud3ec\ud568","\ubc30\uc810\ud55c\ub3c4","\uae30\uc220","\uc120\ud0dd","\uac00\uaca9","\uc18c\ud504\ud2b8\uc6e8\uc5b4\uc0ac\uc5c5\uc5ec\ubd80","\uc785\ucc30\uc9c4\ud589","\uc218\uc758\uc2dc\ub2f4\ub9c8\uac10\uc77c\uc2dc","\uc2dc","\ubd84","\uc2dc","\ubd84","\uacf5\ub3d9\uc218\uae09\uc5ec\ubd80","\uc608","\uc544\ub2c8\uc624","\uacf5\ub3d9\uc218\uae09\ubc29\ubc95","\ud574\ub2f9\uc5c6\uc74c","\uc81c\ud55c \uc5c5\uccb4\uc218(2\uc774\uc0c1)","\uacac\uc801\uc11c\uc81c\ucd9c\uc77c\uc2dc","\uc2dc","\ubd84","~","\uc2dc","\ubd84","\uacac\uc801\uc11c\uc81c\ucd9c\uc5ec\ubd80","\ucca8\ubd80\ud30c\uc77c","\uc790\ub3d9\ucca8\ubd80\ud30c\uc77c","\ud30c\uc77c\uba85","\uc0ac\uc774\uc988","\ud30c\uc77c\ucca8\ubd80","\uc785\ucc30\ucd94\uac00\uc0ac\ud56d","\uacc4\uc57d\ubb3c\ub7c9 \ub610\ub294 \uaddc\ubaa8"]});Ext.define("bid_sp.view.reverseauction.attend.ReverseAuctionAttendListViewController.I18n", {override : "bid_sp.view.reverseauction.attend.ReverseAuctionAttendListViewController", i18n : ['"{0}" \ud544\uc218\uac12\uc744 \ud655\uc778 \ud574\uc8fc\uc2ed\uc2dc\uc624.','\uc5ed\uacbd\ub9e4 \uc9c4\ud589\uc0c1\ud0dc\uac00 "\uc785\ucc30\uc9c4\ud589"\uc77c\ub54c \ud22c\ucc30\uac00\ub2a5\ud569\ub2c8\ub2e4.',"\uc120\ud0dd\ub41c \ub0b4\uc6a9\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.",'\uc5ed\uacbd\ub9e4 \uc9c4\ud589\uc0c1\ud0dc\uac00 "\uc885\ub8cc"\uc774\uace0 \uc5ed\uacbd\ub9e4 \uacb0\uacfc\uc0c1\ud0dc\uac00 "\ub099\ucc30"\uc77c \ub54c \ud655\uc778\uac00\ub2a5\ud569\ub2c8\ub2e4.',"\uc120\ud0dd\ub41c \ub0b4\uc6a9\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.","\uc5ed\uacbd\ub9e4\ud22c\ucc30"]});Ext.define("bid_sp.view.reverseauction.attend.ReverseAuctionAttendList.I18n", {override : "bid_sp.view.reverseauction.attend.ReverseAuctionAttendList", i18n : ["\uc5ed\uacbd\ub9e4 \ud22c\ucc30 \ubc0f \uacb0\uacfc\ub97c \uc870\ud68c\ud55c\ub2e4.","\uc870\ud68c","\ucd08\uae30\ud654","\ub2eb\uae30","\ud68c\uc0ac\uc774\ub984","\uacf5\uace0\uc2dc\uc791\uc77c\uc2dc","\uc9c4\ud589\uc0c1\ud0dc","\uc804\uccb4","\uacb0\uacfc\uc0c1\ud0dc","\uc804\uccb4","\uc9c0\uc5ed\uc81c\ud55c","\uc804\uccb4","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\uba85","\uc5ed\uacbd\ub9e4\ud22c\ucc30","\uacb0\uacfc\uc870\ud68c","\uc9c4\ud589\uc0c1\ud0dc","\uacb0\uacfc\uc0c1\ud0dc","\uc5ed\uacbd\ub9e4 \uc9c4\ud589\uc0c1\ud0dc","\uc5ed\uacbd\ub9e4 \uacb0\uacfc\uc0c1\ud0dc","\ud68c\uc0ac\uc774\ub984","\uacf5\uace0\ubc88\ud638","\ucc28\uc218","\uacf5\uace0\uba85","\uacf5\uace0\uc2dc\uc791\uc77c\uc2dc","\uc5ed\uacbd\ub9e4\uae30\uac04","\uc9c0\uc5ed\uc81c\ud55c","\uacf5\uace0\ubd80\uc11c","\uc785\ucc30\ub2f4\ub2f9\uc790"]});Ext.define("bid_sp.view.reverseauction.progress.ReverseAuctionChartViewModel.I18n", {override : "bid_sp.view.reverseauction.progress.ReverseAuctionChartViewModel", i18n : ["{0}","{0}"]});Ext.define("bid_sp.view.reverseauction.progress.ReverseAuctionChartViewController.I18n", {override : "bid_sp.view.reverseauction.progress.ReverseAuctionChartViewController", i18n : ["\ucd5c\uc18c \uc785\ucc30\ub2e8\uc704 \uae08\uc561\uc5d0 \ub9de\ucd94\uc5b4 \uc81c\ucd9c\ud574\uc57c \ud569\ub2c8\ub2e4.","\uc2dc\uc791\uac00\uaca9\ubcf4\ub2e4 \ub0ae\uc740 \uae08\uc561\uc744 \uc81c\ucd9c\ud574\uc57c \ud569\ub2c8\ub2e4.","\ud604\uc7ac \ucd5c\uc800 \uc785\ucc30\uac00\ubcf4\ub2e4 \ub0ae\uc740 \uae08\uc561\uc744 \uc81c\ucd9c\ud574\uc57c \ud569\ub2c8\ub2e4.","\ud22c\ucc30\uac00\ub2a5\ud55c \uc0c1\ud0dc\uac00 \uc544\ub2d9\ub2c8\ub2e4.","{0}","\uc81c\ucd9c \ud558\uc600\uc2b5\ub2c8\ub2e4.","\uc751\ucc30\uac00\uaca9\uc740 0\ubcf4\ub2e4 \ucee4\uc57c\ud569\ub2c8\ub2e4.","\uc751\ucc30\uac00\uaca9\uacfc \uc751\ucc30\uac00\uaca9\ud655\uc778\uac12\uc774 \uc77c\uce58\ud569\ub2c8\ub2e4.","\uc751\ucc30\uac00\uaca9\uacfc \uc751\ucc30\uac00\uaca9\ud655\uc778\uac12\uc774 \uc77c\uce58\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.<br>\uc751\ucc30\uac00\uaca9\uacfc \uc751\ucc30\uac00\uaca9\ud655\uc778\uac12\uc744 \ud655\uc778\ud558\uc138\uc694.","\uc751\ucc30\uac00\uaca9\uacfc \uc751\ucc30\uac00\uaca9\ud655\uc778\uac12\uc774 \ubcc0\uacbd\ub418\uc5c8\uac70\ub098 \uc785\ub825 \ud6c4 \ud655\uc778\ubc84\ud2bc\uc744 \ub204\ub974\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.<br>\uc751\ucc30\uac00\uaca9\uacfc \uc751\ucc30\uac00\uaca9\ud655\uc778\uac12\uc744 \uc785\ub825\ud6c4 \ud655\uc778\ubc84\ud2bc\uc744 \ub204\ub974\uc138\uc694.","\uc751\ucc30\uac00\uaca9\uacfc \uc751\ucc30\uac00\uaca9\ud655\uc778\uac12\uc774 \ubcc0\uacbd\ub418\uc5c8\uc2b5\ub2c8\ub2e4.<br>\uc751\ucc30\uac00\uaca9\uacfc \uc751\ucc30\uac00\uaca9\ud655\uc778\uac12\uc744 \ub2e4\uc2dc \uc785\ub825 \ud6c4 \ud655\uc778\ubc84\ud2bc\uc744 \ub204\ub974\uc138\uc694.","\uc81c\ucd9c \ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c?"]});Ext.define("bid_sp.view.reverseauction.progress.ReverseAuctionChart.I18n", {override : "bid_sp.view.reverseauction.progress.ReverseAuctionChart", i18n : ["\uc5ed\uacbd\ub9e4 \ud22c\ucc30","\uc5ed\uacbd\ub9e4 \ub0b4\uc5ed\uc744 \uc870\ud68c\ud55c \ud6c4 \uac00\uaca9\uc744 \uc81c\ucd9c\ud569\ub2c8\ub2e4.","\uac31\uc2e0","\ub2eb\uae30","\uc5ed\uacbd\ub9e4\uc815\ubcf4","\ud68c\uc0ac\uc774\ub984","\uacf5\uace0\ubc88\ud638/\ucc28\uc218","\uacf5\uace0\uba85","\uc5ed\uacbd\ub9e4\uad6c\ubd84","\ubd80\uac00\uc138\ud3ec\ud568\uc5ec\ubd80","\ud3ec\ud568","\ubbf8\ud3ec\ud568","\uacc4\uc57d\uc11c\ubc1c\ud589\uc5ec\ubd80","\ubcf4\uc99d\uae08\ub0a9\ubd80\ubc29\uc2dd","\uc9c0\uc5ed\uc81c\ud55c","\uc9c0\uc5ed\uc81c\ud55c","\ucca8\ubd80\ud30c\uc77c","\uc5ed\uacbd\ub9e4\uae30\uac04","\uc2dc\uc791\uc77c\uc2dc","\uc2dc","\ubd84","\uc885\ub8cc\uc77c\uc2dc","\uc2dc","\ubd84","\ubaa9\ud45c\uac00\uaca9\uc815\ubcf4","\uc2dc\uc791\uac00\uaca9","\uc785\ucc30\ub2e8\uc704\uae08\uc561","\ub9c8\uac10\uc2dc\uac04\uc5f0\uc7a5","\uc5ed\uacbd\ub9e4\uc785\ucc30\uc815\ubcf4","\ud604\uc7ac\ucd5c\uc800\uc785\ucc30\uac00","\ud604\uc7ac\uc2dc\uac04","\uc2dc","\ubd84","\ucd08","\uc794\uc5ec\uc2dc\uac04","\uc5ed\uacbd\ub9e4\ud604\ud669","\uc751\ucc30\ub0b4\uc5ed","\uac00\uaca9\uc81c\ucd9c","\uc751\ucc30\uac00\uaca9(\uc6d0)","\ud655\uc778","\uc751\ucc30\uac00\uaca9\ud655\uc778(\uc6d0)","\uc751\ucc30\uac00\uaca9(\uc6d0)","\ud488\ubaa9\uc815\ubcf4","\ud488\ubaa9\uba85","\uaddc\uaca9","\uc218\ub7c9","\ub2e8\uc704","\ub0a9\ud488\uc7a5\uc18c","\ub0a9\ud488\uc77c\uc790","\uc785\ucc30\ud488\ubaa9 \ucca8\ubd80\ud30c\uc77c","\uc5ed\uacbd\ub9e4\uac00\uaca9\uc81c\ucd9c\uc774\ub825","\ubc88\ud638","\uc81c\ucd9c\uae08\uc561","\uc81c\ucd9c\uc77c\uc2dc"]});Ext.define("bid_sp.view.reverseauction.progress.ReverseAuctionDetail.I18n", {override : "bid_sp.view.reverseauction.progress.ReverseAuctionDetail", i18n : ["\uc5ed\uacbd\ub9e4 \uc0c1\uc138","\uc5ed\uacbd\ub9e4 \ub0b4\uc5ed\uc744 \uc870\ud68c\ud569\ub2c8\ub2e4.","\ub2eb\uae30","\uc5ed\uacbd\ub9e4\uc815\ubcf4","\ud68c\uc0ac\uc774\ub984","\uacf5\uace0\ubc88\ud638/\ucc28\uc218","\uacf5\uace0\uba85","\uc5ed\uacbd\ub9e4\uad6c\ubd84","\ubd80\uac00\uc138\ud3ec\ud568\uc5ec\ubd80","\ud3ec\ud568","\ubbf8\ud3ec\ud568","\uacc4\uc57d\uc11c\ubc1c\ud589\uc5ec\ubd80","\ubcf4\uc99d\uae08\ub0a9\ubd80\ubc29\uc2dd","\uc9c0\uc5ed\uc81c\ud55c","\uc9c0\uc5ed\uc81c\ud55c","\ucca8\ubd80\ud30c\uc77c","\uc5ed\uacbd\ub9e4\uae30\uac04","\uc2dc\uc791\uc77c\uc2dc","\uc2dc","\ubd84","\uc885\ub8cc\uc77c\uc2dc","\uc2dc","\ubd84","\ubaa9\ud45c\uac00\uaca9\uc815\ubcf4","\uc2dc\uc791\uac00\uaca9","\uc785\ucc30\ub2e8\uc704\uae08\uc561","\ud488\ubaa9\uc815\ubcf4","\ud488\ubaa9\uba85","\uaddc\uaca9","\uc218\ub7c9","\ub2e8\uc704","\ub0a9\ud488\uc7a5\uc18c","\ub0a9\ud488\uc77c\uc790","\uc785\ucc30\ud488\ubaa9 \ucca8\ubd80\ud30c\uc77c"]});Ext.define("bid_sp.view.reverseauction.attend.ReverseAuctionResultDetailViewModel.I18n", {override : "bid_sp.view.reverseauction.attend.ReverseAuctionResultDetailViewModel", i18n : ["{0}","{0}"]});Ext.define("bid_sp.view.reverseauction.attend.ReverseAuctionResultDetail.I18n", {override : "bid_sp.view.reverseauction.attend.ReverseAuctionResultDetail", i18n : ["\uc5ed\uacbd\ub9e4 \uacb0\uacfc\uc870\ud68c","\uc5ed\uacbd\ub9e4 \ub0b4\uc5ed \uacb0\uacfc\ub97c \uc870\ud68c\ud569\ub2c8\ub2e4.","\ub2eb\uae30","\uc5ed\uacbd\ub9e4 \uc815\ubcf4","\ud68c\uc0ac\uc774\ub984","\uacf5\uace0\ubc88\ud638/\ucc28\uc218","\uacf5\uace0\uba85","\uc5ed\uacbd\ub9e4\uad6c\ubd84","\ubd80\uac00\uc138\ud3ec\ud568\uc5ec\ubd80","\ud3ec\ud568","\ubbf8\ud3ec\ud568","\uacc4\uc57d\uc11c\ubc1c\ud589\uc5ec\ubd80","\ubcf4\uc99d\uae08\ub0a9\ubd80\ubc29\uc2dd","\uc9c0\uc5ed\uc81c\ud55c","\uc9c0\uc5ed\uc81c\ud55c","\ucca8\ubd80\ud30c\uc77c","\uc5ed\uacbd\ub9e4\uae30\uac04","\uc2dc\uc791\uc77c\uc2dc","\uc2dc","\ubd84","\uc885\ub8cc\uc77c\uc2dc","\uc2dc","\ubd84","\ubaa9\ud45c\uac00\uaca9\uc815\ubcf4","\uc2dc\uc791\uac00\uaca9","\uc785\ucc30\ub2e8\uc704\uae08\uc561","\ub9c8\uac10\uc2dc\uac04\uc5f0\uc7a5","\ud488\ubaa9\uc815\ubcf4","\ud488\ubaa9\uba85","\uaddc\uaca9","\uc218\ub7c9","\ub2e8\uc704","\ub0a9\ud488\uc7a5\uc18c","\ub0a9\ud488\uc77c\uc790","\uc785\ucc30\ud488\ubaa9 \ucca8\ubd80\ud30c\uc77c","\ub099\ucc30\uc790 \uc815\ubcf4","\uc751\ucc30\uc790 ID","\uc751\ucc30\uc5c5\uccb4\uba85","\uc751\ucc30\uac00","\ub099\ucc30\uc77c\uc790"]});Ext.define("bid_sp.view.reverseauction.progress.ReverseAuctionProgressListViewController.I18n", {override : "bid_sp.view.reverseauction.progress.ReverseAuctionProgressListViewController", i18n : ['"{0}" \ud544\uc218\uac12\uc744 \ud655\uc778 \ud574\uc8fc\uc2ed\uc2dc\uc624.']});Ext.define("bid_sp.view.reverseauction.progress.ReverseAuctionProgressList.I18n", {override : "bid_sp.view.reverseauction.progress.ReverseAuctionProgressList", i18n : ["\uc5ed\uacbd\ub9e4\uacf5\uace0 \ubaa9\ub85d","\uc5ed\uacbd\ub9e4\ub85c \uc9c4\ud589\ub41c \ud604\ud669\uc744 \uc870\ud68c\ud55c\ub2e4.","\uc870\ud68c","\ucd08\uae30\ud654","\ud68c\uc0ac\uc774\ub984","\uacf5\uace0\uc2dc\uc791\uc77c\uc2dc","\uc9c4\ud589\uc0c1\ud0dc","\uc804\uccb4","\uacb0\uacfc\uc0c1\ud0dc","\uc804\uccb4","\uc9c0\uc5ed\uc81c\ud55c","\uc804\uccb4","\uacf5\uace0\ubc88\ud638","\uacf5\uace0\uba85","\uc9c4\ud589\uc0c1\ud0dc","\uacb0\uacfc\uc0c1\ud0dc","\ud68c\uc0ac\uc774\ub984","\uacf5\uace0\ubc88\ud638","\ucc28\uc218","\uacf5\uace0\uba85","\uacf5\uace0\uc2dc\uc791\uc77c\uc2dc","\uc5ed\uacbd\ub9e4\uae30\uac04","\uc9c0\uc5ed\uc81c\ud55c","\uacf5\uace0\ubd80\uc11c","\uc785\ucc30\ub2f4\ub2f9\uc790"]});(function(definitions){
									Ext.iterate(definitions, function(className, definition){
										var clazz = Ext.ClassManager.get(className);
										var requires = [];
										Ext.each(definition.requires, function(require){
											requires.push(Ext.ClassManager.get(require));
										});
										if(clazz){Ext.override(clazz, {requires : requires});};
									});
								})(							
							{
  "bid_sp.view.openInfoData.list.ContractResultStatsList": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.openInfoData.list.ContractResultStatsListViewModel",
      "bid_sp.view.openInfoData.list.ContractResultStatsListViewController",
      "Ext.form.Panel",
      "Ext.form.field.Display",
      "Ext.toolbar.Fill",
      "Ext.button.Button",
      "Ext.form.field.ComboBox",
      "Ext.form.FieldContainer",
      "Ext.form.field.Date",
      "Ext.form.Label",
      "Etna.form.plugin.AutoClearButton",
      "Ext.grid.Panel",
      "Ext.grid.column.Number",
      "Ext.grid.View",
      "Etna.toolbar.ScrollPaging",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful",
      "Etna.grid.plugin.CellMerge"
    ]
  },
  "bid_sp.view.jointSupply.JointSupplyAndDemand": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.jointSupply.JointSupplyAndDemandViewModel",
      "bid_sp.view.jointSupply.list.JointSupplyAndDemandList",
      "bid_sp.view.jointSupply.detail.JointSupplyAndDemandDetail",
      "Ext.panel.Panel"
    ]
  },
  "bid_sp.view.openInfoData.list.ContractResultByItemList": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.openInfoData.list.ContractResultByItemListViewModel",
      "bid_sp.view.openInfoData.list.ContractResultByItemListViewController",
      "Ext.form.Panel",
      "Ext.form.field.Display",
      "Ext.toolbar.Fill",
      "Ext.button.Button",
      "Ext.form.field.ComboBox",
      "Ext.form.FieldContainer",
      "Ext.form.field.Date",
      "Ext.form.Label",
      "Etna.form.plugin.AutoClearButton",
      "Ext.grid.Panel",
      "Etna.grid.column.Store",
      "Ext.grid.column.Date",
      "Ext.grid.column.Number",
      "Ext.grid.View",
      "Etna.toolbar.ScrollPaging",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful"
    ]
  },
  "bid_sp.view.jointSupply.list.JointSupplyAndDemandListViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "bid_sp.view.reverseauction.attend.ReverseAuctionResultDetailViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.reverseauction.attend.ReverseAuctionAttendListViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.openInfoData.ContractResultByVendorViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "bid_sp.view.reverseauction.ReverseAuctionProgressViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "bid_sp.view.openInfoData.list.ContractResultStatsListViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.reverseauction.progress.ReverseAuctionProgressListViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.model.bid.EstimatedPriceBasicReportItem": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.Field"
    ]
  },
  "bid_sp.view.openInfoData.SuccessVendorInfoViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.openInfoData.ContractResultStatsViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.openInfoData.ContractResultByItemViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "bid_sp.view.openInfoData.ContractResultByVendorViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.openInfoData.list.BidResultList": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.openInfoData.list.BidResultListViewModel",
      "bid_sp.view.openInfoData.list.BidResultListViewController",
      "Ext.form.Panel",
      "Ext.form.field.Display",
      "Ext.toolbar.Fill",
      "Ext.button.Button",
      "Ext.form.field.ComboBox",
      "Ext.form.FieldContainer",
      "Ext.form.field.Date",
      "Ext.form.Label",
      "Etna.form.plugin.AutoClearButton",
      "Ext.grid.Panel",
      "Etna.grid.column.Store",
      "Ext.grid.column.Date",
      "Ext.grid.View",
      "Etna.toolbar.ScrollPaging",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful"
    ]
  },
  "bid_sp.model.bid.tempModel": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String"
    ]
  },
  "bid_sp.view.openInfoData.BidResultViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetailViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.OperatingUnit",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Cmmn.store.Enum",
      "Cmmn.store.Code",
      "Ext.app.bind.Formula",
      "bid_sp.model.bid.BidVendorAttendRequest",
      "bid_sp.model.bid.tempModel",
      "bid_sp.model.bid.QualifiedCodes",
      "bid_sp.model.bid.LicenseCodes",
      "bid_sp.model.bid.RegionCodes",
      "bid_sp.model.bid.BidDateTimeChange",
      "bid_sp.model.bid.Code",
      "bid_sp.model.bid.ProgressState",
      "bid_sp.model.bid.Bid",
      "bid_sp.model.bid.FileItem"
    ]
  },
  "bid_sp.view.bidAnnouncement.popup.PopupSearchItems": {
    "uses": [],
    "requires": [
      "Ext.form.Panel",
      "bid_sp.view.bidAnnouncement.popup.PopupSearchItemsViewModel",
      "bid_sp.view.bidAnnouncement.popup.PopupSearchItemsViewController",
      "Ext.form.Panel",
      "Ext.toolbar.Toolbar",
      "Ext.toolbar.Spacer",
      "Ext.button.Button",
      "Ext.form.field.Text",
      "Ext.grid.Panel",
      "Ext.grid.View",
      "Ext.grid.column.Number",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful"
    ]
  },
  "bid_sp.view.reverseauction.progress.ReverseAuctionChartViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.model.bid.LicenseCodes": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.model.openInfoData.BidResultList": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Date"
    ]
  },
  "bid_sp.model.bid.comboProperty": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String"
    ]
  },
  "bid_sp.model.rfx.ReverseAuction": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Integer",
      "Ext.data.field.Date",
      "Ext.data.field.Number",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.view.reverseauction.attend.ReverseAuctionResultDetailViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.OperatingUnit",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Cmmn.store.Code",
      "Ext.app.bind.Formula",
      "bid_sp.model.rfx.RfxItemAttend",
      "bid_sp.model.rfx.ReverseAuctionRealtimeAttend",
      "bid_sp.model.rfx.ReverseAuctionLowestAttend",
      "bid_sp.model.rfx.RfxItem",
      "bid_sp.model.rfx.ReverseAuctionAttend",
      "bid_sp.model.bid.ProgressState"
    ]
  },
  "bid_sp.view.reverseauction.attend.ReverseAuctionAttendListViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.VendorOperatingUnit",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Cmmn.store.Enum",
      "Ext.util.Filter",
      "Cmmn.store.Code",
      "Cmmn.store.OperatingUnit",
      "bid_sp.model.rfx.ReverseAuctionVendorAttendRequest",
      "bid_sp.model.rfx.ReverseAuction",
      "bid_sp.model.cmmn.CompanyCode"
    ]
  },
  "bid_sp.view.ExListViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.model.foreign.PurchasePlan": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Date",
      "Ext.data.field.Boolean",
      "Ext.data.field.Number"
    ]
  },
  "bid_sp.model.foreign.BidItem": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Number",
      "Ext.data.field.Date",
      "Ext.data.field.Integer",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.view.ExModuleViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.jointSupply.JointSupplyAndDemandViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.model.bid.Bid": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Integer",
      "Ext.data.field.Date",
      "Ext.data.field.Number",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.view.openInfoData.list.SuccessVendorInfoListViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.util.Filter",
      "Cmmn.store.Enum",
      "Ext.data.field.String",
      "bid_sp.model.openInfoData.SuccessVendorInfoList",
      "bid_sp.model.cmmn.CompanyCode"
    ]
  },
  "bid_sp.view.openInfoData.detail.product.BidResultDetailProductFailViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.Enum",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "bid_sp.model.openInfoData.OpenInfoDataList"
    ]
  },
  "bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetail": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetailViewModel",
      "bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetailViewController",
      "Ext.toolbar.Toolbar",
      "Ext.toolbar.Fill",
      "Ext.tab.Panel",
      "Ext.form.Panel",
      "Ext.tab.Tab",
      "Ext.form.FieldContainer",
      "Ext.form.field.Display",
      "Ext.form.field.ComboBox",
      "Etna.form.field.Toggle",
      "Ext.form.Label",
      "Ext.form.field.Number",
      "Ext.form.FieldSet",
      "Ext.form.field.TextArea",
      "Ext.form.field.Date",
      "Ext.grid.Panel",
      "Ext.grid.View",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful",
      "Etna.form.field.Attachment",
      "Ext.grid.column.Date"
    ]
  },
  "bid_sp.view.openInfoData.detail.product.BidResultDetailProductViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.Enum",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Cmmn.store.Code",
      "Ext.app.bind.Formula",
      "bid_sp.model.openInfoData.OpenInfoDataList"
    ]
  },
  "bid_sp.view.openInfoData.SuccessVendorInfoViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "bid_sp.view.openInfoData.detail.product.BidResultDetailProductFail": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.openInfoData.detail.product.BidResultDetailProductFailViewModel",
      "bid_sp.view.openInfoData.detail.product.BidResultDetailProductFailViewController",
      "Ext.toolbar.Toolbar",
      "Ext.form.field.Display",
      "Ext.toolbar.Spacer",
      "Ext.toolbar.Fill",
      "Ext.button.Button",
      "Ext.form.Panel",
      "Ext.form.field.ComboBox"
    ]
  },
  "bid_sp.view.openInfoData.detail.service.BidResultDetailService": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.openInfoData.detail.service.BidResultDetailServiceViewModel",
      "bid_sp.view.openInfoData.detail.service.BidResultDetailServiceViewController",
      "Ext.toolbar.Toolbar",
      "Ext.form.field.Display",
      "Ext.toolbar.Spacer",
      "Ext.toolbar.Fill",
      "Ext.button.Button",
      "Ext.form.Panel",
      "Ext.form.FieldContainer",
      "Ext.form.field.ComboBox",
      "Ext.form.field.Number",
      "Ext.grid.Panel",
      "Ext.grid.column.Action",
      "Ext.grid.column.Number",
      "Ext.grid.column.Date",
      "Ext.grid.View",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful"
    ]
  },
  "bid_sp.view.ExModuleViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "bid_sp.view.jointSupply.detail.JointSupplyAndDemandDetailViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "bid_sp.view.jointSupply.list.JointSupplyAndDemandList": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.jointSupply.list.JointSupplyAndDemandListViewModel",
      "bid_sp.view.jointSupply.list.JointSupplyAndDemandListViewController",
      "Ext.form.Panel",
      "Ext.form.field.Display",
      "Ext.toolbar.Spacer",
      "Ext.button.Button",
      "Etna.form.plugin.AutoClearButton",
      "Ext.form.FieldContainer",
      "Ext.form.field.Date",
      "Ext.form.Label",
      "Ext.form.field.ComboBox",
      "Ext.grid.Panel",
      "Ext.selection.CheckboxModel",
      "Ext.grid.column.Number",
      "Ext.grid.column.Date",
      "Ext.grid.column.Boolean",
      "Ext.grid.View",
      "Ext.toolbar.Paging"
    ]
  },
  "bid_sp.view.openInfoData.detail.service.BidResultDetailServiceFail": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.openInfoData.detail.service.BidResultDetailServiceFailViewModel",
      "bid_sp.view.openInfoData.detail.service.BidResultDetailServiceFailViewController",
      "Ext.toolbar.Toolbar",
      "Ext.form.field.Display",
      "Ext.toolbar.Spacer",
      "Ext.toolbar.Fill",
      "Ext.button.Button",
      "Ext.form.Panel",
      "Ext.form.FieldContainer",
      "Ext.form.field.ComboBox",
      "Ext.form.field.Number"
    ]
  },
  "bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.model.foreign.Bid": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Integer",
      "Ext.data.field.Date",
      "Ext.data.field.Number",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.model.foreign.Code": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String"
    ]
  },
  "bid_sp.view.reverseauction.attend.ReverseAuctionResultDetail": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.reverseauction.attend.ReverseAuctionResultDetailViewModel",
      "bid_sp.view.reverseauction.attend.ReverseAuctionResultDetailViewController",
      "Ext.toolbar.Toolbar",
      "Ext.toolbar.TextItem",
      "Ext.toolbar.Spacer",
      "Ext.button.Button",
      "Ext.form.Panel",
      "Ext.form.FieldContainer",
      "Ext.form.field.Display",
      "Etna.form.field.Toggle",
      "Ext.form.field.ComboBox",
      "Etna.form.field.Attachment",
      "Ext.form.FieldSet",
      "Ext.form.field.Date",
      "Ext.form.field.Number",
      "Ext.grid.Panel",
      "Ext.grid.column.Number",
      "Ext.grid.column.Date",
      "Ext.grid.View",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful"
    ]
  },
  "bid_sp.view.reverseauction.progress.ReverseAuctionDetail": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.reverseauction.progress.ReverseAuctionDetailViewModel",
      "bid_sp.view.reverseauction.progress.ReverseAuctionDetailViewController",
      "Ext.toolbar.Toolbar",
      "Ext.toolbar.TextItem",
      "Ext.toolbar.Spacer",
      "Ext.button.Button",
      "Ext.form.Panel",
      "Ext.form.FieldContainer",
      "Ext.form.field.Display",
      "Etna.form.field.Toggle",
      "Ext.form.field.ComboBox",
      "Etna.form.field.Attachment",
      "Ext.form.FieldSet",
      "Ext.form.field.Date",
      "Ext.form.field.Number",
      "Ext.grid.Panel",
      "Ext.grid.column.Number",
      "Ext.grid.column.Date",
      "Ext.grid.View",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful"
    ]
  },
  "bid_sp.view.openInfoData.list.SuccessVendorInfoListViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.openInfoData.BidResultViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "bid_sp.view.openInfoData.list.ContractResultByVendorListViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.jointSupply.JointSupplyAndDemandViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "bid_sp.model.foreign.RegionCodes": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetailViewModel1": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.OperatingUnit",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Cmmn.store.Enum",
      "Cmmn.store.Code",
      "Ext.util.Filter",
      "Ext.app.bind.Formula",
      "bid_sp.model.foreign.BidVendorAttendRequest",
      "bid_sp.model.foreign.BidItem",
      "bid_sp.model.foreign.Code",
      "bid_sp.model.foreign.BidDateTimeChange",
      "bid_sp.model.bid.ProgressState",
      "bid_sp.model.foreign.Bid"
    ]
  },
  "bid_sp.view.openInfoData.ContractResultStatsViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "bid_sp.view.ExDetailTab": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.ExDetailTabViewModel",
      "Ext.toolbar.Toolbar",
      "Ext.form.field.Display",
      "Ext.toolbar.Spacer",
      "Ext.tab.Panel",
      "Ext.form.Panel",
      "Ext.form.field.ComboBox",
      "Ext.form.field.Date",
      "Ext.form.field.Checkbox",
      "Ext.form.FieldContainer",
      "Ext.form.FieldSet",
      "Ext.form.field.TextArea",
      "Etna.form.field.Attachment",
      "Ext.tab.Tab",
      "Ext.grid.Panel",
      "Ext.selection.CheckboxModel",
      "Ext.grid.column.Date",
      "Ext.grid.column.Number",
      "Ext.grid.column.Boolean",
      "Ext.grid.View"
    ]
  },
  "bid_sp.view.jointSupply.detail.JointSupplyAndDemandDetailViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.model.rfx.ReverseAuctionAttend": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Date",
      "Ext.data.field.Number",
      "Ext.data.field.Integer",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.model.bid.QualifiedCodes": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewController1": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.openInfoData.list.SuccessVendorInfoList": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.openInfoData.list.SuccessVendorInfoListViewModel",
      "bid_sp.view.openInfoData.list.SuccessVendorInfoListViewController",
      "Ext.form.Panel",
      "Ext.form.field.Display",
      "Ext.toolbar.Fill",
      "Ext.button.Button",
      "Ext.form.field.ComboBox",
      "Ext.form.FieldContainer",
      "Ext.form.field.Date",
      "Ext.form.Label",
      "Etna.form.plugin.AutoClearButton",
      "Ext.grid.Panel",
      "Ext.grid.column.Number",
      "Ext.grid.column.Date",
      "Etna.grid.column.Store",
      "Ext.grid.View",
      "Etna.toolbar.ScrollPaging",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful"
    ]
  },
  "bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewModel1": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.OperatingUnit",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Cmmn.store.Enum",
      "Cmmn.store.Code",
      "Ext.util.Filter",
      "Ext.app.bind.Formula",
      "bid_sp.model.bid.comboProperty",
      "bid_sp.model.bid.ProgressState",
      "bid_sp.model.bid.FileItem"
    ]
  },
  "bid_sp.view.bidAnnouncement.detail.product.BidAnnouncementDetailViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.bidAnnouncement.detail.product.BidAnnouncementDetailViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.OperatingUnit",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Cmmn.store.Enum",
      "Cmmn.store.Code",
      "Ext.util.Filter",
      "Ext.app.bind.Formula",
      "bid_sp.model.bid.BidVendorAttendRequest",
      "bid_sp.model.bid.BidItem",
      "bid_sp.model.bid.Code",
      "bid_sp.model.bid.BidDateTimeChange",
      "bid_sp.model.bid.ProgressState",
      "bid_sp.model.bid.Bid",
      "bid_sp.model.bid.FileItem"
    ]
  },
  "bid_sp.model.bid.BidVendorAttendRequest": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Integer",
      "Ext.data.field.Date",
      "Ext.data.field.Number",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.model.foreign.RepresentativeList": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.Field"
    ]
  },
  "bid_sp.view.reverseauction.ReverseAuctionProgressViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetail": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetailViewModel",
      "bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetailViewController",
      "Ext.toolbar.Toolbar",
      "Ext.toolbar.Fill",
      "Ext.tab.Panel",
      "Ext.form.Panel",
      "Ext.tab.Tab",
      "Ext.form.FieldContainer",
      "Ext.form.field.Display",
      "Ext.form.field.ComboBox",
      "Etna.form.field.Toggle",
      "Ext.toolbar.Spacer",
      "Ext.form.Label",
      "Ext.form.field.Number",
      "Ext.form.FieldSet",
      "Ext.form.field.TextArea",
      "Ext.form.field.Date",
      "Ext.grid.Panel",
      "Ext.grid.View",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful",
      "Etna.form.field.Attachment",
      "Ext.grid.column.Date"
    ]
  },
  "bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetail": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetailViewModel1",
      "bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetailViewController",
      "bid_sp.view.bidAnnouncement.popup.PopupSearchItems",
      "Ext.toolbar.Toolbar",
      "Ext.form.Label",
      "Ext.toolbar.Fill",
      "Ext.tab.Panel",
      "Ext.form.Panel",
      "Ext.tab.Tab",
      "Ext.form.FieldContainer",
      "Ext.form.field.Display",
      "Ext.form.field.Date",
      "Ext.form.field.ComboBox",
      "Ext.form.field.Checkbox",
      "Etna.form.field.Toggle",
      "Ext.form.field.TextArea",
      "Ext.form.field.Number",
      "Ext.form.FieldSet",
      "Etna.form.field.Attachment",
      "Ext.grid.Panel",
      "Ext.grid.column.Date",
      "Ext.grid.View",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful",
      "Etna.grid.column.Status",
      "Etna.grid.column.Eliminate",
      "Etna.grid.column.Store",
      "Ext.grid.column.Number",
      "Ext.grid.column.Check",
      "Ext.grid.plugin.CellEditing"
    ]
  },
  "bid_sp.view.reverseauction.progress.ReverseAuctionProgressListViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.VendorOperatingUnit",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Cmmn.store.Enum",
      "Ext.util.Filter",
      "Cmmn.store.OperatingUnit",
      "Cmmn.store.Code",
      "bid_sp.model.rfx.ReverseAuctionVendorAttendRequest",
      "bid_sp.model.rfx.ReverseAuction",
      "bid_sp.model.cmmn.CompanyCode"
    ]
  },
  "bid_sp.view.bidAnnouncement.popup.PopupSearchItemsViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.data.Store",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "bid_sp.model.bid.EstimatedPriceBasicReportItem"
    ]
  },
  "bid_sp.model.rfx.RfxItemAttend": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Date",
      "Ext.data.field.Integer",
      "Ext.data.field.Number",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.view.openInfoData.ContractResultByItemViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.jointSupply.detail.JointSupplyAndDemandDetail": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.jointSupply.detail.JointSupplyAndDemandDetailViewModel",
      "Ext.toolbar.Toolbar",
      "Ext.form.field.Display",
      "Ext.toolbar.Spacer",
      "Ext.button.Button",
      "Ext.form.field.ComboBox",
      "Ext.grid.Panel",
      "Ext.grid.column.Check",
      "Ext.grid.column.Number",
      "Ext.grid.View",
      "Ext.grid.plugin.CellEditing"
    ]
  },
  "bid_sp.model.foreign.BidDateTimeChange": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Integer",
      "Ext.data.field.Date",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.view.reverseauction.ReverseAuctionProgress": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.reverseauction.ReverseAuctionProgressViewModel",
      "bid_sp.view.reverseauction.ReverseAuctionProgressViewController",
      "bid_sp.view.reverseauction.progress.ReverseAuctionProgressList",
      "bid_sp.view.reverseauction.progress.ReverseAuctionDetail",
      "Ext.panel.Panel"
    ]
  },
  "bid_sp.view.openInfoData.list.BidResultListViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.model.foreign.MandatoryDocument": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String"
    ]
  },
  "bid_sp.model.bid.BidItem": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Number",
      "Ext.data.field.Date",
      "Ext.data.field.Integer",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.view.openInfoData.ContractResultByVendor": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.openInfoData.ContractResultByVendorViewModel",
      "bid_sp.view.openInfoData.ContractResultByVendorViewController",
      "bid_sp.view.openInfoData.list.ContractResultByVendorList",
      "Ext.panel.Panel"
    ]
  },
  "bid_sp.model.foreign.QualifiedCodes": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.view.bidAnnouncement.detail.service.BidAnnouncementDetailViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.model.bid.BidDateTimeChange": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Integer",
      "Ext.data.field.Date",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.view.openInfoData.BidResult": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.openInfoData.BidResultViewModel",
      "bid_sp.view.openInfoData.BidResultViewController",
      "bid_sp.view.openInfoData.list.BidResultList",
      "bid_sp.view.openInfoData.detail.product.BidResultDetailProduct",
      "bid_sp.view.openInfoData.detail.service.BidResultDetailService",
      "bid_sp.view.openInfoData.detail.service.BidResultDetailServiceFail",
      "bid_sp.view.openInfoData.detail.product.BidResultDetailProductFail",
      "Ext.panel.Panel"
    ]
  },
  "bid_sp.view.openInfoData.list.ContractResultByItemListViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.openInfoData.list.ContractResultStatsListViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.data.Store",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.util.Filter",
      "bid_sp.model.openInfoData.ContractResultStatsList",
      "bid_sp.model.cmmn.CompanyCode"
    ]
  },
  "bid_sp.view.privateContract.detail.service.PrivateContractDetailSP": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewModel",
      "bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewController",
      "Ext.toolbar.Toolbar",
      "Ext.form.field.Display",
      "Ext.toolbar.Spacer",
      "Ext.tab.Panel",
      "Ext.form.Panel",
      "Ext.form.FieldContainer",
      "Ext.form.field.Date",
      "Ext.form.trigger.Trigger",
      "Ext.form.field.ComboBox",
      "Ext.form.field.TextArea",
      "Etna.form.field.Toggle",
      "Ext.form.field.Checkbox",
      "Ext.form.field.Number",
      "Ext.form.Label",
      "Ext.grid.Panel",
      "Ext.grid.column.Column",
      "Ext.grid.View",
      "Etna.form.field.Attachment",
      "Ext.tab.Tab"
    ]
  },
  "bid_sp.view.ExModule": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.ExModuleViewModel",
      "bid_sp.view.ExList",
      "bid_sp.view.ExDetailTab",
      "Ext.panel.Panel"
    ]
  },
  "bid_sp.model.openInfoData.SuccessVendorInfoList": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.Date",
      "Ext.data.field.Number"
    ]
  },
  "bid_sp.model.bid.FileItem": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Integer"
    ]
  },
  "bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.OperatingUnit",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Cmmn.store.Enum",
      "Cmmn.store.Code",
      "Ext.util.Filter",
      "Ext.app.bind.Formula",
      "bid_sp.model.bid.BidItem",
      "bid_sp.model.bid.comboProperty",
      "bid_sp.model.bid.ProgressState",
      "bid_sp.model.bid.FileItem"
    ]
  },
  "bid_sp.model.foreign.LicenseCodes": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.view.openInfoData.ContractResultByItem": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.openInfoData.ContractResultByItemViewModel",
      "bid_sp.view.openInfoData.ContractResultByItemViewController",
      "bid_sp.view.openInfoData.list.ContractResultByItemList",
      "Ext.panel.Panel"
    ]
  },
  "bid_sp.view.openInfoData.SuccessVendorInfo": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.openInfoData.SuccessVendorInfoViewModel",
      "bid_sp.view.openInfoData.list.SuccessVendorInfoList",
      "Ext.panel.Panel"
    ]
  },
  "bid_sp.view.reverseauction.ReverseAuctionAttendViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "bid_sp.model.rfx.VendorAttendRequest": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Date",
      "Ext.data.field.Number"
    ]
  },
  "bid_sp.model.bid.ProgressState": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.Integer",
      "Ext.data.field.Date"
    ]
  },
  "bid_sp.model.foreign.ProgressState": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Integer"
    ]
  },
  "bid_sp.model.rfx.RfxItem": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Integer",
      "Ext.data.field.Date",
      "Ext.data.field.Number"
    ]
  },
  "bid_sp.view.jointSupply.list.JointSupplyAndDemandListViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.model.bid.RegionCodes": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.model.bid.Area": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.Field"
    ]
  },
  "bid_sp.model.rfx.ReverseAuctionLowestAttend": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Number",
      "Ext.data.field.Date",
      "Ext.data.field.Integer"
    ]
  },
  "bid_sp.view.openInfoData.list.ContractResultByVendorListViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.util.Filter",
      "Cmmn.store.Enum",
      "Ext.data.field.String",
      "bid_sp.model.openInfoData.ContractResultList",
      "bid_sp.model.cmmn.CompanyCode"
    ]
  },
  "bid_sp.view.reverseauction.progress.ReverseAuctionDetailViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.model.openInfoData.ContractResultList": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String"
    ]
  },
  "bid_sp.view.openInfoData.detail.service.BidResultDetailServiceFailViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.Enum",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Ext.app.bind.Formula",
      "Cmmn.store.OperatingUnit",
      "bid_sp.model.openInfoData.OpenInfoDataList"
    ]
  },
  "bid_sp.view.reverseauction.progress.ReverseAuctionProgressList": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.reverseauction.progress.ReverseAuctionProgressListViewModel",
      "bid_sp.view.reverseauction.progress.ReverseAuctionProgressListViewController",
      "Ext.form.Panel",
      "Ext.form.Label",
      "Ext.toolbar.Spacer",
      "Ext.button.Button",
      "Ext.form.field.ComboBox",
      "Ext.form.FieldContainer",
      "Ext.form.field.Date",
      "Etna.form.plugin.AutoClearButton",
      "Ext.grid.Panel",
      "Etna.grid.column.Store",
      "Ext.grid.column.Date",
      "Ext.grid.View",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful",
      "Etna.toolbar.ScrollPaging"
    ]
  },
  "bid_sp.view.openInfoData.list.BidResultListViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Cmmn.store.Enum",
      "Ext.data.field.String",
      "bid_sp.model.openInfoData.BidResultList",
      "bid_sp.model.catalog.CompanyCode"
    ]
  },
  "bid_sp.model.openInfoData.ContractResultStatsList": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.Field"
    ]
  },
  "bid_sp.model.rfx.ReverseAuctionVendorAttendRequest": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Integer",
      "Ext.data.field.Date",
      "Ext.data.field.Number"
    ]
  },
  "bid_sp.view.openInfoData.detail.product.BidResultDetailProductViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.foreignBidAnnouncement.detail.product.ForeignBidAnnouncementDetailViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewModel1": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.OperatingUnit",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Cmmn.store.Enum",
      "Cmmn.store.Code",
      "Ext.util.Filter",
      "Ext.app.bind.Formula",
      "bid_sp.model.bid.BidItem",
      "bid_sp.model.bid.comboProperty",
      "bid_sp.model.bid.ProgressState",
      "bid_sp.model.bid.FileItem"
    ]
  },
  "bid_sp.model.cmmn.CompanyCode": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String"
    ]
  },
  "bid_sp.view.reverseauction.ReverseAuctionAttend": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.reverseauction.ReverseAuctionAttendViewModel",
      "bid_sp.view.reverseauction.ReverseAuctionAttendViewController",
      "bid_sp.view.reverseauction.attend.ReverseAuctionAttendList",
      "bid_sp.view.reverseauction.progress.ReverseAuctionChart",
      "bid_sp.view.reverseauction.progress.ReverseAuctionDetail",
      "bid_sp.view.reverseauction.attend.ReverseAuctionResultDetail",
      "Ext.panel.Panel"
    ]
  },
  "bid_sp.model.openInfoData.OpenInfoDataList": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Date"
    ]
  },
  "bid_sp.view.openInfoData.detail.product.BidResultDetailProduct": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.openInfoData.detail.product.BidResultDetailProductViewModel",
      "bid_sp.view.openInfoData.detail.product.BidResultDetailProductViewController",
      "Ext.toolbar.Toolbar",
      "Ext.form.field.Display",
      "Ext.toolbar.Spacer",
      "Ext.toolbar.Fill",
      "Ext.button.Button",
      "Ext.form.Panel",
      "Ext.form.field.ComboBox",
      "Ext.form.FieldContainer",
      "Ext.grid.Panel",
      "Ext.grid.column.Action",
      "Ext.grid.column.Date",
      "Ext.grid.View"
    ]
  },
  "bid_sp.view.reverseauction.progress.ReverseAuctionChartViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.OperatingUnit",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Cmmn.store.Code",
      "Ext.app.bind.Formula",
      "bid_sp.model.rfx.RfxItemAttend",
      "bid_sp.model.rfx.ReverseAuctionRealtimeAttend",
      "bid_sp.model.rfx.ReverseAuctionLowestAttend",
      "bid_sp.model.rfx.RfxItem"
    ]
  },
  "bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.model.bid.Code": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String"
    ]
  },
  "bid_sp.view.reverseauction.ReverseAuctionAttendViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.privateContract.detail.product.PrivateContractDetailSP": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewModel",
      "bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewController",
      "Ext.toolbar.Toolbar",
      "Ext.form.field.Display",
      "Ext.toolbar.Spacer",
      "Ext.tab.Panel",
      "Ext.form.Panel",
      "Ext.form.FieldContainer",
      "Ext.form.field.Date",
      "Ext.form.trigger.Trigger",
      "Ext.form.field.ComboBox",
      "Ext.form.field.TextArea",
      "Etna.form.field.Toggle",
      "Ext.form.field.Checkbox",
      "Ext.form.field.Number",
      "Ext.form.Label",
      "Etna.form.field.Attachment",
      "Ext.tab.Tab",
      "Ext.grid.Panel",
      "Etna.grid.column.Store",
      "Ext.grid.column.Number",
      "Ext.grid.column.Check",
      "Ext.grid.View",
      "Ext.grid.plugin.CellEditing",
      "Etna.grid.plugin.CellTip",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context"
    ]
  },
  "bid_sp.view.reverseauction.attend.ReverseAuctionAttendList": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.reverseauction.attend.ReverseAuctionAttendListViewModel",
      "bid_sp.view.reverseauction.attend.ReverseAuctionAttendListViewController",
      "Ext.form.Panel",
      "Ext.form.Label",
      "Ext.toolbar.Spacer",
      "Ext.button.Button",
      "Ext.form.field.ComboBox",
      "Ext.form.FieldContainer",
      "Ext.form.field.Date",
      "Etna.form.plugin.AutoClearButton",
      "Ext.grid.Panel",
      "Etna.grid.column.Store",
      "Ext.grid.column.Date",
      "Ext.grid.View",
      "Ext.selection.CheckboxModel",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful",
      "Etna.toolbar.ScrollPaging"
    ]
  },
  "bid_sp.view.ExDetailTabViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.reverseauction.progress.ReverseAuctionDetailViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.OperatingUnit",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Cmmn.store.Code",
      "Ext.app.bind.Formula",
      "Cmmn.store.Enum",
      "bid_sp.model.rfx.RfxItemAttend",
      "bid_sp.model.rfx.RfxItem",
      "bid_sp.model.bid.ProgressState"
    ]
  },
  "bid_sp.view.openInfoData.detail.service.BidResultDetailServiceFailViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.ExDetailTabViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.OperatingUnit",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Cmmn.store.Enum",
      "Cmmn.store.Code",
      "Ext.util.Filter",
      "Ext.app.bind.Formula",
      "bid_sp.model.bid.comboProperty",
      "bid_sp.model.bid.ProgressState",
      "bid_sp.model.bid.FileItem"
    ]
  },
  "bid_sp.view.bidAnnouncement.detail.product.BidAnnouncementDetail": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.bidAnnouncement.detail.product.BidAnnouncementDetailViewModel",
      "bid_sp.view.bidAnnouncement.detail.product.BidAnnouncementDetailViewController",
      "bid_sp.view.bidAnnouncement.popup.PopupSearchItems",
      "Ext.toolbar.Toolbar",
      "Ext.form.Label",
      "Ext.toolbar.Fill",
      "Ext.tab.Panel",
      "Ext.form.Panel",
      "Ext.tab.Tab",
      "Ext.form.FieldContainer",
      "Ext.form.field.Display",
      "Ext.form.field.Date",
      "Ext.form.field.ComboBox",
      "Ext.form.field.Checkbox",
      "Etna.form.field.Toggle",
      "Ext.toolbar.Spacer",
      "Ext.form.field.TextArea",
      "Ext.form.field.Number",
      "Ext.form.FieldSet",
      "Ext.grid.Panel",
      "Ext.grid.View",
      "Etna.form.field.Attachment",
      "Ext.grid.column.Date",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful",
      "Etna.grid.column.Status",
      "Etna.grid.column.Eliminate",
      "Etna.grid.column.Store",
      "Ext.grid.column.Number",
      "Ext.grid.column.Check",
      "Ext.grid.plugin.CellEditing"
    ]
  },
  "bid_sp.view.openInfoData.detail.product.BidResultDetailProductFailViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.ExList": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.ExListViewModel",
      "bid_sp.view.ExListViewController",
      "Ext.form.Panel",
      "Ext.form.field.Display",
      "Ext.toolbar.Spacer",
      "Ext.button.Button",
      "Etna.form.plugin.AutoClearButton",
      "Ext.form.field.ComboBox",
      "Ext.form.FieldContainer",
      "Ext.form.field.Date",
      "Ext.form.Label",
      "Ext.grid.Panel",
      "Ext.selection.CheckboxModel",
      "Ext.grid.column.Number",
      "Ext.grid.column.Date",
      "Ext.grid.column.Boolean",
      "Ext.grid.View",
      "Ext.toolbar.Paging"
    ]
  },
  "bid_sp.view.foreignPrivateContract.detail.product.ForeignPrivateContractDetailSP": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewModel1",
      "bid_sp.view.privateContract.detail.product.PrivateContractDetailSPViewController1",
      "Ext.toolbar.Toolbar",
      "Ext.form.field.Display",
      "Ext.toolbar.Spacer",
      "Ext.tab.Panel",
      "Ext.form.Panel",
      "Ext.form.FieldContainer",
      "Ext.form.field.Date",
      "Ext.form.trigger.Trigger",
      "Ext.form.field.ComboBox",
      "Ext.form.field.TextArea",
      "Etna.form.field.Toggle",
      "Ext.form.field.Checkbox",
      "Ext.form.field.Number",
      "Ext.form.Label",
      "Etna.form.field.Attachment",
      "Ext.tab.Tab",
      "Ext.grid.Panel",
      "Etna.grid.column.Store",
      "Ext.grid.column.Number",
      "Ext.grid.column.Check",
      "Ext.grid.View",
      "Ext.grid.plugin.CellEditing",
      "Etna.grid.plugin.CellTip",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context"
    ]
  },
  "bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetailViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.OperatingUnit",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Cmmn.store.Enum",
      "Cmmn.store.Code",
      "Ext.app.bind.Formula",
      "bid_sp.model.foreign.QualifiedCodes",
      "bid_sp.model.bid.tempModel",
      "bid_sp.model.foreign.LicenseCodes",
      "bid_sp.model.foreign.RegionCodes",
      "bid_sp.model.foreign.BidDateTimeChange",
      "bid_sp.model.bid.FileItem",
      "bid_sp.model.foreign.ProgressState"
    ]
  },
  "bid_sp.view.foreignPrivateContract.detail.service.ForeignPrivateContractDetailSP": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewModel1",
      "bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewController1",
      "Ext.toolbar.Toolbar",
      "Ext.form.field.Display",
      "Ext.toolbar.Spacer",
      "Ext.tab.Panel",
      "Ext.form.Panel",
      "Ext.form.FieldContainer",
      "Ext.form.field.Date",
      "Ext.form.trigger.Trigger",
      "Ext.form.field.ComboBox",
      "Ext.form.field.TextArea",
      "Etna.form.field.Toggle",
      "Ext.form.field.Checkbox",
      "Ext.form.field.Number",
      "Ext.form.Label",
      "Ext.grid.Panel",
      "Ext.grid.column.Column",
      "Ext.grid.View",
      "Etna.form.field.Attachment",
      "Ext.tab.Tab"
    ]
  },
  "bid_sp.view.openInfoData.list.ContractResultByVendorList": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.openInfoData.list.ContractResultByVendorListViewModel",
      "bid_sp.view.openInfoData.list.ContractResultByVendorListViewController",
      "Ext.form.Panel",
      "Ext.form.field.Display",
      "Ext.toolbar.Fill",
      "Ext.button.Button",
      "Ext.form.field.ComboBox",
      "Ext.form.FieldContainer",
      "Ext.form.field.Date",
      "Ext.form.Label",
      "Etna.form.plugin.AutoClearButton",
      "Ext.grid.Panel",
      "Etna.grid.column.Store",
      "Ext.grid.column.Date",
      "Ext.grid.column.Number",
      "Ext.grid.View",
      "Etna.toolbar.ScrollPaging",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful"
    ]
  },
  "bid_sp.model.foreign.BidVendorAttendRequest": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Integer",
      "Ext.data.field.Date",
      "Ext.data.field.Number",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.model.rfx.RfxAttend": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Date",
      "Ext.data.field.Number",
      "Ext.data.field.Integer",
      "Ext.data.field.Boolean"
    ]
  },
  "bid_sp.model.catalog.CompanyCode": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String"
    ]
  },
  "bid_sp.view.foreignBidAnnouncement.detail.service.ForeignBidAnnouncementDetailViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.model.rfx.ReverseAuctionRealtimeAttend": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.field.String",
      "Ext.data.field.Number",
      "Ext.data.field.Date",
      "Ext.data.field.Integer"
    ]
  },
  "bid_sp.view.openInfoData.ContractResultStats": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.openInfoData.ContractResultStatsViewModel",
      "bid_sp.view.openInfoData.list.ContractResultStatsList",
      "Ext.panel.Panel"
    ]
  },
  "bid_sp.view.bidAnnouncement.popup.PopupSearchItemsViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.reverseauction.progress.ReverseAuctionChart": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "bid_sp.view.reverseauction.progress.ReverseAuctionChartViewModel",
      "bid_sp.view.reverseauction.progress.ReverseAuctionChartViewController",
      "Ext.toolbar.Toolbar",
      "Ext.toolbar.TextItem",
      "Ext.toolbar.Spacer",
      "Ext.button.Button",
      "Ext.form.Panel",
      "Ext.form.FieldContainer",
      "Ext.form.field.Display",
      "Etna.form.field.Toggle",
      "Ext.form.field.ComboBox",
      "Etna.form.field.Attachment",
      "Ext.form.FieldSet",
      "Ext.form.field.Date",
      "Ext.form.field.Number",
      "Ext.chart.CartesianChart",
      "Ext.chart.axis.Time",
      "Ext.chart.series.Line",
      "Ext.grid.Panel",
      "Ext.grid.column.Number",
      "Ext.grid.column.Date",
      "Ext.grid.View",
      "Etna.grid.plugin.Export",
      "Etna.grid.plugin.Block",
      "Etna.grid.plugin.Context",
      "Etna.grid.plugin.Stateful"
    ]
  },
  "bid_sp.view.openInfoData.detail.service.BidResultDetailServiceViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Cmmn.store.Enum",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Ext.app.bind.Formula",
      "Cmmn.store.OperatingUnit",
      "bid_sp.model.openInfoData.OpenInfoDataList"
    ]
  },
  "bid_sp.view.ExListViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "bid_sp.view.openInfoData.list.ContractResultByItemListViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.util.Filter",
      "Cmmn.store.Enum",
      "Ext.data.field.String",
      "bid_sp.model.openInfoData.ContractResultList",
      "bid_sp.model.cmmn.CompanyCode"
    ]
  },
  "bid_sp.view.openInfoData.detail.service.BidResultDetailServiceViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "bid_sp.view.privateContract.detail.service.PrivateContractDetailSPViewController1": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  }
}
);