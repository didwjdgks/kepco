Ext.define('Portal.controller.override.GridFactory', {
    override: 'Portal.controller.GridFactory'
    
}, function(){
    Ext.define('Portal.override.dashboard.Part',{
        override : 'Ext.dashboard.Part',
        viewTemplateOptions : {
            excludeProperties: {
                bind: 1,
                tpl : 1// 템플릿 컬럼 문제 해결
            }
        }
    });
});

/*
 * File: app/controller/PartFactory.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.controller.PartFactory', {
    extend:  Ext.Base ,

    factory: function(portlet) {
        var me = this;
        var viewTemplate = {
            collapsed: '{collapsed}',
            columnIndex: '{columnIndex}',
            height : portlet.get('height'),
            title : portlet.get('title'),
            closable : portlet.get('closable'),
            tools : me.getTools(portlet),
            frame : false
        };
        return {
            factory : me,
            viewTemplate : viewTemplate
        };
    },

    getTools: function(portlet) {
        var me = this;
        // me.onHelp = Ext.Function.bind(function(text){
        //     alert(text);
        // }, me, [portlet.get('remark')]);
        // return [{
        //     type : 'help',
        //     callback : 'onHelp',
        //     scope : 'factory'
        // }];
        return [];
    }

});

/*
 * File: app/controller/ComponentFactory.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.controller.ComponentFactory', {
    extend:  Portal.controller.PartFactory ,

    factory: function(portlet) {
        var part = this.callParent(arguments);
        var content = portlet.get('content');
        var component = Ext.apply({}, content.config);
        if(content.className){
            component.xclass = content.className;
        }
        part.componentConfig = component;
        part.viewTemplate.items = component;
        return part;
    },

    getTools: function(portlet) {
        var me = this;
        var tools = me.callParent(arguments);
        me.onRefresh = Ext.Function.bind(function(owner, tool){
            owner.remove(0);
            owner.setLoading(true);
            Ext.defer(function(){
                owner.add(owner.part.config.componentConfig);
                owner.setLoading(false);
            }, 100);

        }, me);
        tools.push({
            type : 'refresh',
            callback : 'onRefresh',
            scope : 'factory'
        });
        return tools;
    }

});

/*
 * File: app/controller/DropZone.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.controller.DropZone', {
    extend:  Ext.dashboard.DropZone ,

    isRowExtensible: function(rowIndex) {
        return false;
    },

    notifyDrop: function(dd, e, data) {
        var dashboard = this.dashboard,
            over = data.lastOver,
            panel = over.panel,
            fromCt = panel.ownerCt,
            toCt = over.column,
            side = toCt ? over.beforeAfter : 1,
            newIndex = toCt ? (over.above ? toCt.items.indexOf(over.above) : toCt.items.getCount()) : 0,
            colIndex, newCol,
            hasListeners = dashboard.hasListeners, record = data.record;

        if(fromCt == null){
            if ((hasListeners.validatedrop && dashboard.fireEvent('validatedrop', over) === false) ||
                (hasListeners.beforedrop && dashboard.fireEvent('beforedrop', over) === false)) {
                return;
            }

            Ext.suspendLayouts();

            panel.isMoving = true;
            if (side) {
                colIndex = dashboard.items.indexOf(toCt);


                if (colIndex < 0) {
                    colIndex = dashboard.items.getCount();
                } else if (side > 0) {
                    ++colIndex;
                }

                newCol = dashboard.createColumn();

                if (toCt) {
                    newCol.columnWidth = toCt.columnWidth = toCt.columnWidth / 2;
                    delete toCt.width;
                } else {
                    newCol.columnWidth = 1;
                }

                toCt = dashboard.insert(colIndex, newCol);
                newIndex = 0;
            }


            panel.el.dom.style.display = '';

            toCt.insert(newIndex, dashboard.createView({type : record.get('id')}));

            panel.isMoving = false;

            toCt.updateLayout();
            Ext.resumeLayouts(true);

            if (hasListeners.drop) {
                dashboard.fireEvent('drop', over);
            }
        }else{
            this.callParent(arguments);
        }
        Ext.each(dashboard.items.items, function(item){
            item.el.setStyle('height', Ext.isIE8 ? '' : 'initial');
        });
        var iframes = dashboard.query('portaluxiframe');
        Ext.each(iframes, function(iframe){
            iframe.getFrame().style.display = 'initial';
        });
    },

    notifyEnter: function(dd, e, data) {
        var dashboard = this.dashboard;
        Ext.each(dashboard.items.items, function(item){
            if(item.getHeight() < 10){
                item.el.setStyle('height', "100%");
            }
        });
        var iframes = dashboard.query('portaluxiframe');
        Ext.each(iframes, function(iframe){
            iframe.getFrame().style.display = 'none';
        });
    },

    notifyOut: function(dd, e, data) {
        var dashboard = this.dashboard;
        Ext.each(dashboard.items.items, function(item){
            item.el.setStyle('height', Ext.isIE8 ? '' : 'initial');
        });
        var iframes = dashboard.query('portaluxiframe');
        Ext.each(iframes, function(iframe){
            iframe.getFrame().style.display = 'initial';
        });
    },

    getOverEvent: function(dd, e, data) {
        var dashboard = this.dashboard,
            items = dashboard.items.items, count = items.length,
            over = this.callParent(arguments),
            xy = e.getXY(),
            y = xy[1] - dashboard.body.getBox().y;

        for (var i = 0, item; i < count; i++) {
            item = items[i];
            var x = e.getX() - item.el.getX();
            if(x >= 0 && x <= item.el.getWidth()){
                over.columnIndex = i;
                over.column = item;
                var childItems = item.items.getRange();
                for(var k=0, len=childItems.length; k<len; ++k) {
                    var childItem = childItems[k];
                    var ht = childItem.el.getHeight();
                    if(y < ht / len) {
                        over.above = childItem;
                        break;
                    }
                    y -= ht;
                }
            }
        }
        over.beforeAfter = 0;
        return over;
    }

});

/*
 * File: app/controller/GridFactory.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.controller.GridFactory', {
    extend:  Portal.controller.PartFactory ,

               
                                                 
                            
      

    factory: function(portlet) {
        var part = this.callParent(arguments);
        var content = portlet.get('content');
        var grid = Ext.apply({
            xclass : 'Portal.view.partview.Grid',
            columns : content.columns,
            proxy : content.proxy,
            proxyProperties : content.proxyProperties,
            click : content.click
        }, content.gridProperties);
        part.viewTemplate.items = grid;
        return part;
    },

    getTools: function(portlet) {
        var me = this;
        var tools = me.callParent(arguments);
        me.onRefresh = Ext.Function.bind(function(owner, tool){
            var grid = owner.down('gridpanel');
            grid.getStore().reload();
        }, me);
        // tools.push({
        //     type : 'refresh',
        //     callback : 'onRefresh',
        //     scope : 'factory'
        // });
        return tools;
    }

});

/*
 * File: app/controller/PageFactory.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.controller.PageFactory', {
    extend:  Portal.controller.PartFactory ,

    factory: function(portlet) {
        var part = this.callParent(arguments);
        var content = portlet.get('content');
        part.viewTemplate.items = {
            xclass : 'Portal.ux.IFrame',
            src : content.url
        };;
        return part;
    },

    getTools: function(potlet) {
        var me = this;
        var tools = me.callParent(arguments);
        me.onRefresh = Ext.Function.bind(function(owner, tool){
            var iframe = owner.down('portaluxiframe');
            iframe.load(iframe.src);
        }, me);
        tools.push({
            type : 'refresh',
            callback : 'onRefresh',
            scope : 'factory'
        });
        return tools;
    }

});

/*
 * File: app/controller/PortletDragSource.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.controller.PortletDragSource', {
    extend:  Ext.dd.DragSource ,

    constructor: function(config) {
        var me = this;
        me.view = config.view;
        me.dashboard = config.dashboard;
        var el, view = me.view, ownerCt = view.ownerCt;
        // We don't just grab the parent el, since the parent el may be
        // some el injected by the layout
        if (ownerCt) {
            el = ownerCt.getTargetEl().dom;
        } else {
            el = view.el.dom.parentNode;
        }
        me.callParent([el]);

    },

    showFrame: function() {

    },

    startDrag: function() {

    },

    b4StartDrag: function(x, y) {
        var me = this;
        me.panel.showAt(-1000, -1000);
        me.panelProxy = new Ext.panel.Proxy(me.panel);
        me.proxy = me.panelProxy;
        me.panelProxy.show();
        me.panelProxy.getEl().setXY([x,y]);
    },

    b4MouseDown: function(e) {
        var xy = e.getXY(),
            x = xy[0],
            y = xy[1];

        this.autoOffset(x, y);
    },

    onInitDrag: function(x, y) {
        this.onStartDrag(x, y);
        return true;
    },

    endDrag: function(e) {
        this.panelProxy.hide();
        Ext.destroy(this.panel);
        delete this.panel;
        delete this.panelProxy;
    },

    getDragEl: function(e) {
        var ghost = this.panelProxy.ghost;
        if (ghost) {
            return ghost.el.dom;
        }
    },

    autoOffset: function(x, y) {
        x -= this.startPageX;
        y -= this.startPageY;
        this.setDelta(x, y);
    },

    onInvalidDrop: function(target, e, id) {
        var me = this;

        if (me.beforeInvalidDrop(target, e, id) !== false) {
            if (me.cachedTarget) {
                if(me.cachedTarget.isNotifyTarget){
                    me.cachedTarget.notifyOut(me, e, me.dragData);
                }
                me.cacheTarget = null;
            }

            if (me.afterInvalidDrop) {
                /**
                        * An empty function by default, but provided so that you can perform a custom action
                        * after an invalid drop has occurred by providing an implementation.
                        * @param {Event} e The event object
                        * @param {String} id The id of the dropped element
                        * @method afterInvalidDrop
                        */
                me.afterInvalidDrop(e, id);
            }
        }
    },

    createFrame: function() {

    },

    getDragData: function(e) {
        var view = this.view,
            item = e.getTarget(view.getItemSelector()),
            record = view.getRecord(item);

        if (item) {
            this.panel = Ext.create('Ext.panel.Panel', {
                title : record.get('title'),
                width : 300,
                height :300,
                floating : true,
                frame : true,
                listeners : {
                    added : function( component, container, pos, eOpts){
                        console.log('added');
                    }
                }
            });
            return {
                event: e,
                panel : this.panel,
                record: record,
                fromPosition: Ext.fly(item).getXY()
            };
        }

    },

    setDragElPos: function(iPageX, iPageY) {
        var el = this.getDragEl();
        Ext.fly(el).setXY([iPageX, iPageY]);
    }

});

/*
 * File: app/model/Portlet.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.model.Portlet', {
    extend:  Ext.data.Model ,

               
                                
                                
                                 
                                 
                             
      

    identifier: 'uuid',

    proxy: {
        type: 'direct',
        api: {
            destroy: 'smartsuit.ui.etnajs.portal.ConfigurationController.deletePortlet'
        }
    },

    fields: [
        {
            type: 'string',
            name: 'id'
        },
        {
            type: 'string',
            allowNull: true,
            name: 'type',
            validations: [
                {
                    type: 'presence',
                    field: 'type'
                }
            ]
        },
        {
            type: 'string',
            name: 'name',
            validations: [
                {
                    type: 'presence',
                    field: 'name'
                },
                {
                    type: 'length',
                    field: 'name',
                    min: 3
                }
            ]
        },
        {
            type: 'string',
            name: 'title',
            validations: [
                {
                    type: 'presence'
                },
                {
                    type: 'length',
                    min: 3
                }
            ]
        },
        {
            type: 'int',
            defaultValue: 300,
            name: 'width'
        },
        {
            type: 'int',
            defaultValue: 300,
            name: 'height'
        },
        {
            type: 'boolean',
            defaultValue: true,
            name: 'enabled'
        },
        {
            convert: function(v, rec) {
                if(Ext.isString(v)){
                    return Ext.JSON.decode(v);
                }
                return v;
            },
            serialize: function(value, record) {
                return Ext.JSON.encode(value);
            },
            defaultValue: {
                
            },
            name: 'content'
        },
        {
            type: 'string',
            name: 'remark'
        },
        {
            type: 'string',
            name: 'iconStyle'
        },
        {
            type: 'string',
            name: 'imageStyle'
        },
        {
            type: 'date',
            name: 'registDate'
        },
        {
            type: 'date',
            name: 'modifyDate'
        },
        {
            type: 'string',
            name: 'locale'
        },
        {
            type: 'string',
            name: 'portletGroup'
        },
        {
            type: 'boolean',
            name: 'closable'
        },
        {
            type: 'boolean',
            name: 'defaultOptioned'
        },
        {
            type: 'boolean',
            defaultValue: false,
            name: 'disclosed'
        }
    ]
});

/*
 * File: app/store/CodeStore.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.store.CodeStore', {
    extend:  Cmmn.store.Code ,

               
                                
                               
                               
      

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            storeId: 'CodeStore',
            type: 'cmmncode',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.cmmn.CommonController.getCodes',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'value'
                },
                {
                    defaultValue: {
                        
                    },
                    name: 'properties'
                }
            ]
        }, cfg)]);
    }
});

/*
 * File: app/store/Portlet.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.store.Portlet', {
    extend:  Ext.data.Store ,

               
                               
                                
                              
      

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            storeId: 'Portlet',
            model: 'Portal.model.Portlet',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.portal.ConfigurationController.findAllPortlet',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        }, cfg)]);
    }
});

/*
 * File: app/store/admin/PortletGroup.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.store.admin.PortletGroup', {
    extend:  Ext.data.Store ,

    singleton: true,
               
                                
                               
                               
      

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            storeId: 'admin.PortletGroup',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.portal.ConfigurationController.findAllPortletGroup',
                reader: {
                    type: 'json',
                    rootProperty: 'records',
                    transform: {
                        fn: function(items){
                            var result = [];
                            Ext.each(items, function(item){
                                result.push({text : item});
                            });
                            return result;
                        }
                    }
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'text'
                }
            ]
        }, cfg)]);
    }
});

/*
 * File: app/store/config/Icon.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.store.config.Icon', {
    extend:  Ext.data.Store ,

    singleton: true,
               
                               
      

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            storeId: 'config.Icon',
            data: [
                {
                    className: 'portlet_title_icon_1'
                },
                {
                    className: 'portlet_title_icon_2'
                },
                {
                    className: 'portlet_title_icon_3'
                },
                {
                    className: 'portlet_title_icon_4'
                },
                {
                    className: 'portlet_title_icon_5'
                },
                {
                    className: 'portlet_title_icon_6'
                },
                {
                    className: 'portlet_title_icon_7'
                },
                {
                    className: 'portlet_title_icon_8'
                },
                {
                    className: 'portlet_title_icon_9'
                },
                {
                    className: 'portlet_title_icon_10'
                },
                {
                    className: 'portlet_title_icon_11'
                },
                {
                    className: 'portlet_title_icon_12'
                },
                {
                    className: 'portlet_title_icon_13'
                },
                {
                    className: 'portlet_title_icon_14'
                },
                {
                    className: 'portlet_title_icon_15'
                },
                {
                    className: 'portlet_title_icon_16'
                },
                {
                    className: 'portlet_title_icon_17'
                },
                {
                    className: 'portlet_title_icon_18'
                },
                {
                    className: 'portlet_title_icon_19'
                },
                {
                    className: 'portlet_title_icon_20'
                },
                {
                    className: 'portlet_title_icon_21'
                }
            ],
            fields: [
                {
                    type: 'string',
                    name: 'className'
                }
            ]
        }, cfg)]);
    }
});

/*
 * File: app/store/config/Image.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.store.config.Image', {
    extend:  Ext.data.Store ,

    singleton: true,
               
                              
      

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            storeId: 'config.Image',
            data: [
                {
                    className: 'portlet-icon-1'
                },
                {
                    className: 'portlet-icon-2'
                },
                {
                    className: 'portlet-icon-3'
                },
                {
                    className: 'portlet-icon-4'
                },
                {
                    className: 'portlet-icon-5'
                },
                {
                    className: 'portlet-icon-6'
                },
                {
                    className: 'portlet-icon-7'
                },
                {
                    className: 'portlet-icon-8'
                }
            ],
            fields: [
                {
                    name: 'className'
                }
            ]
        }, cfg)]);
    }
});

/*
 * File: app/store/config/Part.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.store.config.Part', {
    extend:  Ext.data.Store ,

    singleton: true,
               
                               
      

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            storeId: 'config.Part',
            data: [
                {
                    id: 'grid',
                    text: '#{grid}',
                    editor: 'Portal.view.admin.editor.Grid',
                    factory: 'Portal.controller.GridFactory'
                },
                {
                    id: 'page',
                    text: '#{page}',
                    editor: 'Portal.view.admin.editor.Page',
                    factory: 'Portal.controller.PageFactory'
                },
                {
                    id: 'component',
                    text: '#{component}',
                    editor: 'Portal.view.admin.editor.Component',
                    factory: 'Portal.controller.ComponentFactory'
                }
            ],
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'editor'
                },
                {
                    type: 'string',
                    name: 'factory'
                }
            ]
        }, cfg)]);
    }
});

/*
 * File: app/store/config/Proxy.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.store.config.Proxy', {
    extend:  Ext.data.Store ,

    singleton: true,
               
                               
      

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            storeId: 'config.Proxy',
            data: [
                {
                    id: 'ajax-json',
                    name: 'Ajax-JSON',
                    properties: {
                        url: '',
                        rootProperty: ''
                    },
                    template: {
                        type: 'ajax',
                        url: '{url}',
                        reader: {
                            type: 'json',
                            rootProperty: '{rootProperty}'
                        }
                    }
                },
                {
                    id: 'ext-direct',
                    name: 'Ext.Direct',
                    properties: {
                        directFn: '',
                        rootProperty: ''
                    },
                    template: {
                        type: 'direct',
                        directFn: '{directFn}',
                        reader: {
                            type: 'json',
                            rootProperty: '{rootProperty}'
                        }
                    }
                }
            ],
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'name'
                },
                {
                    name: 'properties'
                },
                {
                    name: 'template'
                }
            ]
        }, cfg)]);
    }
});

/*!
 * Ext JS Library
 * Copyright(c) 2006-2014 Sencha Inc.
 * licensing@sencha.com
 * http://www.sencha.com/license
 */

/**
 * Barebones iframe implementation. For serious iframe work, see the
 * ManagedIFrame extension
 * (http://www.sencha.com/forum/showthread.php?71961).
 */
Ext.define('Portal.ux.IFrame', {
    extend:  Ext.Component ,

    alias: 'widget.portaluxiframe',

    src: 'about:blank',

    renderTpl: [
        '<iframe src="{src}" name="{frameName}" width="100%" height="100%" frameborder="0"></iframe>'
    ],
    
    childEls : {
    	iframeEl: {
    		selectNode : 'iframe'
    	}
    },

    initComponent: function () {
        this.callParent();

        this.frameName = this.frameName || this.id + '-frame';
    },

    initEvents : function() {
        var me = this;
        me.callParent();
        me.iframeEl.on('load', me.onLoad, me);
    },

    initRenderData: function() {
        return Ext.apply(this.callParent(), {
            src: this.src,
            frameName: this.frameName
        });
    },

    getBody: function() {
        var doc = this.getDoc();
        return doc.body || doc.documentElement;
    },

    getDoc: function() {
        try {
            return this.getWin().document;
        } catch (ex) {
            return null;
        }
    },

    getWin: function() {
        var me = this,
            name = me.frameName,
            win = Ext.isIE
                ? me.iframeEl.dom.contentWindow
                : window.frames[name];
        return win;
    },

    getFrame: function() {
        var me = this;
        return me.iframeEl.dom;
    },

    beforeDestroy: function () {
        this.cleanupListeners(true);
        this.callParent();
    },
    
    cleanupListeners: function(destroying){
        var doc, prop;

        if (this.rendered) {
            try {
                doc = this.getDoc();
                if (doc) {
                    Ext.EventManager.removeAll(doc);
                    if (destroying) {
                        for (prop in doc) {
                            if (doc.hasOwnProperty && doc.hasOwnProperty(prop)) {
                                delete doc[prop];
                            }
                        }
                    }
                }
            } catch(e) { }
        }
    },

    onLoad: function() {
        var me = this,
            doc = me.getDoc(),
            fn = me.onRelayedEvent;

        if (doc) {
            try {
                Ext.EventManager.removeAll(doc);

                // These events need to be relayed from the inner document (where they stop
                // bubbling) up to the outer document. This has to be done at the DOM level so
                // the event reaches listeners on elements like the document body. The effected
                // mechanisms that depend on this bubbling behavior are listed to the right
                // of the event.
                Ext.EventManager.on(doc, {
                    mousedown: fn, // menu dismisal (MenuManager) and Window onMouseDown (toFront)
                    mousemove: fn, // window resize drag detection
                    mouseup: fn,   // window resize termination
                    click: fn,     // not sure, but just to be safe
                    dblclick: fn,  // not sure again
                    scope: me
                });
            } catch(e) {
                // cannot do this xss
            }

            // We need to be sure we remove all our events from the iframe on unload or we're going to LEAK!
            Ext.EventManager.on(this.getWin(), 'beforeunload', me.cleanupListeners, me);
           	me.setLoading(false);
            this.fireEvent('load', this);

        } else if(me.src && me.src != '') {
           	me.setLoading(false);
            this.fireEvent('error', this);
        }


    },

    onRelayedEvent: function (event) {
        // relay event from the iframe's document to the document that owns the iframe...

        var iframeEl = this.iframeEl,

            // Get the left-based iframe position
            iframeXY = Ext.Element.getTrueXY(iframeEl),
            originalEventXY = event.getXY(),

            // Get the left-based XY position.
            // This is because the consumer of the injected event (Ext.EventManager) will
            // perform its own RTL normalization.
            eventXY = Ext.EventManager.getPageXY(event.browserEvent);

        // the event from the inner document has XY relative to that document's origin,
        // so adjust it to use the origin of the iframe in the outer document:
        event.xy = [iframeXY[0] + eventXY[0], iframeXY[1] + eventXY[1]];

        event.injectEvent(iframeEl); // blame the iframe for the event...

        event.xy = originalEventXY; // restore the original XY (just for safety)
    },

    load: function (src) {
        var me = this,
            frame = me.getFrame();
        //if (me.fireEvent('beforeload', me, src) !== false) {
        	me.setLoading(true);
            frame.src = me.src = (src || me.src);
        //}
    }
});

/*
 * File: app/view/DashboardViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.DashboardViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.portaldashboard',

               
                               
      

    stores: {
        partStore: {
            source: 'config.Part'
        }
    }

});

/*
 * File: app/view/DashboardViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.DashboardViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.portaldashboard',

               
                                    
      

    init: function() {

    },

    onDashboardAdd: function(container, component, index, eOpts) {
        component.onRemove = Ext.emptyFn;
    }

});

/*
 * File: app/view/Dashboard.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.Dashboard', {
    extend:  Ext.dashboard.Dashboard ,
    alias: 'widget.portaldashboard',

               
                                         
                                              
                               
                                  
      

    controller: 'portaldashboard',
    viewModel: {
        type: 'portaldashboard'
    },
    height: 768,
    width: 1024,
    layout: 'column',
    bodyPadding: 5,
    parts: {
        
    },
    columnWidths: [
        0.25,
        0.25,
        0.25,
        0.25
    ],

    listeners: {
        add: 'onDashboardAdd'
    },

    setPortlets: function(portlets) {
        var me = this, vm = me.getViewModel(), parts = {};
        var partStore = vm.getStore('partStore');
        Ext.each(portlets, function(portlet){
            var partType = partStore.getById(portlet.get('type'));
            var factory = Ext.create(partType.get('factory'));
            var part = factory.factory(portlet);
            parts[portlet.getId()] = part;
        });
        me.setParts(parts);
    },

    initEvents: function() {
        this.callParent(arguments);
        this.dd.destroy();
        this.dd = new Portal.controller.DropZone(this, this.dropConfig);
    },

    createColumn: function(config) {
        var column = this.callParent(arguments);
        column.padding = 3;
        return column;
    }

});

/*
 * File: app/view/PortalViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.PortalViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.portal',

               
                         
                                
                               
                                
                              
      

    stores: {
        portletStore: {
            autoLoad: true,
            model: 'Portal.model.Portlet',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.portal.PortalController.findAllPortlet',
                reader: {
                    type: 'json'
                }
            },
            listeners: {
                load: 'onPortletStoreLoad'
            }
        },
        filteredPortletStore: {
            source: '{portletStore}'
        },
        portletGroupStore: {
            autoLoad: true,
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.portal.PortalController.findAllPortletGroups',
                reader: {
                    type: 'json',
                    rootProperty: 'records',
                    transform: {
                        fn: function(items){
                            var result = [];
                            Ext.each(items, function(item){
                                result.push({text : item});
                            });
                            return result;
                        }
                    }
                }
            },
            fields: [
                {
                    name: 'text'
                }
            ]
        }
    }

});

/*
 * File: app/view/PortalViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.PortalViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.portal',

               
                                             
      

    init: function() {
        var me = this,
            view = me.getView(),
            vm = me.getViewModel(),
            dashboard = me.lookupReference('dashboard');
        me.saveState = Ext.Function.createBuffered(me.saveState, 1000, me);
        Ext.Function.interceptAfter(me, "setColumnWidths", me.saveState, me);
        view.setColumnWidths = Ext.bind(me.setColumnWidths, me);
        view.getColumnWidths = Ext.bind(me.getColumnWidths, me);
        if(!view.stateful){
            view.applyState({});
        }
    },

    setColumnWidths: function(widths) {
        var me = this;
        var slider = me.lookupReference('columnWidthsSlider');
        var dashboard = me.lookupReference('dashboard');
        var columns = dashboard.items.items;
        var count = Math.max(columns.length, widths.length);
        var shouldMigrations = [];
        dashboard.columnWidths = widths;
        Ext.suspendLayouts();
        for(var i=0 ; i < count ; i++){
            var column = columns[i];
            var width = widths[i];
            if(Ext.isNumber(width)){
                if(!column){
                    column = dashboard.createColumn({
                        columnWidth : width
                    });
                    column.items = [];
                    dashboard.add(i, column);
                }
                column.columnWidth = width;
            }else{
                if(column){
                    shouldMigrations = Ext.Array.union(shouldMigrations, column.removeAll(false));
                    dashboard.remove(column, true);
                }
            }
        }
        columns = dashboard.items.items;
        Ext.each(shouldMigrations, function(item, i){
            columns[i % columns.length].add(item);
        });
        me.applySlider(me.convertForSlider(widths));
        Ext.resumeLayouts(true);
        dashboard.doLayout();
    },

    convertForSlider: function(values) {
        var converted = [], sum = 0;
        Ext.each(values, function(value){
            sum = sum + (value * 100);
            converted.push(sum);
        });
        converted.pop();
        return converted;
    },

    convertForColumnWidths: function(value) {
        var converted = [], prevV, sum = 0, cv;
        value = Ext.Array.sort(value);
        Ext.each(value, function(v){
            cv = Number(((prevV != null ? v - prevV : v) / 100).toFixed(2));
            converted.push(cv);
            prevV = v;
            sum += cv;
        });
        converted.push(Number((1 - sum).toFixed(2)));
        return converted;
    },

    getEqualPartitions: function(count) {
        var values = [];
        for(var i=0 ; i < count ; i++){
            values.push(1 / count);
        }
        return values;
    },

    getColumnWidths: function() {
        var me = this,dashboard = me.lookupReference('dashboard');
        return dashboard.columnWidths;
    },

    applySlider: function(values) {
        var me = this,
            slider = me.lookupReference('columnWidthsSlider'),
            thumbCount = slider.thumbs.length,
            valueCount = values.length;

        if(thumbCount > valueCount){
            slider.thumbs.pop().destroy();
            slider.thumbStack = Ext.Array.slice(slider.thumbs);
        }else if(thumbCount < valueCount){
            slider.addThumb();
        }
        slider.setValue(values, true);
        me.lookupReference('addThumbButton').setDisabled(valueCount >= 3);
        me.lookupReference('removeThumbButton').setDisabled(valueCount <= 1);
    },

    saveState: function() {
        var me = this, view = me.getView();
        view.saveState();
    },

    onPortletGroupChange: function(field, newValue, oldValue, eOpts) {
        var me = this, vm = me.getViewModel();
        var store = vm.getStore('filteredPortletStore');
        store.clearFilter();
        store.filterBy(function(record){
            return record.get('portletGroup') == newValue;
        });
    },

    onPortletViewRender: function(component, eOpts) {
        var me = this, dashboard = me.lookupReference("dashboard");

        component.dragZone = new Ext.create('Portal.controller.PortletDragSource',{
            view : component,
            dashboard : dashboard
        });
    },

    onConfigButtonClick: function(button, e, eOpts) {
        var me = this, vm = me.getViewModel(), pressed = button.pressed;
        me.lookupReference('portletList').setHidden(!pressed);

        if(pressed) {
            button.ownerCt.addCls('collapse');
        }
        else {
            button.ownerCt.removeCls('collapse');
        }

    },

    onRemoveThumbButtonClick: function(button, e, eOpts) {
        var me = this;
        var widths = me.getEqualPartitions(me.getColumnWidths().length - 1);
        me.setColumnWidths(widths);
    },

    onAddThumbButtonClick: function(button, e, eOpts) {
        var me = this;
        var widths = me.getEqualPartitions(me.getColumnWidths().length + 1);
        me.setColumnWidths(widths);

    },

    onToggleSliderButtonClick: function(button, e, eOpts) {
        var me = this,
            pressed = button.pressed;

        me.lookupReference('topConfigBar').setHidden(!pressed);
    },

    onSliderChangeComplete: function(slider, newValue, thumb, eOpts) {
        var me = this;
        var width = me.convertForColumnWidths(slider.getValues());
        me.setColumnWidths(width);

    },

    onDashboardDrop: function(eOpts) {
        this.saveState();
    },

    onDashboardRemove: function(container, component, eOpts) {
        this.saveState();
    },

    onPortletStoreLoad: function(store, records, successful, eOpts) {
        var me = this, vm = me.getViewModel(), dashboard = me.lookupReference('dashboard');
        if(successful){
            dashboard.setPortlets(records);
        }
    }

});

/*
 * File: app/view/Portal.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.Portal', {
    extend:  Ext.window.Window ,
    alias: 'widget.portal',

               
                                      
                                           
                                
                                  
                        
                        
                            
                              
                           
                                 
      

    config: {
        authenticated: true
    },

    controller: 'portal',
    viewModel: {
        type: 'portal'
    },
    stateId: 'portal.layout',
    stateful: true,
    autoShow: true,
    cls: 'portal',
    layout: 'border',
    maximized: true,

    items: [
        {
            xtype: 'panel',
            collapseMode: 'mini',
            region: 'west',
            reference: 'portletList',
            cls: 'portlet-list',
            hidden: true,
            width: 150,
            animCollapse: true,
            collapseDirection: 'left',
            header: false,
            overlapHeader: false,
            layout: {
                type: 'vbox',
                align: 'stretch',
                padding: 5
            },
            items: [
                {
                    xtype: 'combobox',
                    margin: '0 5',
                    fieldLabel: 'Portlet Group',
                    hideLabel: true,
                    labelAlign: 'top',
                    forceSelection: true,
                    queryMode: 'local',
                    bind: {
                        store: '{portletGroupStore}'
                    },
                    listeners: {
                        change: 'onPortletGroupChange'
                    }
                },
                {
                    xtype: 'dataview',
                    flex: 1,
                    reference: 'portletView',
                    autoScroll: true,
                    cls: 'portlet-list-view',
                    itemSelector: 'div.portlet-wrap',
                    itemTpl: [
                        '<tpl for=".">',
                        '    <div class="portlet-wrap">',
                        '        <div class="portlet-icon-wrap">',
                        '            <div class="{imageStyle}"></div>',
                        '        </div>',
                        '        <div class="portlet-title-wrap">',
                        '            <div class="portlet-title">{title}</div>',
                        '        </div>',
                        '        <!--',
                        '        <div class="portlet-content">',
                        '            <div class="portlet-icon">',
                        '                <div class="{imageStyle}"></div>',
                        '            </div>',
                        '            <div class="portlet-bullet-wrapper">',
                        '                <div class="portlet-bullet">{title}</div>',
                        '            </div>',
                        '        </div>',
                        '-->',
                        '    </div>',
                        '</tpl>'
                    ],
                    overItemCls: 'portlet-over',
                    bind: {
                        store: '{filteredPortletStore}'
                    },
                    listeners: {
                        render: 'onPortletViewRender'
                    }
                }
            ]
        },
        {
            xtype: 'container',
            region: 'west',
            cls: 'portlet-config-button-container',
            width: 31,
            defaults: {
                margin: '0 0 5 0'
            },
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'container',
                    flex: 1,
                    cls: 'config expand',
                    height: 128,
                    margin: '1 0 0 0',
                    layout: {
                        type: 'vbox',
                        align: 'center'
                    },
                    items: [
                        {
                            xtype: 'button',
                            reference: 'configButton',
                            cls: 'toggle',
                            frame: false,
                            height: 40,
                            width: 30,
                            enableToggle: true,
                            tooltip: '#{Portal Menu}',
                            listeners: {
                                click: 'onConfigButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            reference: 'removeThumbButton',
                            shadow: false,
                            cls: 'config-button top',
                            frame: false,
                            width: 27,
                            iconCls: 'remove',
                            tooltip: '#{Decreasing Split Screen}',
                            listeners: {
                                click: 'onRemoveThumbButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            reference: 'addThumbButton',
                            shadow: false,
                            cls: 'config-button',
                            frame: false,
                            width: 27,
                            iconCls: 'add',
                            tooltip: '#{Increasing Split Screen}',
                            listeners: {
                                click: 'onAddThumbButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            reference: 'toggleSliderButton',
                            shadow: false,
                            cls: 'config-button',
                            frame: false,
                            width: 27,
                            enableToggle: true,
                            iconCls: 'slider',
                            tooltip: '#{Split Screen Slider}',
                            listeners: {
                                click: 'onToggleSliderButtonClick'
                            }
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'panel',
            region: 'center',
            layout: 'fit',
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    reference: 'topConfigBar',
                    cls: 'config-toolbar',
                    hidden: true,
                    items: [
                        {
                            xtype: 'multislider',
                            flex: 1,
                            reference: 'columnWidthsSlider',
                            value: 50,
                            listeners: {
                                changecomplete: 'onSliderChangeComplete'
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'portaldashboard',
                    reference: 'dashboard',
                    columnWidths: [
                        0.5,
                        0.5
                    ],
                    listeners: {
                        drop: 'onDashboardDrop',
                        remove: 'onDashboardRemove'
                    }
                }
            ]
        }
    ],

    getState: function() {
        var me = this,
            vm = me.getViewModel(),
            dashboard = me.lookupReference('dashboard');
        var state = dashboard.getState();
        state.columnWidths = me.getColumnWidths();
        return state;
    },

    applyState: function(state) {
        var me = this,
            vm = me.getViewModel(),
            dashboard = me.lookupReference('dashboard');
        Etna.onDone(function(){
            if(!state){
                state = {};
            }
            if(!Ext.isArray(state.columnWidths)){
                state.columnWidths = [0.5, 0.5];
            }
            if(!Ext.isArray(state.items)){
                state.items = [];

                var store = vm.getStore('portletStore'),
                    index = 0,
                    columnLength = state.columnWidths.length;
                store.each(function(record){
                    if(record.get('defaultOptioned')){
                        state.items.push({
                            columnIndex : index++ % columnLength,
                            id : dashboard.id + "_" + record.get('id'),
                            type : record.get('id')
                        });
                    }
                });

            }
            if(Ext.isNumber(state.idSeed)){
                dashboard.idSeed = state.idSeed;
            }
            dashboard.removeAll(true);
            var items = state.items, exists = [];
            Ext.each(items, function(item){
                var part = dashboard.getPart(item.type);
                if(part){
                    exists.push(item);
                }
            });
            try{
                dashboard.add(dashboard.deserializeItems(exists));
            }catch(e){}
            me.setColumnWidths(state.columnWidths);
        });

    }

});

/*
 * File: app/view/admin/PortletViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.PortletViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.portaladmin.portlet',

               
                              
      

    data: {
        data: null
    },

    formulas: {
        selected: {
            get: function(data) {
                return data !== null && data.isModel;
            },
            bind: '{data}'
        }
    }

});

/*
 * File: app/view/admin/PortletViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.PortletViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.portaladmin.portlet',

    setPortletDetail: function(portlet) {
        var vm = this.getViewModel();
        vm.set('data', portlet);
        vm.notify();
        this.lookupReference('detail').setPortlet(portlet);
    },

    onListSelect: function(portlet, eventOptions) {
        this.setPortletDetail(portlet);
    },

    onListCreate: function(portlet, eventOptions) {
        this.setPortletDetail(portlet);
    },

    onListLoad: function(eventOptions) {

    },

    onPanelClearDetail: function() {
        var vm = this.getViewModel();
        if(vm.get('data') !== null){
            this.lookupReference('detail').clearPortlet();
            vm.set('data', {});
        }

    },

    onPortletSaved: function(portlet, eventOptions) {
        var vm = this.getViewModel();
        vm.set('data', {});
        this.lookupReference('list').reload(portlet);
    },

    onPortletDeleted: function(portlet, eventOptions) {
        var vm = this.getViewModel();
        vm.set('data', {});
        this.lookupReference('list').reload();
    }

});

/*
 * File: app/view/admin/PortletListViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.PortletListViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.portaladmin.portletlist',

               
                         
                                
                                
                               
                               
      

    data: {
        condition: {
            
        }
    },

    stores: {
        localeStore: {
            autoLoad: true,
            fields: [
                {
                    type: 'string',
                    name: 'key'
                },
                {
                    type: 'string',
                    name: 'value'
                }
            ],
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.portal.ConfigurationController.getSupportedLocales',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            }
        },
        portletGroupStore: {
            source: 'admin.PortletGroup'
        },
        partStore: {
            source: 'config.Part'
        },
        portletStore: {
            model: 'Portal.model.Portlet',
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.portal.ConfigurationController.findAllPortlet'
            },
            listeners: {
                load: 'onPortletStoreLoad'
            }
        }
    }

});

/*
 * File: app/view/admin/PortletListViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.PortletListViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.portaladmin.portletlist',

               
                              
      

    init: function() {
        var me = this, view = me.getView(), vm = me.getViewModel();
        view.reload = Ext.Function.bind(me.reload, me);
        Portal.store.admin.PortletGroup.load({
            params : {
            }
        });
        /*vm.bind('{condition.locale}', function(locale){

        });
        Etna.onDone(function(){
            vm.set('condition.locale', Etna.i18n.Manager.getLocale());
        });*/
    },

    load: function() {
        var me = this, vm = me.getViewModel(), store = vm.getStore('portletStore');
        me.getView().setLoading(true);
        var m_tmp = Etna.i18n.Manager.translate;
        Etna.i18n.Manager.translate = function(target) {return target;};
        store.load({
            params : vm.get('condition'),
            callback:function(){
                Etna.i18n.Manager.translate = m_tmp;
                me.lookupReference('portletGrid').getSelectionModel().deselectAll();
                me.clearDetail();
                me.getView().setLoading(false);
            }
        });
    },

    reload: function(selection) {
        var me = this, vm = me.getViewModel(), store = vm.getStore('portletStore'), grid = me.lookupReference('portletGrid');
        store.load({
            params : vm.get('condition'),
            callback : function(records, operation, successful){
                if(successful){
                    var selModel = grid.getSelectionModel();
                    selModel.deselectAll();
                    if(selection){
                       var record = store.getById(selection.getId());
                       if(record){
                           selModel.select([record]);
                       }

                    }
                }
            }
        });
    },

    clearDetail: function() {
        var me = this, view = me.getView();

        view.fireEvent('clearDetail');
    },

    onSearchButtonClick: function(button, e, eOpts) {
        var me = this;
        me.load();
    },

    onAddButtonClick: function(button, e, eOpts) {
        var me = this, vm = me.getViewModel();
        var record = Ext.create('Portal.model.Portlet', {
            locale : vm.get('condition.locale')
        });
        me.lookupReference('portletGrid').getSelectionModel().deselectAll();
        me.getView().fireEvent('create', record);

    },

    onPortletGridSelect: function(rowmodel, record, index, eOpts) {
        var me = this;
        me.getView().fireEvent('select', record);
    },

    onPortletStoreLoad: function(store, records, successful, eOpts) {
        this.fireEvent('load');
    }

});

/*
 * File: app/view/admin/PortletList.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.PortletList', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.portaladminportletlist',

               
                                                 
                                                      
                         
                              
                               
                             
                            
                                  
                                           
                         
                        
                                
                                      
                                         
      

    controller: 'portaladmin.portletlist',
    viewModel: {
        type: 'portaladmin.portletlist'
    },
    cls: 'cmmn-lined-panel',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'form',
            itemId: 'searchForm',
            margin: '0 0 5 0',
            ui: 'search',
            bodyBorder: true,
            bodyPadding: 5,
            fieldDefaults: {
                labelWidth: 120
            },
            layout: {
                type: 'table',
                columns: 2,
                tdAttrs: {
                    style: {
                        width: '50%'
                    }
                }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    cls: 'search-toolbar',
                    ui: 'search',
                    items: [
                        {
                            xtype: 'tbtext',
                            text: '#{포틀릿 목록}'
                        },
                        {
                            xtype: 'tbspacer',
                            flex: 1
                        },
                        {
                            xtype: 'button',
                            iconCls: 'btn-search',
                            text: '#{조회}',
                            listeners: {
                                click: 'onSearchButtonClick'
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'combobox',
                    fieldLabel: '#{그룹}',
                    editable: false,
                    forceSelection: true,
                    queryMode: 'local',
                    valueField: 'text',
                    bind: {
                        value: '{condition.group}',
                        store: '{portletGroupStore}'
                    }
                },
                {
                    xtype: 'combobox',
                    fieldLabel: '#{유형}',
                    editable: false,
                    forceSelection: true,
                    queryMode: 'local',
                    bind: {
                        value: '{condition.type}',
                        store: '{partStore}'
                    }
                },
                {
                    xtype: 'textfield',
                    fieldLabel: '#{이름}',
                    bind: {
                        value: '{condition.name}'
                    }
                }
            ],
            plugins: [
                {
                    ptype: 'autoClearButton'
                }
            ]
        },
        {
            xtype: 'gridpanel',
            flex: 1,
            reference: 'portletGrid',
            ui: 'grid',
            header: false,
            title: 'My Grid Panel',
            bind: {
                store: '{portletStore}'
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    cls: 'grid-toolbar',
                    ui: 'grid',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'btn-add',
                            text: '#{추가}',
                            listeners: {
                                click: 'onAddButtonClick'
                            }
                        }
                    ]
                }
            ],
            columns: [
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    width: 153,
                    align: 'center',
                    dataIndex: 'userType',
                    text: 'userType'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'name',
                    tdCls: 'link',
                    text: '#{이름}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'title',
                    text: '#{제목}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 100,
                    align: 'center',
                    dataIndex: 'type',
                    text: '#{유형}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 100,
                    align: 'center',
                    dataIndex: 'portletGroup',
                    text: '#{그룹}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 60,
                    align: 'center',
                    dataIndex: 'width',
                    text: '#{넓이}'
                },
                {
                    xtype: 'gridcolumn',
                    width: 60,
                    align: 'center',
                    dataIndex: 'height',
                    text: '#{높이}'
                },
                {
                    xtype: 'checkcolumn',
                    width: 80,
                    dataIndex: 'enabled',
                    text: '#{활성화}'
                }
            ],
            listeners: {
                select: 'onPortletGridSelect'
            },
            plugins: [
                {
                    ptype: 'cellediting'
                }
            ]
        }
    ]

});

/*
 * File: app/view/admin/PortletDetailViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.PortletDetailViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.portaladmin.portletdetail',

               
                                
                              
      

    data: {
        editor: null,
        data: {
            
        },
        grantedAuthorities: null,
        deniedAuthorities: null
    },

    stores: {
        partStore: {
            source: 'config.Part'
        }
    },
    formulas: {
        isPhantom: {
            get: function(data) {
                return !data || data.phantom;
            },
            bind: '{data}'
        }
    },

    savePortlet: function() {

        var me = this;
        var grantedAuthorities = me.get('grantedAuthorities');
        var deniedAuthorities = me.get('deniedAuthorities');
        var portlet = me.get('data'), portletData = portlet.getData({serialize:true});
        var granted = [];
        var denied = [];
        console.log(portlet);
        grantedAuthorities.each(function(item){
            granted.push(item.getData());
        });
        deniedAuthorities.each(function(item){
            denied.push(item.getData());
        });

        var deferred = Ext.create('Deft.Deferred');
        smartsuit.ui.etnajs.portal.ConfigurationController.savePortlet(portletData, granted, denied, function(result, e){
            if(e.status){
                me.initPortlet();
                deferred.resolve(result);
            }else{
                deferred.reject(e);
            }
        });

        return deferred.promise;
    },

    deletePortlet: function() {
        var me = this;

        var portlet = me.get('data');

        var deferred = Ext.create('Deft.Deferred');
        portlet.erase({
            callback: function(records, operation, success, result) {
                if(success){
                    me.initPortlet();
                    deferred.resolve(result);
                }else{
                    deferred.reject(e);
                }
            }
        });
        return deferred.promise;
    },

    initPortlet: function() {
        var me = this;
        var grantedAuthorities = me.get('grantedAuthorities');
        var deniedAuthorities = me.get('deniedAuthorities');
        grantedAuthorities.removeAll();
        deniedAuthorities.removeAll();
    }

});

/*
 * File: app/view/admin/PortletDetailViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.PortletDetailViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.portaladmin.portletdetail',

    setPortlet: function(value) {
        var vm = this.getViewModel();
        vm.set('data', value);
        this.lookupReference('general').setPortlet(value);
        this.lookupReference('authority').setPortlet(value);
        var editor = vm.get('editor');
        if(value && editor){
            editor.setValue(Ext.clone(value.get('content')));
        }
        vm.initPortlet();
        this.getView().setActiveTab(0);
    },

    init: function() {
        var me = this, view = me.getView(), vm = me.getViewModel();
        view.setPortlet = Ext.Function.bind(me.setPortlet, me);
        view.clearPortlet = Ext.Function.bind(me.clearPortlet, me);
        vm.set('grantedAuthorities',new Ext.util.Collection({
             keyFn: function(item){
                return item.authority;
             }
         }));
        vm.set('deniedAuthorities',new Ext.util.Collection({
             keyFn: function(item){
                return item.authority;
             }
         }));
    },

    getPortlet: function() {
        var vm = this.getViewModel();
        var data = vm.get('data');
        var editor = vm.get('editor');
        if(data && editor){
            data.set('content', editor.getValue());
        }
        return data;
    },

    clearPortlet: function() {
        var me = this, vm = this.getViewModel();
        me.lookupReference('general').clearPortlet();
        me.lookupReference('authority').clearPortlet();
        me.getView().setActiveTab(0);
        me.lookupReference('general').clearPortlet();
        me.getView().setDisabled(true);
        me.lookupReference('authority').clearPortlet();

    },

    onGenaralPartChange: function(newValue, oldValue, eventOptions) {
        var me = this, vm = me.getViewModel();
        var container = me.lookupReference("contentContainer");
        var children = container.query('>component');
        Ext.suspendLayouts();
        Ext.each(children, function(child){
            child.setHidden(true);
        });
        var partStore = vm.getStore('partStore');
        var partRecord = partStore.getById(newValue);
        var child;
        if(partRecord){
            var aliases = Ext.ClassManager.getAliasesByName(partRecord.get('editor'));
            if(Ext.isArray(aliases)){
                child = container.down('>' + aliases[0].replace('widget.', ''));
            }
        }
        if(child){
            vm.set('editor', child);
            child.setHidden(false);
            var data = vm.get('data');
            if(data)
            child.setValue(data.get('content'));
        }else{
            vm.set('editor', null);
        }

        Ext.resumeLayouts(true);
    },

    onAddAuthority: function(authority, eventOptions) {
        var vm = this.getViewModel();
        var grantedAuthorities = vm.get('grantedAuthorities');
        grantedAuthorities.add(authority);
    },

    onRemoveAuthority: function(authority, eventOptions) {
        var vm = this.getViewModel();
        var deniedAuthorities = vm.get('deniedAuthorities');
        deniedAuthorities.add(authority);
    },

    onSaveButtonClick: function(button, e, eOpts) {
        var me = this, vm = me.getViewModel(), view = me.getView();
        var portlet = me.getPortlet();
        if(portlet.isValid()){
            Ext.Msg.confirm('#{확인}', '#{저장 하시겠습니까?}', function(btn){
            if(btn == 'yes'){
                view.setLoading(true);
                vm.savePortlet().then({
                    success: function(result) {
                        view.fireEvent('saved', vm.get('data'));
                    }
                }).always(function(){
                    view.setLoading(false);
                }).done();
            }
        });
    } else {
        Etna.Message.alert('#{포틀릿 상세정보 입력이 완료되지 않았습니다.}');
    }

    },

    onDeleteButtonClick: function(button, e, eOpts) {
        var me = this, vm = me.getViewModel(), view = me.getView();
        Ext.Msg.confirm('#{확인}', '#{삭제 하시겠습니까?}', function(btn){
        if(btn == "yes"){
            view.setLoading(true);
            vm.deletePortlet().then({
                success: function(result) {
                    me.clearPortlet();
                    view.fireEvent('deleted', vm.get('data'));
                }
            }).always(function(){
                view.setLoading(false);
            }).done();
        }
    });

    },

    onPreviewButtonClick: function(button, e, eOpts) {
        var me = this, dashboard = me.lookupReference("dashboard");
        dashboard.removeAll();
        var portlet = me.getPortlet();
        dashboard.setPortlets([portlet]);
        dashboard.show();
        dashboard.center();
        dashboard.addNew(portlet.getId());
    }

});

/*
 * File: app/view/admin/config/GeneralViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.config.GeneralViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.portaladmin.config.general',

               
                               
      

    data: {
        data: {
            
        }
    },

    stores: {
        partStore: {
            source: 'config.Part'
        },
        portletGroupStore: {
            source: 'admin.PortletGroup'
        },
        imageStore: {
            source: 'config.Image'
        },
        iconStore: {
            source: 'config.Icon'
        }
    }

});

/*
 * File: app/view/admin/config/GeneralViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.config.GeneralViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.portaladmin.config.general',

    setPortlet: function(value) {
        var vm = this.getViewModel();
        vm.set('data', value);
    },

    init: function() {
        var me = this, view = me.getView();
        view.setPortlet = Ext.Function.bind(me.setPortlet, me);
        view.clearPortlet = Ext.Function.bind(me.clearPortlet, me);
    },

    clearPortlet: function() {
        var vm = this.getViewModel();
        vm.set('data', {
            type : null,
            portletGroup :null,
            name : null,
            title : null,
            enabled : false,
            closable : false,
            defaultOptioned : false,
            width : null,
            height : null,
            iconStyle : null,
            imageStyle : null
        });

    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        me.getView().fireEvent('partChange', newValue, oldValue);
    },

    onIconStyleChange: function(field, newValue, oldValue, eOpts) {
        var me = this,
            iconEl = field.el.down('.iconCls');

        if(oldValue) {
            iconEl.removeCls(oldValue);
        }
        if(newValue) {
            iconEl.addCls(newValue);
        }
    },

    onImageStyleChange: function(field, newValue, oldValue, eOpts) {
        var me = this,
            iconEl = field.el.down('.iconCls');

        if(oldValue) {
            iconEl.removeCls(oldValue);
        }
        if(newValue) {
            iconEl.addCls(newValue);
        }
    }

});

/*
 * File: app/view/admin/config/General.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.config.General', {
    extend:  Ext.form.Panel ,
    alias: 'widget.portaladminconfiggeneral',

               
                                                    
                                                         
                                  
                                  
                                
                                  
                                  
                                   
                                    
                                   
                                         
      

    controller: 'portaladmin.config.general',
    viewModel: {
        type: 'portaladmin.config.general'
    },
    autoScroll: true,
    margin: '0 5 0 0',
    modelValidation: true,
    width: 400,
    layout: 'column',
    bodyBorder: true,
    bodyPadding: 10,
    title: '#{기본정보}',
    fieldDefaults: {
        labelAlign: 'top'
    },

    items: [
        {
            xtype: 'combobox',
            columnWidth: 0.5,
            margin: '0 5 0 0',
            modelValidation: true,
            fieldLabel: '#{유형}',
            editable: false,
            emptyText: '#{선택}',
            forceSelection: true,
            queryMode: 'local',
            valueField: 'id',
            bind: {
                value: '{data.type}',
                store: '{partStore}'
            },
            listeners: {
                change: 'onComboboxChange'
            }
        },
        {
            xtype: 'combobox',
            columnWidth: 0.5,
            fieldLabel: '#{그룹}',
            queryMode: 'local',
            valueField: 'text',
            bind: {
                value: '{data.portletGroup}',
                store: '{portletGroupStore}'
            }
        },
        {
            xtype: 'textfield',
            columnWidth: 1,
            fieldLabel: '#{이름}',
            bind: {
                value: '{data.name}'
            }
        },
        {
            xtype: 'textfield',
            columnWidth: 1,
            fieldLabel: '#{제목}',
            bind: {
                value: '{data.title}'
            }
        },
        {
            xtype: 'checkboxfield',
            columnWidth: 0.25,
            fieldLabel: '#{활성화}',
            inputValue: 'true',
            uncheckedValue: 'false',
            bind: {
                value: '{data.enabled}'
            }
        },
        {
            xtype: 'checkboxfield',
            columnWidth: 0.25,
            fieldLabel: '#{닫기가능}',
            bind: {
                value: '{data.closable}'
            }
        },
        {
            xtype: 'checkboxfield',
            columnWidth: 0.25,
            fieldLabel: '#{기본옵션}',
            bind: {
                value: '{data.defaultOptioned}'
            }
        },
        {
            xtype: 'checkboxfield',
            columnWidth: 0.25,
            fieldLabel: '#{공개여부}',
            bind: {
                value: '{data.disclosed}'
            }
        },
        {
            xtype: 'numberfield',
            columnWidth: 0.5,
            margin: '0 5 0 0',
            fieldLabel: '#{넓이}',
            hideTrigger: true,
            autoStripChars: true,
            bind: {
                value: '{data.width}'
            }
        },
        {
            xtype: 'numberfield',
            columnWidth: 0.5,
            fieldLabel: '#{높이}',
            hideTrigger: true,
            autoStripChars: true,
            bind: {
                value: '{data.height}'
            }
        },
        {
            xtype: 'fieldcontainer',
            columnWidth: 1,
            width: 400,
            layout: 'column',
            items: [
                {
                    xtype: 'combobox',
                    tpl: '<tpl for="."><div class="x-boundlist-item"><div class="{className}" style="height:26px;background:no-repeat #157FCC;padding-left:34px;"></div></div></tpl>',
                    fieldSubTpl: [
                        '<div class="{hiddenDataCls}" role="presentation"></div>',
                        '<div class="iconCls" style="position:absolute; width:28px; height:26px; margin-left:7px;"></div>',
                        '<input id="{id}" type="{type}" {inputAttrTpl} class="{fieldCls} {typeCls} {editableCls}" autocomplete="off"',
                        '<tpl if="value"> value="{[Ext.util.Format.htmlEncode(values.value)]}"</tpl>',
                        '<tpl if="name"> name="{name}"</tpl>',
                        '<tpl if="placeholder"> placeholder="{placeholder}"</tpl>',
                        '<tpl if="size"> size="{size}"</tpl>',
                        '<tpl if="maxLength !== undefined"> maxlength="{maxLength}"</tpl>',
                        '<tpl if="readOnly"> readonly="readonly"</tpl>',
                        '<tpl if="disabled"> disabled="disabled"</tpl>',
                        '<tpl if="tabIdx"> tabIndex="{tabIdx}"</tpl>',
                        '<tpl if="fieldStyle"> style="{fieldStyle}"</tpl>',
                        '/>',
                        {
                            disableFormats: true
                        }
                    ],
                    columnWidth: 0.5,
                    height: 54,
                    hidden: true,
                    margin: '0 5 0 0',
                    width: 80,
                    fieldLabel: '#{아이콘}',
                    fieldStyle: 'text-indent:34px; padding: 3px 6px 6px 6px; opacity : 0;',
                    editable: false,
                    displayField: 'className',
                    forceSelection: true,
                    queryMode: 'local',
                    valueField: 'className',
                    bind: {
                        value: '{data.iconStyle}',
                        store: '{iconStore}'
                    },
                    listeners: {
                        change: 'onIconStyleChange'
                    }
                },
                {
                    xtype: 'combobox',
                    tpl: '<tpl for="."><div class="x-boundlist-item"><div class="{className}" style="background:no-repeat #157FCC;padding-left:34px;"></div></div></tpl>',
                    fieldSubTpl: [
                        '<div class="{hiddenDataCls}" role="presentation"></div>',
                        '<div class="iconCls" style="position:absolute; width:28px; height:26px; margin-left:7px;"></div>',
                        '<input id="{id}" type="{type}" {inputAttrTpl} class="{fieldCls} {typeCls} {editableCls}" autocomplete="off"',
                        '<tpl if="value"> value="{[Ext.util.Format.htmlEncode(values.value)]}"</tpl>',
                        '<tpl if="name"> name="{name}"</tpl>',
                        '<tpl if="placeholder"> placeholder="{placeholder}"</tpl>',
                        '<tpl if="size"> size="{size}"</tpl>',
                        '<tpl if="maxLength !== undefined"> maxlength="{maxLength}"</tpl>',
                        '<tpl if="readOnly"> readonly="readonly"</tpl>',
                        '<tpl if="disabled"> disabled="disabled"</tpl>',
                        '<tpl if="tabIdx"> tabIndex="{tabIdx}"</tpl>',
                        '<tpl if="fieldStyle"> style="{fieldStyle}"</tpl>',
                        '/>',
                        {
                            disableFormats: true
                        }
                    ],
                    columnWidth: 0.5,
                    height: 54,
                    width: 80,
                    fieldLabel: '#{이미지}',
                    fieldStyle: 'text-indent:34px; padding: 3px 6px 6px 6px; opacity:0;',
                    editable: false,
                    displayField: 'className',
                    forceSelection: true,
                    queryMode: 'local',
                    valueField: 'className',
                    bind: {
                        value: '{data.imageStyle}',
                        store: '{imageStore}'
                    },
                    listeners: {
                        change: 'onImageStyleChange'
                    }
                }
            ]
        },
        {
            xtype: 'textareafield',
            columnWidth: 1,
            height: 120,
            fieldLabel: '#{설명}',
            name: 'remark'
        }
    ]

});

/*
 * File: app/view/admin/editor/ComponentViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.editor.ComponentViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.portal.admin.editor.component',

    data: {
        data: {
            className: null,
            config: {
                
            }
        }
    }

});

/*
 * File: app/view/admin/editor/ComponentViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.editor.ComponentViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.portal.admin.editor.component',

    init: function() {
        var me = this, view = me.getView();
        view.getValue = Ext.Function.bind(me.getValue, me);
        view.setValue = Ext.Function.bind(me.setValue, me);
    },

    setValue: function(value) {
        var me = this, vm = me.getViewModel();
        vm.set('data', value);
        if(me.configEditor){
            me.configEditor.set(value.config || {});
        }

    },

    getValue: function() {
        var me = this, vm = me.getViewModel();
        var data = vm.get('data');
        if(me.configEditor){
            data.config = me.configEditor.get();
        }
        return data;
    },

    onConfigAfterRender: function(component, eOpts) {
        //기존
        // var me = this, vm = me.getViewModel();
        // me.configEditor = new JSONEditor.JSONEditor(component.bodyEl);
        // me.configEditor.set(vm.get('data.config') || {});

        //수정버전
        var me = this, vm = me.getViewModel();
        var jsonEditor;
        if(window.jsoneditor && window.jsoneditor.JSONEditor){
            jsonEditor = window.jsoneditor.JSONEditor;
        }else if(window.JSONEditor){
            if(window.JSONEditor.JSONEditor){
                jsonEditor = window.JSONEditor.JSONEditor;
            }else{
                jsonEditor = window.JSONEditor;
            }
        }
        me.configEditor = new jsonEditor(component.bodyEl);
        me.configEditor.set(vm.get('data.config') || {});
    }

});

/*
 * File: app/view/admin/editor/Component.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.editor.Component', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.portaladmineditorcomponent',

               
                                                      
                                                           
                              
                                 
      

    controller: 'portal.admin.editor.component',
    viewModel: {
        type: 'portal.admin.editor.component'
    },
    bodyPadding: 5,
    title: '#{컴포넌트 설정}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'textfield',
            fieldLabel: '#{ClassName}',
            labelAlign: 'top',
            bind: {
                value: '{data.className}'
            }
        },
        {
            xtype: 'fieldcontainer',
            flex: 1,
            minHeight: 400,
            layout: 'fit',
            fieldLabel: 'Config',
            labelAlign: 'top',
            listeners: {
                afterrender: 'onConfigAfterRender'
            }
        }
    ]

});

/*
 * File: app/view/admin/editor/GridViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.editor.GridViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.portaladmin.editor.grid',

               
                                
                         
                                
                                 
                                 
                                
                                
                              
      

    data: {
        data: {
            proxy: null,
            click: null,
            gridProperties: {
                
            },
            proxyProperties: {
                
            }
        },
        column: null
    },

    stores: {
        proxyStore: {
            source: 'config.Proxy'
        },
        columnStore: {
            fields: [
                {
                    type: 'string',
                    name: 'dataIndex'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    type: 'string',
                    name: 'align'
                },
                {
                    type: 'string',
                    defaultValue: 'gridcolumn',
                    name: 'xtype'
                },
                {
                    type: 'int',
                    allowNull: true,
                    name: 'width'
                },
                {
                    type: 'string',
                    name: 'tpl'
                },
                {
                    type: 'boolean',
                    defaultValue: false,
                    name: 'hidden'
                },
                {
                    type: 'float',
                    allowNull: true,
                    name: 'flex'
                },
                {
                    type: 'string',
                    name: 'tdCls'
                },
                {
                    type: 'boolean',
                    defaultValue: true,
                    name: 'resizable'
                },
                {
                    type: 'boolean',
                    defaultValue: true,
                    name: 'hideable'
                },
                {
                    type: 'boolean',
                    defaultValue: true,
                    name: 'sortable'
                },
                {
                    type: 'string',
                    name: 'format'
                }
            ],
            proxy: {
                type: 'memory'
            }
        },
        columnTypeStore: {
            data: [
                {
                    id: 'gridcolumn',
                    text: 'Text',
                    properties: {
                        dataIndex: null,
                        text: null,
                        xtype: null,
                        align: 'left',
                        hidden: false,
                        flex: null,
                        width: 100,
                        tdCls: null,
                        resizable: false,
                        hideable: false,
                        sortable: true
                    }
                },
                {
                    id: 'numbercolumn',
                    text: 'Number',
                    properties: {
                        dataIndex: null,
                        text: null,
                        xtype: null,
                        align: 'right',
                        hidden: false,
                        flex: null,
                        width: 100,
                        tdCls: null,
                        resizable: false,
                        hideable: false,
                        sortable: true,
                        format: null
                    }
                },
                {
                    id: 'templatecolumn',
                    text: 'Template',
                    properties: {
                        dataIndex: null,
                        text: null,
                        xtype: null,
                        align: 'center',
                        hidden: false,
                        flex: null,
                        width: 100,
                        tdCls: null,
                        resizable: false,
                        hideable: false,
                        sortable: false,
                        tpl: null
                    }
                },
                {
                    id: 'datecolumn',
                    text: 'Date',
                    properties: {
                        dataIndex: null,
                        text: null,
                        xtype: null,
                        align: 'center',
                        hidden: false,
                        flex: null,
                        width: 100,
                        tdCls: null,
                        resizable: false,
                        hideable: false,
                        sortable: true,
                        format: null
                    }
                },
                {
                    id: 'rownumberer',
                    text: 'RowNumber',
                    properties: {
                        dataIndex: null,
                        text: null,
                        xtype: null,
                        align: 'center',
                        hidden: false,
                        tdCls: null,
                        resizable: false,
                        hideable: false,
                        sortable: true
                    }
                }
            ],
            fields: [
                {
                    type: 'string',
                    name: 'id'
                },
                {
                    type: 'string',
                    name: 'text'
                },
                {
                    name: 'properties'
                }
            ]
        }
    },
    formulas: {
        columnProperties: function(get) {
            var column = get('column');
            if(!column){
                return null;
            }
            var values = column.getData();
            var columnTypeRecord = get('columnTypeStore').getById(column.get('xtype'));
            var properties = Ext.clone(columnTypeRecord.get('properties'));
            Ext.copyTo( properties, values, Ext.Object.getKeys(properties));
            delete properties.xtype;
            delete properties.dataIndex;
            delete properties.text;
            return properties;
        }
    }

});

/*
 * File: app/view/admin/editor/GridViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.editor.GridViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.portaladmin.editor.grid',

    config: {
        defaultGridProperties: {
            hideHeaders: false,
            columnLines: true,
            scroll: true
        }
    },

    setProxy: function(proxy) {
        var vm = this.getViewModel();
        if(proxy){
            var record = vm.get('proxyStore').getById(proxy);
            var properties = Ext.clone(record.get('properties'));
            var history = vm.get('data.proxyProperties');
            Ext.copyTo( properties, history || {}, Ext.Object.getKeys(properties));
            vm.set('data.proxyProperties', properties);
        }else{
            vm.set('data.proxyProperties', {});
        }

    },

    setValue: function(value) {
        value = value || {};
        value.gridProperties = value.gridProperties || {};
        var defaultGridProperties = Ext.clone(this.getDefaultGridProperties());
        Ext.copyTo( defaultGridProperties, value.gridProperties, Ext.Object.getKeys(defaultGridProperties));
        value.gridProperties = defaultGridProperties;
        var vm = this.getViewModel();

        var columnStore = vm.getStore('columnStore');
        columnStore.removeAll();
        if(Ext.isArray(value.columns)){
            columnStore.add(value.columns);
        }
        delete value.columns;
        vm.set('data' , value);
    },

    getValue: function() {
        var vm = this.getViewModel();
        var value = vm.get('data');
        var columns = [];
        var columnStore = vm.getStore('columnStore');
        columnStore.each(function(record){
            var column = record.getData();
            delete column.id;
            delete column.clientId;
            Ext.iterate(column, function(k, v){
                if(!v){
                    if(!Ext.isBoolean(v) && !Ext.isNumber(v)){
                        delete column[k];
                    }
                }
            });
            columns.push(column);
        });
        value.columns = columns;
        return value;
    },

    columnGridUpActionHandler: function(view, rowIndex, colIndex, item, e, record, row) {
        var vm = this.getViewModel();
        var store = vm.getStore('columnStore');
        var index = store.indexOf(record);

        index--;
        if(index < 0){
            return;
        }

        store.remove(record);
        store.insert(index, record);
        view.getSelectionModel().select(index, true);
    },

    columnGridDownActionHandler: function(view, rowIndex, colIndex, item, e, record, row) {
        var vm = this.getViewModel();
        var store = vm.getStore('columnStore');
        var index = store.indexOf(record);

        index++;
        if(index >= store.getCount()){
            return ;
        }

        store.remove(record);
        store.insert(index, record);
        view.getSelectionModel().select(index, true);
    },

    init: function() {
        var me = this, view = me.getView();
        view.getValue = Ext.Function.bind(me.getValue, me);
        view.setValue = Ext.Function.bind(me.setValue, me);
    },

    onProxyChange: function(field, newValue, oldValue, eOpts) {
        this.setProxy(newValue);
    },

    onGridPropertiesPropertyChange: function(source, recordId, value, oldValue, eOpts) {
        var vm = this.getViewModel();
        vm.set('data.gridProperties.'+ recordId, value);
    },

    onAddColumnButtonClick: function(button, e, eOpts) {
        var vm = this.getViewModel();
        var store = vm.getStore("columnStore");
        store.add({});
    },

    onDeleteColumnButtonClick: function(button, e, eOpts) {
        var vm = this.getViewModel();
        var store = vm.getStore("columnStore");
        var selection = this.lookupReference("columnGrid").getSelectionModel().getSelection();
        if(selection && selection.length){
            store.remove(selection);
        }
    },

    onColumnGridEditingEdit: function(editor, context, eOpts) {
        if(context.field == 'xtype'){
            var vm = this.getViewModel();
            vm.set("column", null);
            vm.notify();
            vm.set("column", context.record);
        }
    },

    onColumnGridSelect: function(rowmodel, record, index, eOpts) {
        var vm = this.getViewModel();
        vm.set('column' , record);
    },

    onColumnGridDeselect: function(rowmodel, record, index, eOpts) {
        var vm = this.getViewModel();
        vm.set('column', null);
    },

    onDeleteColumnPropertyButtonClick: function(button, e, eOpts) {

    },

    onColumnPropertiesPropertyChange: function(source, recordId, value, oldValue, eOpts) {
        var vm = this.getViewModel();
        vm.set('column.' + recordId , value);
    }

});

/*
 * File: app/view/admin/editor/Grid.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.editor.Grid', {
    extend:  Ext.tab.Panel ,
    alias: 'widget.portaladmineditorgrid',

               
                                                 
                                                      
                      
                                  
                                 
                                  
                              
                                 
                                 
                        
                                      
                                   
      

    controller: 'portaladmin.editor.grid',
    viewModel: {
        type: 'portaladmin.editor.grid'
    },
    bodyPadding: 5,
    title: '#{그리드 설정}',
    activeTab: 0,
    plain: true,

    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                items: [
                    {
                        xtype: 'panel',
                        title: '#{데이터 및 그리드 속성}',
                        layout: {
                            type: 'vbox',
                            align: 'stretch'
                        },
                        items: [
                            {
                                xtype: 'combobox',
                                labelAlign: 'top',
                                name: 'proxy',
                                editable: false,
                                emptyText: '#{선택}',
                                displayField: 'name',
                                forceSelection: true,
                                queryMode: 'local',
                                valueField: 'id',
                                bind: {
                                    value: '{data.proxy}',
                                    store: '{proxyStore}'
                                },
                                listeners: {
                                    change: 'onProxyChange'
                                }
                            },
                            {
                                xtype: 'propertygrid',
                                flex: 1,
                                reference: 'proxyPropertyGrid',
                                title: '#{데이터 제공자 속성}',
                                bind: {
                                    source: '{data.proxyProperties}'
                                }
                            },
                            {
                                xtype: 'textareafield',
                                flex: 1,
                                height: 120,
                                fieldLabel: '#{행 클릭 function(data, callback){...}} ',
                                labelAlign: 'top',
                                name: 'click',
                                bind: {
                                    value: '{data.click}'
                                }
                            },
                            {
                                xtype: 'propertygrid',
                                flex: 1,
                                title: '#{그리드 속성}',
                                sourceConfig: {
                                    
                                },
                                bind: {
                                    source: '{data.gridProperties}'
                                },
                                listeners: {
                                    propertychange: 'onGridPropertiesPropertyChange'
                                }
                            }
                        ]
                    },
                    {
                        xtype: 'panel',
                        title: '#{컬럼}',
                        layout: {
                            type: 'vbox',
                            align: 'stretch'
                        },
                        items: [
                            {
                                xtype: 'gridpanel',
                                multiSelect: true,
                                flex: 0.4,
                                reference: 'columnGrid',
                                height: 130,
                                minHeight: 200,
                                title: '#{컬럼 속성}',
                                bind: {
                                    store: '{columnStore}'
                                },
                                dockedItems: [
                                    {
                                        xtype: 'toolbar',
                                        dock: 'top',
                                        items: [
                                            {
                                                xtype: 'button',
                                                iconCls: 'btn-add',
                                                text: '#{추가}',
                                                listeners: {
                                                    click: 'onAddColumnButtonClick'
                                                }
                                            },
                                            {
                                                xtype: 'button',
                                                text: '#{삭제}',
                                                listeners: {
                                                    click: 'onDeleteColumnButtonClick'
                                                }
                                            }
                                        ]
                                    }
                                ],
                                columns: [
                                    {
                                        xtype: 'actioncolumn',
                                        width: 30,
                                        align: 'center',
                                        altText: 'up',
                                        iconCls: 'field-btn-up',
                                        items: [
                                            {
                                                handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                    var controller = view.up('[controller]').controller;
                                                    controller.columnGridUpActionHandler.apply(controller, arguments);
                                                },
                                                isDisabled: function(view, rowIndex, colIndex, item, record) {
                                                    if(rowIndex === 0){
                                                        return true;
                                                    }else{
                                                        return false;
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'actioncolumn',
                                        width: 30,
                                        align: 'center',
                                        altText: 'down',
                                        iconCls: 'field-btn-down',
                                        items: [
                                            {
                                                handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                                    var controller = view.up('[controller]').controller;
                                                    controller.columnGridDownActionHandler.apply(controller, arguments);
                                                },
                                                isDisabled: function(view, rowIndex, colIndex, item, record) {
                                                    var lastIndex = view.getStore().getCount() - 1;
                                                    if(rowIndex < lastIndex){
                                                        return false;
                                                    }else{
                                                        return true;
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        width: 100,
                                        dataIndex: 'dataIndex',
                                        text: '#{필드}',
                                        editor: {
                                            xtype: 'textfield',
                                            allowBlank: false
                                        }
                                    },
                                    {
                                        xtype: 'gridcolumn',
                                        width: 120,
                                        dataIndex: 'text',
                                        text: '#{텍스트}',
                                        flex: 1,
                                        editor: {
                                            xtype: 'textfield',
                                            allowBlank: false
                                        }
                                    },
                                    {
                                        xtype: 'etnastorecolumn',
                                        width: 120,
                                        align: 'center',
                                        dataIndex: 'xtype',
                                        text: '#{유형}',
                                        valueField: 'id',
                                        displayField: 'text',
                                        bind: {
                                            store: '{columnTypeStore}'
                                        },
                                        editor: {
                                            xtype: 'combobox',
                                            valueField: 'id',
                                            bind: {
                                                store: '{columnTypeStore}'
                                            }
                                        }
                                    }
                                ],
                                plugins: [
                                    Ext.create('Ext.grid.plugin.CellEditing', {
                                        listeners: {
                                            edit: 'onColumnGridEditingEdit'
                                        }
                                    })
                                ],
                                listeners: {
                                    select: 'onColumnGridSelect',
                                    deselect: 'onColumnGridDeselect'
                                }
                            },
                            {
                                xtype: 'propertygrid',
                                flex: 0.6,
                                minHeight: 200,
                                title: '#{컬럼 상세 속성}',
                                sourceConfig: {
                                    align: {
                                        editor: {
                                            xtype: 'combobox',
                                            forceSelection: true,
                                            store: [
                                                'left',
                                                'center',
                                                'right'
                                            ]
                                        }
                                    },
                                    hidden: {
                                        editor: {
                                            xtype: 'checkbox'
                                        }
                                    },
                                    flex: {
                                        editor: {
                                            xtype: 'numberfield',
                                            step: 0.1
                                        }
                                    },
                                    width: {
                                        editor: {
                                            xtype: 'numberfield'
                                        }
                                    },
                                    tdCls: {
                                        editor: {
                                            xtype: 'textfield'
                                        }
                                    },
                                    resizable: {
                                        editor: {
                                            xtype: 'checkbox'
                                        }
                                    },
                                    hideable: {
                                        editor: {
                                            xtype: 'checkbox'
                                        }
                                    },
                                    sortable: {
                                        editor: {
                                            xtype: 'checkbox'
                                        }
                                    },
                                    tpl: {
                                        editor: {
                                            xtype: 'textarea'
                                        }
                                    },
                                    format: {
                                        editor: {
                                            xtype: 'textfield'
                                        }
                                    }
                                },
                                bind: {
                                    source: {
                                        bindTo: '{columnProperties}',
                                        deep: true
                                    }
                                },
                                dockedItems: [
                                    {
                                        xtype: 'toolbar',
                                        dock: 'top',
                                        items: [
                                            {
                                                xtype: 'button',
                                                iconCls: 'btn-delete',
                                                text: '#{삭제}',
                                                listeners: {
                                                    click: 'onDeleteColumnPropertyButtonClick'
                                                }
                                            }
                                        ]
                                    }
                                ],
                                listeners: {
                                    propertychange: 'onColumnPropertiesPropertyChange'
                                }
                            }
                        ]
                    }
                ]
            };
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    }

});

/*
 * File: app/view/admin/editor/PageViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.editor.PageViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.portaladmin.editor.page',

    data: {
        data: {
            url: null
        }
    }

});

/*
 * File: app/view/admin/editor/PageViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.editor.PageViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.portaladmin.editor.page',

    init: function() {
        var me = this, view = me.getView();
        view.getValue = Ext.Function.bind(me.getValue, me);
        view.setValue = Ext.Function.bind(me.setValue, me);
    },

    setValue: function(value) {
        var vm = this.getViewModel();
        vm.set('data', value);
    },

    getValue: function() {
        var vm = this.getViewModel();
        return vm.get('data');
    }

});

/*
 * File: app/view/admin/editor/Page.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.editor.Page', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.portaladmineditorpage',

               
                                                 
                                                      
                                 
      

    controller: 'portaladmin.editor.page',
    viewModel: {
        type: 'portaladmin.editor.page'
    },
    height: 250,
    ui: 'table',
    bodyPadding: 5,
    title: '#{페이지 설정}',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'textareafield',
            fieldLabel: '#{URL}',
            labelAlign: 'top',
            bind: {
                value: '{data.url}'
            }
        }
    ]

});

/*
 * File: app/view/admin/config/AuthorityViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.config.AuthorityViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.adminconfigauthority',

               
                         
                                
                               
                                
                                
      

    data: {
        data: null
    },

    stores: {
        authorityStore: {
            proxy: {
                type: 'direct',
                directFn: 'smartsuit.ui.etnajs.portal.ConfigurationController.findPortletAuthorities',
                reader: {
                    type: 'json',
                    rootProperty: 'records'
                }
            },
            fields: [
                {
                    type: 'string',
                    name: 'name'
                },
                {
                    type: 'boolean',
                    name: 'granted'
                },
                {
                    type: 'string',
                    name: 'authority'
                }
            ]
        }
    }

});

/*
 * File: app/view/admin/config/AuthorityViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.config.AuthorityViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.adminconfigauthority',

    init: function() {
        var me = this, view = me.getView();
        view.setPortlet = Ext.Function.bind(me.setPortlet, me);
        view.clearPortlet = Ext.Function.bind(me.clearPortlet, me);
        view.createPortlet = Ext.Function.bind(me.createPortlet, me);
    },

    setPortlet: function(value) {
        var vm = this.getViewModel();
        vm.set('data', value);
        if(value){
            vm.getStore('authorityStore').load({
                params : {
                    id : value.get('id')
                }
            });
        }
    },

    clearPortlet: function() {
        var vm = this.getViewModel();
        vm.set('data', {});
        vm.getStore('authorityStore').removeAll();
    },

    createPortlet: function(portlet) {
        console.log(portlet);
    },

    onAuthorityGridCellEditingEdit: function(editor, context, eOpts) {
        if(context.field == "granted"){
            var view = this.getView();
            if(context.value){
                view.fireEvent('addAuthority', context.record);
            }else{
                view.fireEvent('removeAuthority', context.record);
            }
        }
    }

});

/*
 * File: app/view/admin/config/Authority.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.config.Authority', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.adminconfigauthority',

               
                                                      
                                                           
                         
                                
                                  
                        
                                     
      

    controller: 'adminconfigauthority',
    viewModel: {
        type: 'adminconfigauthority'
    },
    height: 250,
    ui: 'main',
    width: 400,
    layout: 'fit',
    title: '#{권한 설정}',

    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                items: [
                    {
                        xtype: 'gridpanel',
                        reference: 'authorityGrid',
                        ui: 'grid',
                        bind: {
                            store: '{authorityStore}'
                        },
                        columns: [
                            {
                                xtype: 'checkcolumn',
                                dataIndex: 'granted',
                                text: '#{권한여부}',
                                editor: {
                                    xtype: 'checkboxfield'
                                }
                            },
                            {
                                xtype: 'gridcolumn',
                                width: 150,
                                align: 'center',
                                dataIndex: 'authority',
                                text: '#{롤 코드}'
                            },
                            {
                                xtype: 'gridcolumn',
                                width: 200,
                                dataIndex: 'name',
                                text: '#{롤 명}'
                            }
                        ],
                        plugins: [
                            Ext.create('Ext.grid.plugin.CellEditing', {
                                listeners: {
                                    edit: 'onAuthorityGridCellEditingEdit'
                                }
                            })
                        ]
                    }
                ]
            };
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    }

});

/*
 * File: app/view/admin/PortletDetail.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.PortletDetail', {
    extend:  Ext.tab.Panel ,
    alias: 'widget.portaladminportletdetail',

               
                                                   
                                                        
                                           
                                             
                                        
                                        
                                             
                                
                         
                      
                        
                              
                                  
                                  
      

    controller: 'portaladmin.portletdetail',
    viewModel: {
        type: 'portaladmin.portletdetail'
    },
    reference: 'portletDetail',
    height: 500,
    width: 459,
    activeTab: 0,
    plain: true,

    items: [
        {
            xtype: 'portaladminconfiggeneral',
            reference: 'general',
            listeners: {
                partChange: 'onGenaralPartChange'
            }
        },
        {
            xtype: 'panel',
            reference: 'contentContainer',
            layout: 'fit',
            title: '#{내용}',
            bind: {
                disabled: '{!editor}'
            },
            items: [
                {
                    xtype: 'portaladmineditorcomponent',
                    lazy: true,
                    hidden: true
                },
                {
                    xtype: 'portaladmineditorgrid',
                    lazy: true,
                    hidden: true
                },
                {
                    xtype: 'portaladmineditorpage',
                    lazy: true,
                    hidden: true
                }
            ]
        },
        {
            xtype: 'adminconfigauthority',
            lazy: true,
            reference: 'authority',
            bind: {
                disabled: '{isPhantom}'
            },
            listeners: {
                addAuthority: 'onAddAuthority',
                removeAuthority: 'onRemoveAuthority'
            }
        },
        {
            xtype: 'portaldashboard',
            reference: 'dashboard',
            floating: true,
            height: 400,
            hidden: true,
            width: 400,
            closable: true,
            closeAction: 'hide',
            maxColumns: 1,
            columnWidths: [
                1
            ],
            bind: {
                title: '{data.title} 미리보기'
            }
        }
    ],
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            cls: 'func-toolbar',
            items: [
                {
                    xtype: 'button',
                    iconCls: 'btn-save',
                    text: '#{저장}',
                    listeners: {
                        click: 'onSaveButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-delete',
                    text: '#{삭제}',
                    bind: {
                        disabled: '{isPhantom}'
                    },
                    listeners: {
                        click: 'onDeleteButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'btn-search',
                    text: '#{미리보기}',
                    bind: {
                        disabled: '{!data.type}'
                    },
                    listeners: {
                        click: 'onPreviewButtonClick'
                    }
                }
            ]
        }
    ]

});

/*
 * File: app/view/admin/Portlet.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.admin.Portlet', {
    extend:  Ext.panel.Panel ,
    alias: 'widget.portaladminPortlet',

               
                                             
                                                  
                                        
                                          
                       
      

    controller: 'portaladmin.portlet',
    viewModel: {
        type: 'portaladmin.portlet'
    },
    autoShow: true,
    layout: 'border',
    title: '#{포틀릿 관리}',

    items: [
        {
            xtype: 'portaladminportletlist',
            reference: 'list',
            flex: 1,
            region: 'center',
            split: false,
            listeners: {
                select: 'onListSelect',
                create: 'onListCreate',
                load: 'onListLoad',
                clearDetail: 'onPanelClearDetail'
            }
        },
        {
            xtype: 'portaladminportletdetail',
            reference: 'detail',
            minWidth: 300,
            flex: 0.5,
            region: 'east',
            split: true,
            bind: {
                disabled: '{!selected}'
            },
            listeners: {
                saved: 'onPortletSaved',
                deleted: 'onPortletDeleted'
            }
        }
    ]

});

/*
 * File: app/view/partview/GridViewModel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.partview.GridViewModel', {
    extend:  Ext.app.ViewModel ,
    alias: 'viewmodel.portalpartview.grid',

               
                         
                               
                               
      

    stores: {
        store: {
            fields: [
                {
                    name: 'dummy'
                }
            ]
        },
        proxyStore: {
            source: 'config.Proxy'
        }
    }

});

/*
 * File: app/view/partview/GridViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.partview.GridViewController', {
    extend:  Ext.app.ViewController ,
    alias: 'controller.portalpartview.grid',

    init: function() {
        var me = this, view = me.getView();
        var store = me.createStore();
        view.setStore(store);
        me.clickHandler = new Function("data", "callback", Ext.isString(view.click) ? view.click : '');
    },

    createProxy: function() {
        var me = this,
            vm = me.getViewModel(),
            view = me.getView(),
            proxy = view.getProxy(),
            properties = view.getProxyProperties();
        if(Ext.isString(proxy) && proxy){
            var proxyRecord = vm.getStore('proxyStore').getById(proxy);
            var template = new Ext.util.ObjectTemplate(proxyRecord.get('template'));
            return Ext.Factory.proxy(template.apply(properties));
        }else{
            return Ext.Factory.proxy('memory');
        }

    },

    createStore: function() {
        var me = this,
            view = me.getView(),
            columns = view.columns,
            fields = [];

        Ext.each(columns, function(column){
            var type = "auto";
            switch(column.xtype){
                case "datecolumn":{
                    type = "date";
                    break;
                }
            }
            fields.push({
                name : column.dataIndex,
                type : type
            });
        });

        return Ext.create('Ext.data.Store', {
            autoLoad : true,
            proxy : me.createProxy(),
            fields : fields

        });

    },

    onSelect: function(rowmodel, record, index, eOpts) {
        var me = this;
        if(me.clickHandler){
            me.clickHandler(record.getData(), function(){
                me.getView().getStore().reload();
            })
        }

    }

});

/*
 * File: app/view/partview/Grid.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Portal.view.partview.Grid', {
    extend:  Ext.grid.Panel ,
    alias: 'widget.portalpartviewGrid',

               
                                             
                                                  
                        
                                 
                                   
      

    config: {
        proxy: null,
        proxyProperties: null
    },

    controller: 'portalpartview.grid',
    viewModel: {
        type: 'portalpartview.grid'
    },
    cls: 'portlet',
    ui: 'grid',

    columns: [
        {
            xtype: 'gridcolumn',
            flex: 1
        }
    ],
    listeners: {
        select: 'onSelect'
    }

});

Ext.define("Portal.store.config.Part.I18n", {override : "Portal.store.config.Part", i18n : ["grid","page","component"]});Ext.define("Portal.view.Portal.I18n", {override : "Portal.view.Portal", i18n : ["Portal Menu","Decreasing Split Screen","Increasing Split Screen","Split Screen Slider"]});Ext.define("Portal.view.admin.PortletList.I18n", {override : "Portal.view.admin.PortletList", i18n : ["\ud3ec\ud2c0\ub9bf \ubaa9\ub85d","\uc870\ud68c","\uadf8\ub8f9","\uc720\ud615","\uc774\ub984","\ucd94\uac00","\uc774\ub984","\uc81c\ubaa9","\uc720\ud615","\uadf8\ub8f9","\ub113\uc774","\ub192\uc774","\ud65c\uc131\ud654"]});Ext.define("Portal.view.admin.PortletDetailViewController.I18n", {override : "Portal.view.admin.PortletDetailViewController", i18n : ["\ud655\uc778","\uc800\uc7a5 \ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c?","\ud3ec\ud2c0\ub9bf \uc0c1\uc138\uc815\ubcf4 \uc785\ub825\uc774 \uc644\ub8cc\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.","\ud655\uc778","\uc0ad\uc81c \ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c?"]});Ext.define("Portal.view.admin.config.General.I18n", {override : "Portal.view.admin.config.General", i18n : ["\uae30\ubcf8\uc815\ubcf4","\uc720\ud615","\uc120\ud0dd","\uadf8\ub8f9","\uc774\ub984","\uc81c\ubaa9","\ud65c\uc131\ud654","\ub2eb\uae30\uac00\ub2a5","\uae30\ubcf8\uc635\uc158","\uacf5\uac1c\uc5ec\ubd80","\ub113\uc774","\ub192\uc774","\uc544\uc774\ucf58","\uc774\ubbf8\uc9c0","\uc124\uba85"]});Ext.define("Portal.view.admin.editor.Component.I18n", {override : "Portal.view.admin.editor.Component", i18n : ["\ucef4\ud3ec\ub10c\ud2b8 \uc124\uc815","ClassName"]});Ext.define("Portal.view.admin.editor.Grid.I18n", {override : "Portal.view.admin.editor.Grid", i18n : ["\uadf8\ub9ac\ub4dc \uc124\uc815","\ub370\uc774\ud130 \ubc0f \uadf8\ub9ac\ub4dc \uc18d\uc131","\uc120\ud0dd","\ub370\uc774\ud130 \uc81c\uacf5\uc790 \uc18d\uc131","\uadf8\ub9ac\ub4dc \uc18d\uc131","\uceec\ub7fc","\uceec\ub7fc \uc18d\uc131","\ucd94\uac00","\uc0ad\uc81c","\ud544\ub4dc","\ud14d\uc2a4\ud2b8","\uc720\ud615","\uceec\ub7fc \uc0c1\uc138 \uc18d\uc131","\uc0ad\uc81c"]});Ext.define("Portal.view.admin.editor.Page.I18n", {override : "Portal.view.admin.editor.Page", i18n : ["\ud398\uc774\uc9c0 \uc124\uc815","URL"]});Ext.define("Portal.view.admin.config.Authority.I18n", {override : "Portal.view.admin.config.Authority", i18n : ["\uad8c\ud55c \uc124\uc815","\uad8c\ud55c\uc5ec\ubd80","\ub864 \ucf54\ub4dc","\ub864 \uba85"]});Ext.define("Portal.view.admin.PortletDetail.I18n", {override : "Portal.view.admin.PortletDetail", i18n : ["\ub0b4\uc6a9","\uc800\uc7a5","\uc0ad\uc81c","\ubbf8\ub9ac\ubcf4\uae30"]});Ext.define("Portal.view.admin.Portlet.I18n", {override : "Portal.view.admin.Portlet", i18n : ["\ud3ec\ud2c0\ub9bf \uad00\ub9ac"]});(function(definitions){
									Ext.iterate(definitions, function(className, definition){
										var clazz = Ext.ClassManager.get(className);
										var requires = [];
										Ext.each(definition.requires, function(require){
											requires.push(Ext.ClassManager.get(require));
										});
										if(clazz){Ext.override(clazz, {requires : requires});};
									});
								})(							
							{
  "Portal.view.Dashboard": {
    "uses": [],
    "requires": [
      "Ext.dashboard.Dashboard",
      "Portal.view.DashboardViewModel",
      "Portal.view.DashboardViewController",
      "Portal.model.Portlet",
      "Portal.store.config.Part"
    ]
  },
  "Portal.view.admin.PortletDetailViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.data.ChainedStore",
      "Ext.app.bind.Formula"
    ]
  },
  "Portal.override.dashboard.Part": {
    "uses": [],
    "requires": []
  },
  "Portal.view.admin.PortletDetail": {
    "uses": [],
    "requires": [
      "Ext.tab.Panel",
      "Portal.view.admin.PortletDetailViewModel",
      "Portal.view.admin.PortletDetailViewController",
      "Portal.view.admin.config.General",
      "Portal.view.admin.editor.Component",
      "Portal.view.admin.editor.Grid",
      "Portal.view.admin.editor.Page",
      "Portal.view.admin.config.Authority",
      "Portal.view.Dashboard",
      "Ext.form.Panel",
      "Ext.tab.Tab",
      "Ext.tab.Panel",
      "Ext.toolbar.Toolbar",
      "Ext.dashboard.Dashboard",
      "Portal.store.config.Part"
    ]
  },
  "Portal.controller.PortletDragSource": {
    "uses": [],
    "requires": [
      "Ext.dd.DragSource"
    ]
  },
  "Portal.view.admin.editor.PageViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "Portal.store.admin.PortletGroup": {
    "uses": [],
    "requires": [
      "Ext.data.Store",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String"
    ]
  },
  "Portal.view.PortalViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController",
      "Portal.controller.PortletDragSource"
    ]
  },
  "Portal.view.admin.config.AuthorityViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "Portal.controller.DropZone": {
    "uses": [],
    "requires": [
      "Ext.dashboard.DropZone"
    ]
  },
  "Portal.store.Portlet": {
    "uses": [],
    "requires": [
      "Ext.data.Store",
      "Portal.model.Portlet",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json"
    ]
  },
  "Portal.controller.PartFactory": {
    "uses": [],
    "requires": [
      "Ext.Base"
    ]
  },
  "Portal.view.admin.config.GeneralViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.data.ChainedStore"
    ]
  },
  "Portal.store.CodeStore": {
    "uses": [],
    "requires": [
      "Cmmn.store.Code",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String"
    ]
  },
  "Portal.view.admin.editor.GridViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "Portal.view.DashboardViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.data.ChainedStore"
    ]
  },
  "Portal.view.admin.editor.Component": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "Portal.view.admin.editor.ComponentViewModel",
      "Portal.view.admin.editor.ComponentViewController",
      "Ext.form.field.Text",
      "Ext.form.FieldContainer"
    ]
  },
  "Portal.view.admin.editor.ComponentViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "Portal.controller.GridFactory": {
    "uses": [],
    "requires": [
      "Portal.controller.PartFactory",
      "Portal.controller.override.GridFactory",
      "Ext.dashboard.Part"
    ]
  },
  "Portal.view.admin.PortletViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "Portal.ux.IFrame": {
    "uses": [],
    "requires": [
      "Ext.Component"
    ]
  },
  "Portal.view.PortalViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.data.Store",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.ChainedStore",
      "Ext.data.field.Field"
    ]
  },
  "Portal.view.admin.PortletDetailViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "Portal.view.partview.GridViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "Portal.view.Portal": {
    "uses": [],
    "requires": [
      "Ext.window.Window",
      "Portal.view.PortalViewModel",
      "Portal.view.PortalViewController",
      "Portal.view.Dashboard",
      "Ext.form.field.ComboBox",
      "Ext.view.View",
      "Ext.XTemplate",
      "Ext.button.Button",
      "Ext.toolbar.Toolbar",
      "Ext.slider.Multi",
      "Ext.dashboard.Dashboard"
    ]
  },
  "Portal.view.admin.config.AuthorityViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.data.Store",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.field.String",
      "Ext.data.field.Boolean"
    ]
  },
  "Portal.view.partview.GridViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.data.Store",
      "Ext.data.field.Field",
      "Ext.data.ChainedStore"
    ]
  },
  "Portal.view.admin.PortletList": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "Portal.view.admin.PortletListViewModel",
      "Portal.view.admin.PortletListViewController",
      "Ext.form.Panel",
      "Ext.toolbar.Toolbar",
      "Ext.toolbar.TextItem",
      "Ext.toolbar.Spacer",
      "Ext.button.Button",
      "Ext.form.field.ComboBox",
      "Etna.form.plugin.AutoClearButton",
      "Ext.grid.Panel",
      "Ext.grid.View",
      "Ext.grid.column.Check",
      "Ext.grid.plugin.CellEditing",
      "Portal.store.admin.PortletGroup"
    ]
  },
  "Portal.view.admin.editor.ComponentViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "Portal.view.admin.Portlet": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "Portal.view.admin.PortletViewModel",
      "Portal.view.admin.PortletViewController",
      "Portal.view.admin.PortletList",
      "Portal.view.admin.PortletDetail",
      "Ext.tab.Panel"
    ]
  },
  "Portal.view.admin.editor.Page": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "Portal.view.admin.editor.PageViewModel",
      "Portal.view.admin.editor.PageViewController",
      "Ext.form.field.TextArea"
    ]
  },
  "Portal.model.Portlet": {
    "uses": [],
    "requires": [
      "Ext.data.Model",
      "Ext.data.proxy.Direct",
      "Ext.data.field.String",
      "Ext.data.field.Integer",
      "Ext.data.field.Boolean",
      "Ext.data.field.Date"
    ]
  },
  "Portal.store.config.Proxy": {
    "uses": [],
    "requires": [
      "Ext.data.Store",
      "Ext.data.field.String"
    ]
  },
  "Portal.view.admin.PortletListViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.data.Store",
      "Ext.data.field.String",
      "Ext.data.proxy.Direct",
      "Ext.data.reader.Json",
      "Ext.data.ChainedStore"
    ]
  },
  "Portal.store.config.Image": {
    "uses": [],
    "requires": [
      "Ext.data.Store",
      "Ext.data.field.Field"
    ]
  },
  "Portal.view.admin.PortletViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.app.bind.Formula"
    ]
  },
  "Portal.view.admin.PortletListViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController",
      "Portal.model.Portlet"
    ]
  },
  "Portal.store.config.Icon": {
    "uses": [],
    "requires": [
      "Ext.data.Store",
      "Ext.data.field.String"
    ]
  },
  "Portal.view.admin.config.Authority": {
    "uses": [],
    "requires": [
      "Ext.panel.Panel",
      "Portal.view.admin.config.AuthorityViewModel",
      "Portal.view.admin.config.AuthorityViewController",
      "Ext.grid.Panel",
      "Ext.grid.column.Check",
      "Ext.form.field.Checkbox",
      "Ext.grid.View",
      "Ext.grid.plugin.CellEditing"
    ]
  },
  "Portal.view.admin.config.General": {
    "uses": [],
    "requires": [
      "Ext.form.Panel",
      "Portal.view.admin.config.GeneralViewModel",
      "Portal.view.admin.config.GeneralViewController",
      "Ext.form.field.ComboBox",
      "Ext.form.field.Checkbox",
      "Ext.form.field.Number",
      "Ext.form.FieldContainer",
      "Ext.form.field.TextArea",
      "Portal.store.config.Icon",
      "Portal.store.config.Image",
      "Portal.store.config.Part",
      "Portal.store.admin.PortletGroup"
    ]
  },
  "Portal.view.admin.editor.GridViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel",
      "Ext.data.ChainedStore",
      "Ext.data.Store",
      "Ext.data.field.String",
      "Ext.data.field.Integer",
      "Ext.data.field.Boolean",
      "Ext.data.field.Number",
      "Ext.data.proxy.Memory",
      "Ext.app.bind.Formula"
    ]
  },
  "Portal.view.DashboardViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController",
      "Portal.controller.DropZone"
    ]
  },
  "Portal.view.admin.config.GeneralViewController": {
    "uses": [],
    "requires": [
      "Ext.app.ViewController"
    ]
  },
  "Portal.controller.ComponentFactory": {
    "uses": [],
    "requires": [
      "Portal.controller.PartFactory"
    ]
  },
  "Portal.controller.PageFactory": {
    "uses": [],
    "requires": [
      "Portal.controller.PartFactory"
    ]
  },
  "Portal.view.admin.editor.Grid": {
    "uses": [],
    "requires": [
      "Ext.tab.Panel",
      "Portal.view.admin.editor.GridViewModel",
      "Portal.view.admin.editor.GridViewController",
      "Ext.tab.Tab",
      "Ext.form.field.ComboBox",
      "Ext.grid.property.Grid",
      "Ext.form.field.TextArea",
      "Ext.toolbar.Toolbar",
      "Ext.grid.column.Action",
      "Etna.grid.column.Store",
      "Ext.grid.View",
      "Ext.grid.plugin.CellEditing",
      "Portal.store.config.Proxy"
    ]
  },
  "Portal.view.admin.editor.PageViewModel": {
    "uses": [],
    "requires": [
      "Ext.app.ViewModel"
    ]
  },
  "Portal.store.config.Part": {
    "uses": [],
    "requires": [
      "Ext.data.Store",
      "Ext.data.field.String"
    ]
  },
  "Portal.controller.override.GridFactory": {
    "uses": [],
    "requires": []
  },
  "Portal.view.partview.Grid": {
    "uses": [],
    "requires": [
      "Ext.grid.Panel",
      "Portal.view.partview.GridViewModel",
      "Portal.view.partview.GridViewController",
      "Ext.grid.View",
      "Ext.grid.column.Column",
      "Portal.store.config.Proxy"
    ]
  }
}
);